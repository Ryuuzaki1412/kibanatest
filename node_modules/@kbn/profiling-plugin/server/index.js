"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;
exports.plugin = plugin;
var _configSchema = require("@kbn/config-schema");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


/**
 * These properties are used to create both the Collector and the Symbolizer integrations
 * when Universal Profiling is initialized.
 * As of now Universal Profiling is only available on Elastic Cloud, so
 * Elastic Cloud will fill these properties up and pass it to Kibana.
 * Note that the list of config options does not encompass all the avaiable entries
 * offered by the integrations pacakges, but are limited to the ones that
 * Cloud will make use of.
 */
const packageInputSchema = _configSchema.schema.object({
  host: _configSchema.schema.maybe(_configSchema.schema.string()),
  telemetry: _configSchema.schema.maybe(_configSchema.schema.boolean()),
  tls_enabled: _configSchema.schema.maybe(_configSchema.schema.boolean()),
  tls_supported_protocols: _configSchema.schema.maybe(_configSchema.schema.arrayOf(_configSchema.schema.string())),
  tls_certificate_path: _configSchema.schema.maybe(_configSchema.schema.string()),
  tls_key_path: _configSchema.schema.maybe(_configSchema.schema.string())
});
const configSchema = _configSchema.schema.object({
  enabled: _configSchema.schema.boolean({
    defaultValue: false
  }),
  symbolizer: _configSchema.schema.maybe(packageInputSchema),
  collector: _configSchema.schema.maybe(packageInputSchema),
  elasticsearch: _configSchema.schema.conditional(_configSchema.schema.contextRef('dist'), _configSchema.schema.literal(true), _configSchema.schema.never(), _configSchema.schema.maybe(_configSchema.schema.object({
    hosts: _configSchema.schema.string(),
    username: _configSchema.schema.string(),
    password: _configSchema.schema.string()
  })))
});
// plugin config
const config = {
  schema: configSchema
};

//  This exports static code and TypeScript types,
//  as well as, Kibana Platform `plugin()` initializer.
exports.config = config;
async function plugin(initializerContext) {
  const {
    ProfilingPlugin
  } = await Promise.resolve().then(() => _interopRequireWildcard(require('./plugin')));
  return new ProfilingPlugin(initializerContext);
}