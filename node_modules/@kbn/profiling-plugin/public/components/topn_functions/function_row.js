"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionRow = FunctionRow;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _profilingUtils = require("@kbn/profiling-utils");
var _react = _interopRequireWildcard(require("react"));
var _common = require("@kbn/observability-plugin/common");
var _as_cost = require("../../utils/formatters/as_cost");
var _as_weight = require("../../utils/formatters/as_weight");
var _use_profiling_dependencies = require("../contexts/profiling_dependencies/use_profiling_dependencies");
var _stack_frame_summary = require("../stack_frame_summary");
var _cpu_stat = require("./cpu_stat");
var _sample_stat = require("./sample_stat");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function FunctionRow({
  functionRow,
  columnId,
  totalCount,
  onFrameClick,
  setCellProps
}) {
  var _functionRow$impactEs, _functionRow$impactEs2, _functionRow$impactEs3, _functionRow$impactEs4;
  const {
    start: {
      core
    }
  } = (0, _use_profiling_dependencies.useProfilingDependencies)();
  const shouldUseLegacyCo2Calculation = core.uiSettings.get(_common.profilingUseLegacyCo2Calculation);
  if (columnId === _profilingUtils.TopNFunctionSortField.Diff) {
    return /*#__PURE__*/_react.default.createElement(DiffColumn, {
      diff: functionRow.diff,
      setCellProps: setCellProps
    });
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.Rank) {
    return /*#__PURE__*/_react.default.createElement("div", null, functionRow.rank);
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.Frame) {
    return /*#__PURE__*/_react.default.createElement(_stack_frame_summary.StackFrameSummary, {
      frame: functionRow.frame,
      onFrameClick: onFrameClick
    });
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.Samples) {
    var _functionRow$diff;
    return /*#__PURE__*/_react.default.createElement(SamplesColumn, {
      samples: functionRow.samples,
      diffSamples: (_functionRow$diff = functionRow.diff) === null || _functionRow$diff === void 0 ? void 0 : _functionRow$diff.samples,
      totalSamples: totalCount,
      setCellProps: setCellProps
    });
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.SelfCPU) {
    var _functionRow$diff2;
    return /*#__PURE__*/_react.default.createElement(_cpu_stat.CPUStat, {
      cpu: functionRow.selfCPUPerc,
      diffCPU: (_functionRow$diff2 = functionRow.diff) === null || _functionRow$diff2 === void 0 ? void 0 : _functionRow$diff2.selfCPUPerc
    });
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.TotalCPU) {
    var _functionRow$diff3;
    return /*#__PURE__*/_react.default.createElement(_cpu_stat.CPUStat, {
      cpu: functionRow.totalCPUPerc,
      diffCPU: (_functionRow$diff3 = functionRow.diff) === null || _functionRow$diff3 === void 0 ? void 0 : _functionRow$diff3.totalCPUPerc
    });
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.AnnualizedCo2 && (_functionRow$impactEs = functionRow.impactEstimates) !== null && _functionRow$impactEs !== void 0 && (_functionRow$impactEs2 = _functionRow$impactEs.totalCPU) !== null && _functionRow$impactEs2 !== void 0 && _functionRow$impactEs2.annualizedCo2) {
    return /*#__PURE__*/_react.default.createElement("div", null, (0, _as_weight.asWeight)(shouldUseLegacyCo2Calculation ? functionRow.impactEstimates.totalCPU.annualizedCo2 : functionRow.totalAnnualCO2kgs, 'kgs'));
  }
  if (columnId === _profilingUtils.TopNFunctionSortField.AnnualizedDollarCost && (_functionRow$impactEs3 = functionRow.impactEstimates) !== null && _functionRow$impactEs3 !== void 0 && (_functionRow$impactEs4 = _functionRow$impactEs3.totalCPU) !== null && _functionRow$impactEs4 !== void 0 && _functionRow$impactEs4.annualizedDollarCost) {
    return /*#__PURE__*/_react.default.createElement("div", null, (0, _as_cost.asCost)(shouldUseLegacyCo2Calculation ? functionRow.impactEstimates.totalCPU.annualizedDollarCost : functionRow.totalAnnualCostUSD));
  }
  return null;
}
function SamplesColumn({
  samples,
  totalSamples,
  diffSamples,
  setCellProps
}) {
  (0, _react.useEffect)(() => {
    setCellProps({
      css: {
        textAlign: 'right'
      }
    });
  }, [setCellProps]);
  return /*#__PURE__*/_react.default.createElement(_sample_stat.SampleStat, {
    samples: samples,
    diffSamples: diffSamples,
    totalSamples: totalSamples
  });
}
function DiffColumn({
  diff,
  setCellProps
}) {
  const theme = (0, _eui.useEuiTheme)();
  const successColor = (0, _eui.useEuiBackgroundColor)('success');
  const dangerColor = (0, _eui.useEuiBackgroundColor)('danger');
  (0, _react.useEffect)(() => {
    if (diff && diff.rank !== 0) {
      const color = diff.rank > 0 ? 'success' : 'danger';
      setCellProps({
        style: {
          backgroundColor: color === 'success' ? successColor : dangerColor
        }
      });
    }
  }, [dangerColor, diff, setCellProps, successColor]);
  if (!diff) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
      size: "xs",
      color: theme.euiTheme.colors.primaryText
    }, _i18n.i18n.translate('xpack.profiling.functionsView.newLabel', {
      defaultMessage: 'New'
    }));
  }
  if (diff.rank === 0) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "xs"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    type: diff.rank > 0 ? 'sortUp' : 'sortDown',
    color: diff.rank > 0 ? 'success' : 'danger'
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s"
  }, Math.abs(diff.rank))));
}