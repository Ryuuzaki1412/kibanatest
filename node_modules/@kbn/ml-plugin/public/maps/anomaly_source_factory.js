"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnomalySourceFactory = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _common = require("@kbn/maps-plugin/common");
var _http_service = require("../application/services/http_service");
var _locator = require("../../common/constants/locator");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


class AnomalySourceFactory {
  constructor(getStartServices) {
    (0, _defineProperty2.default)(this, "type", _common.SOURCE_TYPES.ES_ML_ANOMALIES);
    this.getStartServices = getStartServices;
  }
  async getServices() {
    const [coreStart, pluginStart] = await this.getStartServices();
    const {
      mlApiServicesProvider
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../application/services/ml_api_service')));
    const mlLocator = pluginStart.share.url.locators.get(_locator.ML_APP_LOCATOR);
    const httpService = new _http_service.HttpService(coreStart.http);
    const mlResultsService = mlApiServicesProvider(httpService).results;
    return {
      mlResultsService,
      mlLocator
    };
  }
  async create() {
    const {
      mlResultsService,
      mlLocator
    } = await this.getServices();
    const {
      AnomalySource
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('./anomaly_source')));
    AnomalySource.mlResultsService = mlResultsService;
    AnomalySource.mlLocator = mlLocator;
    return AnomalySource;
  }
}
exports.AnomalySourceFactory = AnomalySourceFactory;