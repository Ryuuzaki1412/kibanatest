"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JobSelectorFlyout = void 0;
var _react = _interopRequireWildcard(require("react"));
var _job_selector_flyout = require("../../../application/components/job_selector/job_selector_flyout");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const JobSelectorFlyout = ({
  selectedIds,
  withTimeRangeSelector,
  dateFormatTz,
  singleSelection,
  timeseriesOnly,
  onFlyoutClose,
  onSelectionConfirmed,
  maps
}) => {
  const [applyTimeRangeState, setApplyTimeRangeState] = (0, _react.useState)(true);
  return /*#__PURE__*/_react.default.createElement(_job_selector_flyout.JobSelectorFlyoutContent, {
    selectedIds: selectedIds,
    withTimeRangeSelector: withTimeRangeSelector,
    dateFormatTz: dateFormatTz,
    singleSelection: singleSelection,
    timeseriesOnly: timeseriesOnly,
    onFlyoutClose: onFlyoutClose,
    onSelectionConfirmed: onSelectionConfirmed,
    onTimeRangeConfigChange: setApplyTimeRangeState,
    applyTimeRangeConfig: applyTimeRangeState,
    maps: maps
  });
};
exports.JobSelectorFlyout = JobSelectorFlyout;