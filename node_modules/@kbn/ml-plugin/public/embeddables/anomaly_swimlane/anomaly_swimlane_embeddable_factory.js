"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnomalySwimlaneEmbeddableFactory = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("@kbn/i18n");
var _app = require("../../../common/constants/app");
var _http_service = require("../../application/services/http_service");
var _ = require("..");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


class AnomalySwimlaneEmbeddableFactory {
  constructor(getStartServices) {
    (0, _defineProperty2.default)(this, "type", _.ANOMALY_SWIMLANE_EMBEDDABLE_TYPE);
    (0, _defineProperty2.default)(this, "grouping", [{
      id: _app.PLUGIN_ID,
      getDisplayName: () => _app.ML_APP_NAME,
      getIconType: () => _app.PLUGIN_ICON
    }]);
    this.getStartServices = getStartServices;
  }
  async isEditable() {
    return true;
  }
  getDisplayName() {
    return _i18n.i18n.translate('xpack.ml.components.jobAnomalyScoreEmbeddable.displayName', {
      defaultMessage: 'Anomaly swim lane'
    });
  }
  getDescription() {
    return _i18n.i18n.translate('xpack.ml.components.jobAnomalyScoreEmbeddable.description', {
      defaultMessage: 'View anomaly detection results in a timeline.'
    });
  }
  async getExplicitInput() {
    const [coreStart] = await this.getServices();
    try {
      const {
        resolveAnomalySwimlaneUserInput
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('./anomaly_swimlane_setup_flyout')));
      return await resolveAnomalySwimlaneUserInput(coreStart);
    } catch (e) {
      return Promise.reject();
    }
  }
  async getServices() {
    const [coreStart, pluginsStart] = await this.getStartServices();
    const {
      AnomalyDetectorService
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../application/services/anomaly_detector_service')));
    const {
      AnomalyTimelineService
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../application/services/anomaly_timeline_service')));
    const {
      mlApiServicesProvider
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../application/services/ml_api_service')));
    const {
      mlResultsServiceProvider
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../../application/services/results_service')));
    const httpService = new _http_service.HttpService(coreStart.http);
    const anomalyDetectorService = new AnomalyDetectorService(httpService);
    const anomalyTimelineService = new AnomalyTimelineService(pluginsStart.data.query.timefilter.timefilter, coreStart.uiSettings, mlResultsServiceProvider(mlApiServicesProvider(httpService)));
    return [coreStart, pluginsStart, {
      anomalyDetectorService,
      anomalyTimelineService
    }];
  }
  async create(initialInput, parent) {
    const services = await this.getServices();
    const {
      AnomalySwimlaneEmbeddable
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('./anomaly_swimlane_embeddable')));
    return new AnomalySwimlaneEmbeddable(initialInput, services, parent);
  }
}
exports.AnomalySwimlaneEmbeddableFactory = AnomalySwimlaneEmbeddableFactory;