"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mountApp = mountApp;
var _reactDom = _interopRequireWildcard(require("react-dom"));
var _react = _interopRequireDefault(require("react"));
var _components = require("./components");
var _breadcrumbs = require("../breadcrumbs");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const renderApp = (element, history, coreStart, share, data, fieldFormats, isServerless, mlFeatures, spacesApi, usageCollection) => {
  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_components.JobsListPage, {
    coreStart,
    history,
    share,
    data,
    spacesApi,
    usageCollection,
    fieldFormats,
    isServerless,
    mlFeatures
  }), element);
  return () => {
    (0, _reactDom.unmountComponentAtNode)(element);
  };
};
async function mountApp(core, params, deps, isServerless, mlFeatures) {
  const [coreStart, pluginsStart] = await core.getStartServices();
  params.setBreadcrumbs((0, _breadcrumbs.getJobsListBreadcrumbs)());
  return renderApp(params.element, params.history, coreStart, pluginsStart.share, pluginsStart.data, pluginsStart.fieldFormats, isServerless, mlFeatures, pluginsStart.spaces, deps.usageCollection);
}