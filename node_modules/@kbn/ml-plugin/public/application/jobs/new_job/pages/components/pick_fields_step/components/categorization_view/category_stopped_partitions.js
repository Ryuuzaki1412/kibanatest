"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CategoryStoppedPartitions = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
var _mlErrorUtils = require("@kbn/ml-error-utils");
var _job_creator_context = require("../../../job_creator_context");
var _ml_api_service = require("../../../../../../../services/ml_api_service");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const NUMBER_OF_PREVIEW = 5;
const CategoryStoppedPartitions = () => {
  const {
    jobCreator: jc,
    resultsLoader
  } = (0, _react.useContext)(_job_creator_context.JobCreatorContext);
  const jobCreator = jc;
  const [tableRow, setTableRow] = (0, _react.useState)([]);
  const [stoppedPartitionsError, setStoppedPartitionsError] = (0, _react.useState)();
  const columns = (0, _react.useMemo)(() => [{
    field: 'partitionName',
    name: _i18n.i18n.translate('xpack.ml.newJob.wizard.pickFieldsStep.stoppedPartitionsPreviewColumnName', {
      defaultMessage: 'Stopped partition names'
    }),
    render: partition => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
      size: "s"
    }, /*#__PURE__*/_react.default.createElement("code", null, partition))
  }], []);
  const loadCategoryStoppedPartitions = (0, _react.useCallback)(async () => {
    try {
      const {
        jobs
      } = await _ml_api_service.ml.results.getCategoryStoppedPartitions([jobCreator.jobId]);
      if (!Array.isArray(jobs) &&
      // if jobs is object of jobId: [partitions]
      Array.isArray(jobs[jobCreator.jobId]) && jobs[jobCreator.jobId].length > 0) {
        return jobs[jobCreator.jobId];
      }
    } catch (e) {
      const error = (0, _mlErrorUtils.extractErrorProperties)(e);
      // might get 404 because job has not been created yet and that's ok
      if (error.statusCode !== 404) {
        setStoppedPartitionsError(error.message);
      }
    }
  }, [jobCreator.jobId]);
  (0, _react.useEffect)(() => {
    // only need to run this check if jobCreator.perPartitionStopOnWarn is turned on
    if (jobCreator.perPartitionCategorization && jobCreator.perPartitionStopOnWarn) {
      // subscribe to result updates
      const resultsSubscription = resultsLoader.results$.pipe((0, _operators.switchMap)(() => {
        return (0, _rxjs.from)(loadCategoryStoppedPartitions());
      }), (0, _operators.tap)(results => {
        if (Array.isArray(results)) {
          setTableRow(results.slice(0, NUMBER_OF_PREVIEW).map(partitionName => ({
            partitionName
          })));
        }
      }), (0, _operators.takeWhile)(results => {
        return !results || Array.isArray(results) && results.length <= NUMBER_OF_PREVIEW;
      })).subscribe();
      return () => resultsSubscription.unsubscribe();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, stoppedPartitionsError && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    color: 'danger',
    size: 's',
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.newJob.wizard.pickFieldsStep.stoppedPartitionsErrorCallout",
      defaultMessage: "An error occurred while fetching list of stopped partitions."
    })
  })), Array.isArray(tableRow) && tableRow.length > 0 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.ml.newJob.wizard.pickFieldsStep.categorizationStoppedPartitionsTitle",
    defaultMessage: "Stopped partitions"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: 's'
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    color: 'warning',
    size: 's',
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.newJob.wizard.pickFieldsStep.stoppedPartitionsExistCallout",
      defaultMessage: "Per-partition categorization and stop_on_warn settings are enabled. Some partitions in job '{jobId}' are unsuitable for categorization and have been excluded from further categorization or anomaly detection analysis.",
      values: {
        jobId: jobCreator.jobId
      }
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    columns: columns,
    items: tableRow
  })));
};
exports.CategoryStoppedPartitions = CategoryStoppedPartitions;