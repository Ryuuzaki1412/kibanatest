"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ANOMALY_SWIMLANE_EMBEDDABLE_TYPE", {
  enumerable: true,
  get: function () {
    return _constants.ANOMALY_SWIMLANE_EMBEDDABLE_TYPE;
  }
});
Object.defineProperty(exports, "CONTROLLED_BY_SWIM_LANE_FILTER", {
  enumerable: true,
  get: function () {
    return _constants2.CONTROLLED_BY_SWIM_LANE_FILTER;
  }
});
Object.defineProperty(exports, "MLJobsAwaitingNodeWarning", {
  enumerable: true,
  get: function () {
    return _new_job_awaiting_node_shared.MLJobsAwaitingNodeWarning;
  }
});
Object.defineProperty(exports, "ML_PAGES", {
  enumerable: true,
  get: function () {
    return _locator.ML_PAGES;
  }
});
Object.defineProperty(exports, "MlLocatorDefinition", {
  enumerable: true,
  get: function () {
    return _locator.MlLocatorDefinition;
  }
});
Object.defineProperty(exports, "MlNodeAvailableWarningShared", {
  enumerable: true,
  get: function () {
    return _node_available_warning.MlNodeAvailableWarningShared;
  }
});
exports.plugin = exports.getMlSharedImports = void 0;
Object.defineProperty(exports, "useMlHref", {
  enumerable: true,
  get: function () {
    return _locator.useMlHref;
  }
});
Object.defineProperty(exports, "useMlNodeAvailableCheck", {
  enumerable: true,
  get: function () {
    return _node_available_warning.useMlNodeAvailableCheck;
  }
});
var _plugin = require("./plugin");
var _constants = require("./embeddables/constants");
var _constants2 = require("./ui_actions/constants");
var _locator = require("./locator");
var _new_job_awaiting_node_shared = require("./application/components/jobs_awaiting_node_warning/new_job_awaiting_node_shared");
var _node_available_warning = require("./application/components/node_available_warning");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License

e careful adding exports to this file, it may increase the bundle size of
// the ML plugin's page load bundle. You should either just export types or
// use `getMlSharedImports()` to export static code.
const plugin = initializerContext => new _plugin.MlPlugin(initializerContext);
exports.plugin = plugin;
// Bundled shared exports
// Exported this way so the code doesn't end up in ML's page load bundle
const getMlSharedImports = async () => {
  return await Promise.resolve().then(() => _interopRequireWildcard(require('./shared')));
};
// Helper to get Type returned by getMlSharedImports.
exports.getMlSharedImports = getMlSharedImports;