"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaintenanceWindowScopedQuery = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _alertsUiShared = require("@kbn/alerts-ui-shared");
var _plugin = require("../../../../common/constants/plugin");
var _kibana_react = require("../../../utils/kibana_react");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MaintenanceWindowScopedQuery = /*#__PURE__*/_react.default.memo(props => {
  const {
    featureIds,
    query,
    filters,
    errors = [],
    isLoading,
    isEnabled = true,
    onQueryChange,
    onFiltersChange
  } = props;
  const {
    http,
    data,
    notifications: {
      toasts
    },
    unifiedSearch: {
      ui: {
        SearchBar
      }
    }
  } = (0, _kibana_react.useKibana)().services;
  const onQueryChangeInternal = (0, _react.useCallback)(({
    query: newQuery
  }) => {
    onQueryChange(newQuery || '');
  }, [onQueryChange]);
  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      justifyContent: "spaceAround",
      "data-test-subj": "maintenanceWindowScopedQueryLoading"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
      size: "l"
    })));
  }
  if (!isEnabled) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    "data-test-subj": "maintenanceWindowScopeQuery",
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    fullWidth: true,
    isInvalid: errors.length !== 0,
    error: errors[0]
  }, /*#__PURE__*/_react.default.createElement(_alertsUiShared.AlertsSearchBar, {
    appName: _plugin.PLUGIN.getI18nName(_i18n.i18n),
    featureIds: featureIds,
    disableQueryLanguageSwitcher: true,
    query: query,
    filters: filters,
    onQueryChange: onQueryChangeInternal,
    onQuerySubmit: onQueryChangeInternal,
    onFiltersUpdated: onFiltersChange,
    showFilterBar: true,
    submitOnBlur: true,
    showDatePicker: false,
    showSubmitButton: false,
    http: http,
    toasts: toasts,
    unifiedSearchBar: SearchBar,
    dataViewsService: data.dataViews
  }))));
});
exports.MaintenanceWindowScopedQuery = MaintenanceWindowScopedQuery;