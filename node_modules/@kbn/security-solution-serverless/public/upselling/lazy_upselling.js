"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreatIntelligencePaywallLazy = exports.OsqueryResponseActionsUpsellingSectionLazy = exports.EntityAnalyticsUpsellingLazy = exports.EndpointExceptionsDetailsUpsellingLazy = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 2.0; you may not use this file except in compliance with the Elastic License


const withSuspenseUpsell = Component => function WithSuspenseUpsell(props) {
  return /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
      size: "s"
    })
  }, /*#__PURE__*/_react.default.createElement(Component, props));
};
const ThreatIntelligencePaywallLazy = withSuspenseUpsell( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./pages/threat_intelligence_paywall')))));
exports.ThreatIntelligencePaywallLazy = ThreatIntelligencePaywallLazy;
const OsqueryResponseActionsUpsellingSectionLazy = withSuspenseUpsell( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./pages/osquery_automated_response_actions')))));
exports.OsqueryResponseActionsUpsellingSectionLazy = OsqueryResponseActionsUpsellingSectionLazy;
const EndpointExceptionsDetailsUpsellingLazy = withSuspenseUpsell( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./pages/endpoint_management/endpoint_exceptions_details')))));
exports.EndpointExceptionsDetailsUpsellingLazy = EndpointExceptionsDetailsUpsellingLazy;
const EntityAnalyticsUpsellingLazy = withSuspenseUpsell( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('@kbn/security-solution-upselling/pages/entity_analytics')))));
exports.EntityAnalyticsUpsellingLazy = EntityAnalyticsUpsellingLazy;