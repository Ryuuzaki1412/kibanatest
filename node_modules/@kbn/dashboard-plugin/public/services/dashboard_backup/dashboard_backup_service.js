"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dashboardBackupServiceFactory = exports.DASHBOARD_PANELS_UNSAVED_ID = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _rxjs = require("rxjs");
var _lodash = require("lodash");
var _saferLodashSet = require("@kbn/safer-lodash-set");
var _public = require("@kbn/embeddable-plugin/public");
var _public2 = require("@kbn/kibana-utils-plugin/public");
var _dashboard_container_strings = require("../../dashboard_container/_dashboard_container_strings");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const DASHBOARD_PANELS_UNSAVED_ID = 'unsavedDashboard';
exports.DASHBOARD_PANELS_UNSAVED_ID = DASHBOARD_PANELS_UNSAVED_ID;
const DASHBOARD_PANELS_SESSION_KEY = 'dashboardStateManagerPanels';
const DASHBOARD_VIEWMODE_LOCAL_KEY = 'dashboardViewMode';
class DashboardBackupService {
  constructor(requiredServices) {
    (0, _defineProperty2.default)(this, "activeSpaceId", void 0);
    (0, _defineProperty2.default)(this, "sessionStorage", void 0);
    (0, _defineProperty2.default)(this, "localStorage", void 0);
    (0, _defineProperty2.default)(this, "notifications", void 0);
    (0, _defineProperty2.default)(this, "spaces", void 0);
    (0, _defineProperty2.default)(this, "oldDashboardsWithUnsavedChanges", []);
    (0, _defineProperty2.default)(this, "getViewMode", () => {
      return this.localStorage.get(DASHBOARD_VIEWMODE_LOCAL_KEY);
    });
    (0, _defineProperty2.default)(this, "storeViewMode", viewMode => {
      try {
        this.localStorage.set(DASHBOARD_VIEWMODE_LOCAL_KEY, viewMode);
      } catch (e) {
        this.notifications.toasts.addDanger({
          title: _dashboard_container_strings.backupServiceStrings.viewModeStorageError(e.message),
          'data-test-subj': 'dashboardViewmodeBackupFailure'
        });
      }
    });
    ({
      notifications: this.notifications,
      spaces: this.spaces
    } = requiredServices);
    this.sessionStorage = new _public2.Storage(sessionStorage);
    this.localStorage = new _public2.Storage(localStorage);
    this.activeSpaceId = 'default';
    if (this.spaces.getActiveSpace$) {
      (0, _rxjs.firstValueFrom)(this.spaces.getActiveSpace$()).then(space => {
        this.activeSpaceId = space.id;
      });
    }
  }
  clearState(id = DASHBOARD_PANELS_UNSAVED_ID) {
    try {
      const sessionStorage = this.sessionStorage.get(DASHBOARD_PANELS_SESSION_KEY);
      const sessionStorageForSpace = (sessionStorage === null || sessionStorage === void 0 ? void 0 : sessionStorage[this.activeSpaceId]) || {};
      if (sessionStorageForSpace[id]) {
        delete sessionStorageForSpace[id];
        this.sessionStorage.set(DASHBOARD_PANELS_SESSION_KEY, sessionStorage);
      }
    } catch (e) {
      this.notifications.toasts.addDanger({
        title: _dashboard_container_strings.backupServiceStrings.getPanelsClearError(e.message),
        'data-test-subj': 'dashboardPanelsClearFailure'
      });
    }
  }
  getState(id = DASHBOARD_PANELS_UNSAVED_ID) {
    try {
      var _this$sessionStorage$, _this$sessionStorage$2;
      return (_this$sessionStorage$ = this.sessionStorage.get(DASHBOARD_PANELS_SESSION_KEY)) === null || _this$sessionStorage$ === void 0 ? void 0 : (_this$sessionStorage$2 = _this$sessionStorage$[this.activeSpaceId]) === null || _this$sessionStorage$2 === void 0 ? void 0 : _this$sessionStorage$2[id];
    } catch (e) {
      this.notifications.toasts.addDanger({
        title: _dashboard_container_strings.backupServiceStrings.getPanelsGetError(e.message),
        'data-test-subj': 'dashboardPanelsGetFailure'
      });
    }
  }
  setState(id = DASHBOARD_PANELS_UNSAVED_ID, newState) {
    try {
      const sessionStateStorage = this.sessionStorage.get(DASHBOARD_PANELS_SESSION_KEY) || {};
      (0, _saferLodashSet.set)(sessionStateStorage, [this.activeSpaceId, id], newState);
      this.sessionStorage.set(DASHBOARD_PANELS_SESSION_KEY, sessionStateStorage);
    } catch (e) {
      this.notifications.toasts.addDanger({
        title: _dashboard_container_strings.backupServiceStrings.getPanelsSetError(e.message),
        'data-test-subj': 'dashboardPanelsSetFailure'
      });
    }
  }
  getDashboardIdsWithUnsavedChanges() {
    try {
      var _this$sessionStorage$3;
      const dashboardStatesInSpace = ((_this$sessionStorage$3 = this.sessionStorage.get(DASHBOARD_PANELS_SESSION_KEY)) === null || _this$sessionStorage$3 === void 0 ? void 0 : _this$sessionStorage$3[this.activeSpaceId]) || {};
      const dashboardsWithUnsavedChanges = [];
      Object.keys(dashboardStatesInSpace).map(dashboardId => {
        if (dashboardStatesInSpace[dashboardId].viewMode === _public.ViewMode.EDIT && Object.keys(dashboardStatesInSpace[dashboardId]).some(stateKey => stateKey !== 'viewMode')) dashboardsWithUnsavedChanges.push(dashboardId);
      });

      /**
       * Because we are storing these unsaved dashboard IDs in React component state, we only want things to be re-rendered
       * if the **contents** change, not if the array reference changes
       */
      if (!(0, _lodash.isEqual)(this.oldDashboardsWithUnsavedChanges, dashboardsWithUnsavedChanges)) {
        this.oldDashboardsWithUnsavedChanges = dashboardsWithUnsavedChanges;
      }
      return this.oldDashboardsWithUnsavedChanges;
    } catch (e) {
      this.notifications.toasts.addDanger({
        title: _dashboard_container_strings.backupServiceStrings.getPanelsGetError(e.message),
        'data-test-subj': 'dashboardPanelsGetFailure'
      });
      return [];
    }
  }
  dashboardHasUnsavedEdits(id = DASHBOARD_PANELS_UNSAVED_ID) {
    return this.getDashboardIdsWithUnsavedChanges().indexOf(id) !== -1;
  }
}
const dashboardBackupServiceFactory = (core, requiredServices) => {
  return new DashboardBackupService(requiredServices);
};
exports.dashboardBackupServiceFactory = dashboardBackupServiceFactory;