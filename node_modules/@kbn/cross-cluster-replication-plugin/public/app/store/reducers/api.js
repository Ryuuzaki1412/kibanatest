"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = exports.initialState = void 0;
var _constants = require("../../constants");
var t = _interopRequireWildcard(require("../action_types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const initialState = {
  status: {
    [_constants.SECTIONS.AUTO_FOLLOW_PATTERN]: _constants.API_STATUS.IDLE,
    [_constants.SECTIONS.FOLLOWER_INDEX]: _constants.API_STATUS.IDLE
  },
  error: {
    [_constants.SECTIONS.AUTO_FOLLOW_PATTERN]: null,
    [_constants.SECTIONS.FOLLOWER_INDEX]: null
  }
};
exports.initialState = initialState;
const reducer = (state = initialState, action) => {
  const payload = action.payload || {};
  const {
    scope,
    status,
    error
  } = payload;
  switch (action.type) {
    case t.API_REQUEST_START:
      {
        return {
          ...state,
          status: {
            ...state.status,
            [scope]: status
          }
        };
      }
    case t.API_REQUEST_END:
      {
        return {
          ...state,
          status: {
            ...state.status,
            [scope]: _constants.API_STATUS.IDLE
          }
        };
      }
    case t.API_ERROR_SET:
      {
        return {
          ...state,
          error: {
            ...state.error,
            [scope]: error
          }
        };
      }
    default:
      return state;
  }
};
exports.reducer = reducer;