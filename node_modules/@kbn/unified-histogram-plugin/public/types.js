"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnifiedHistogramFetchStatus = void 0;
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
/**
 * The fetch status of a Unified Histogram request
 */
let UnifiedHistogramFetchStatus;
/**
 * The services required by the Unified Histogram components
 */
exports.UnifiedHistogramFetchStatus = UnifiedHistogramFetchStatus;
(function (UnifiedHistogramFetchStatus) {
  UnifiedHistogramFetchStatus["uninitialized"] = "uninitialized";
  UnifiedHistogramFetchStatus["loading"] = "loading";
  UnifiedHistogramFetchStatus["partial"] = "partial";
  UnifiedHistogramFetchStatus["complete"] = "complete";
  UnifiedHistogramFetchStatus["error"] = "error";
})(UnifiedHistogramFetchStatus || (exports.UnifiedHistogramFetchStatus = UnifiedHistogramFetchStatus = {}));
/**
 * The bucketInterval object returned by {@link buildBucketInterval}
 */
/**
 * The adapters passed up from Lens
 */
/**
 * Emitted when the histogram loading status changes
 */
/**
 * Context object for requests made by Unified Histogram components
 */
/**
 * Context object for the hits count
 */
/**
 * Context object for the chart
 */
/**
 * Context object for the histogram breakdown
 */
/**
 * Message to refetch the chart and total hits
 */
/**
 * Unified histogram input message
 */
/**
 * Unified histogram input observable
 */