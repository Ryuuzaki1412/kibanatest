"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnifiedHistogramContainer = void 0;
Object.defineProperty(exports, "getBreakdownField", {
  enumerable: true,
  get: function () {
    return _local_storage_utils.getBreakdownField;
  }
});
Object.defineProperty(exports, "getChartHidden", {
  enumerable: true,
  get: function () {
    return _local_storage_utils.getChartHidden;
  }
});
Object.defineProperty(exports, "getTopPanelHeight", {
  enumerable: true,
  get: function () {
    return _local_storage_utils.getTopPanelHeight;
  }
});
Object.defineProperty(exports, "setBreakdownField", {
  enumerable: true,
  get: function () {
    return _local_storage_utils.setBreakdownField;
  }
});
Object.defineProperty(exports, "setChartHidden", {
  enumerable: true,
  get: function () {
    return _local_storage_utils.setChartHidden;
  }
});
Object.defineProperty(exports, "setTopPanelHeight", {
  enumerable: true,
  get: function () {
    return _local_storage_utils.setTopPanelHeight;
  }
});
var _eui = require("@elastic/eui");
var _sharedUxUtility = require("@kbn/shared-ux-utility");
var _react = _interopRequireWildcard(require("react"));
var _local_storage_utils = require("./utils/local_storage_utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
and the Server Side Public License, v 1; you may not use this file except
in compliance with, at your election, the Elastic License 2.0 or the Server
ide Public License, v 1.

const LazyUnifiedHistogramContainer = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./container'))));

/**
 * A resizable layout component with two panels that renders a histogram with a hits
 * counter in the top panel, and a main display (data table, etc.) in the bottom panel.
 */
const UnifiedHistogramContainer = (0, _sharedUxUtility.withSuspense)(LazyUnifiedHistogramContainer, /*#__PURE__*/_react.default.createElement(_eui.EuiDelayRender, {
  delay: 300
}, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
  className: "eui-fullHeight",
  alignItems: "center",
  justifyContent: "center",
  gutterSize: "none",
  responsive: false
}, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
  size: "l"
}))));
exports.UnifiedHistogramContainer = UnifiedHistogramContainer;