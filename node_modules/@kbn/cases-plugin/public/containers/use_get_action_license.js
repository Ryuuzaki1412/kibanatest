"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGetActionLicense = void 0;
var _reactQuery = require("@tanstack/react-query");
var _kibana = require("../common/lib/kibana");
var _api = require("./api");
var i18n = _interopRequireWildcard(require("./translations"));
var _domain = require("../../common/types/domain");
var _constants = require("./constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MINIMUM_LICENSE_REQUIRED_CONNECTOR = _domain.ConnectorTypes.jira;
const useGetActionLicense = () => {
  const toasts = (0, _kibana.useToasts)();
  return (0, _reactQuery.useQuery)(_constants.casesQueriesKeys.license(), async ({
    signal
  }) => {
    var _response$find;
    const response = await (0, _api.getActionLicense)(signal);
    return (_response$find = response.find(l => l.id === MINIMUM_LICENSE_REQUIRED_CONNECTOR)) !== null && _response$find !== void 0 ? _response$find : null;
  }, {
    onError: error => {
      if (error.name !== 'AbortError') {
        toasts.addError(error.body && error.body.message ? new Error(error.body.message) : error, {
          title: i18n.ERROR_TITLE
        });
      }
    }
  });
};
exports.useGetActionLicense = useGetActionLicense;