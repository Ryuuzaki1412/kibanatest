"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFileType = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _constants = require("../../../common/constants");
var _types = require("../../client/attachment_framework/types");
var i18n = _interopRequireWildcard(require("./translations"));
var _utils = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const FileAttachmentEvent = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./file_attachment_event'))).then(module => ({
  default: module.FileAttachmentEvent
})));
const FileDeleteButton = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./file_delete_button'))).then(module => ({
  default: module.FileDeleteButton
})));
const FileDownloadButton = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./file_download_button'))).then(module => ({
  default: module.FileDownloadButton
})));
function getFileDownloadButton(fileId) {
  return /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null)
  }, /*#__PURE__*/_react.default.createElement(FileDownloadButton, {
    fileId: fileId,
    isIcon: false
  }));
}
function getFileDeleteButton(caseId, fileId) {
  return /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null)
  }, /*#__PURE__*/_react.default.createElement(FileDeleteButton, {
    caseId: caseId,
    fileId: fileId,
    isIcon: false
  }));
}
const getFileAttachmentActions = ({
  caseId,
  fileId
}) => [{
  type: _types.AttachmentActionType.CUSTOM,
  render: () => getFileDownloadButton(fileId),
  isPrimary: false
}, {
  type: _types.AttachmentActionType.CUSTOM,
  render: () => getFileDeleteButton(caseId, fileId),
  isPrimary: false
}];
const getFileAttachmentViewObject = props => {
  const caseId = props.caseData.id;
  const fileId = props.externalReferenceId;
  if (!(0, _utils.isValidFileExternalReferenceMetadata)(props.externalReferenceMetadata)) {
    return {
      event: i18n.ADDED_UNKNOWN_FILE,
      timelineAvatar: 'document',
      getActions: () => [{
        type: _types.AttachmentActionType.CUSTOM,
        render: () => getFileDeleteButton(caseId, fileId),
        isPrimary: false
      }],
      hideDefaultActions: true
    };
  }
  const fileMetadata = props.externalReferenceMetadata.files[0];
  const file = {
    id: fileId,
    ...fileMetadata
  };
  return {
    event: /*#__PURE__*/_react.default.createElement(_react.Suspense, {
      fallback: /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null)
    }, /*#__PURE__*/_react.default.createElement(FileAttachmentEvent, {
      file: file
    })),
    timelineAvatar: (0, _utils.isImage)(file) ? 'image' : 'document',
    getActions: () => getFileAttachmentActions({
      caseId,
      fileId
    }),
    hideDefaultActions: true
  };
};
const getFileType = () => ({
  id: _constants.FILE_ATTACHMENT_TYPE,
  icon: 'document',
  displayName: 'Files',
  getAttachmentViewObject: getFileAttachmentViewObject,
  getAttachmentRemovalObject: () => ({
    event: i18n.REMOVED_FILE
  })
});
exports.getFileType = getFileType;