"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serviceNowITSMFieldLabels = exports.getServiceNowSIRCaseConnector = exports.getServiceNowITSMCaseConnector = void 0;
var _react = require("react");
var _domain = require("../../../../common/types/domain");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 2.0.

const getServiceNowITSMCaseConnector = () => ({
  id: _domain.ConnectorTypes.serviceNowITSM,
  fieldsComponent: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./servicenow_itsm_case_fields')))),
  previewComponent: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./servicenow_itsm_case_fields_preview'))))
});
exports.getServiceNowITSMCaseConnector = getServiceNowITSMCaseConnector;
const getServiceNowSIRCaseConnector = () => ({
  id: _domain.ConnectorTypes.serviceNowSIR,
  fieldsComponent: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./servicenow_sir_case_fields')))),
  previewComponent: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./servicenow_sir_case_fields_preview'))))
});
exports.getServiceNowSIRCaseConnector = getServiceNowSIRCaseConnector;
const serviceNowITSMFieldLabels = {
  impact: i18n.IMPACT,
  severity: i18n.SEVERITY,
  urgency: i18n.URGENCY
};
exports.serviceNowITSMFieldLabels = serviceNowITSMFieldLabels;