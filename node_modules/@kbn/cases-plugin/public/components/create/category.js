"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Category = void 0;
var _react = _interopRequireWildcard(require("react"));
var _use_get_categories = require("../../containers/use_get_categories");
var _category_form_field = require("../category/category_form_field");
var _optional_field_label = require("./optional_field_label");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const CategoryComponent = ({
  isLoading
}) => {
  const {
    isLoading: isLoadingCategories,
    data: categories = []
  } = (0, _use_get_categories.useGetCategories)();
  return /*#__PURE__*/_react.default.createElement(_category_form_field.CategoryFormField, {
    isLoading: isLoading || isLoadingCategories,
    availableCategories: categories,
    formRowProps: {
      labelAppend: _optional_field_label.OptionalFieldLabel
    }
  });
};
CategoryComponent.displayName = 'CategoryComponent';
const Category = /*#__PURE__*/(0, _react.memo)(CategoryComponent);
exports.Category = Category;