"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopyIDAction = void 0;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var i18n = _interopRequireWildcard(require("../../../common/translations"));
var _use_cases_toast = require("../../../common/use_cases_toast");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useCopyIDAction = ({
  onActionSuccess
}) => {
  const {
    showSuccessToast
  } = (0, _use_cases_toast.useCasesToast)();
  const getAction = selectedCase => {
    return {
      name: /*#__PURE__*/_react.default.createElement(_eui.EuiTextColor, null, i18n.COPY_ID_ACTION_LABEL),
      onClick: () => {
        navigator.clipboard.writeText(selectedCase.id).then(() => {
          onActionSuccess();
          showSuccessToast(i18n.COPY_ID_ACTION_SUCCESS);
        });
      },
      'data-test-subj': 'cases-action-copy-id',
      icon: /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
        type: "copyClipboard",
        size: "m"
      }),
      key: 'cases-action-copy-id'
    };
  };
  return {
    getAction
  };
};
exports.useCopyIDAction = useCopyIDAction;