"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CasesTimelineIntegrationProvider = exports.CasesTimelineIntegrationContext = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * @description - manage the plugins, hooks, and ui components needed to enable timeline functionality within the cases plugin
 * @TODO - To better encapsulate the timeline logic needed by cases, we are managing it in this top level context.
 * This helps us avoid any prop drilling and makes it much easier later on to remove this logic when timeline becomes it's own plugin.
 */

// TODO: copied from 'use_insert_timeline' in security_solution till timeline moved into it's own plugin.

// This context is available to all children of the stateful_event component where the provider is currently set
const CasesTimelineIntegrationContext = /*#__PURE__*/_react.default.createContext(null);
exports.CasesTimelineIntegrationContext = CasesTimelineIntegrationContext;
const CasesTimelineIntegrationProvider =
// TODO: Fix this manually. Issue #123375
// eslint-disable-next-line react/display-name
({
  children,
  timelineIntegration
}) => {
  const [activeTimelineIntegration] = (0, _react.useState)(timelineIntegration !== null && timelineIntegration !== void 0 ? timelineIntegration : null);
  return /*#__PURE__*/_react.default.createElement(CasesTimelineIntegrationContext.Provider, {
    value: activeTimelineIntegration
  }, children);
};
exports.CasesTimelineIntegrationProvider = CasesTimelineIntegrationProvider;