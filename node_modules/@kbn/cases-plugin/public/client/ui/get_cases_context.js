"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCasesContextLazy = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _common = require("@kbn/kibana-react-plugin/common");
var _use_is_dark_theme = require("../../common/use_is_dark_theme");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 2.0; you may not use this file except in compliance with the Elastic License


const CasesProviderLazy = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('../../components/cases_context'))));
const CasesProviderLazyWrapper = ({
  externalReferenceAttachmentTypeRegistry,
  persistableStateAttachmentTypeRegistry,
  owner,
  permissions,
  features,
  children,
  releasePhase,
  getFilesClient
}) => {
  const isDarkTheme = (0, _use_is_dark_theme.useIsDarkTheme)();
  return /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null)
  }, /*#__PURE__*/_react.default.createElement(_common.EuiThemeProvider, {
    darkMode: isDarkTheme
  }, /*#__PURE__*/_react.default.createElement(CasesProviderLazy, {
    value: {
      externalReferenceAttachmentTypeRegistry,
      persistableStateAttachmentTypeRegistry,
      owner,
      permissions,
      features,
      releasePhase,
      getFilesClient
    }
  }, children)));
};
CasesProviderLazyWrapper.displayName = 'CasesProviderLazyWrapper';
const getCasesContextLazy = ({
  externalReferenceAttachmentTypeRegistry,
  persistableStateAttachmentTypeRegistry,
  getFilesClient
}) => {
  const CasesProviderLazyWrapperWithRegistry = ({
    children,
    ...props
  }) => /*#__PURE__*/_react.default.createElement(CasesProviderLazyWrapper, (0, _extends2.default)({}, props, {
    externalReferenceAttachmentTypeRegistry: externalReferenceAttachmentTypeRegistry,
    persistableStateAttachmentTypeRegistry: persistableStateAttachmentTypeRegistry,
    getFilesClient: getFilesClient
  }), children);
  CasesProviderLazyWrapperWithRegistry.displayName = 'CasesProviderLazyWrapperWithRegistry';
  return () => CasesProviderLazyWrapperWithRegistry;
};
exports.getCasesContextLazy = getCasesContextLazy;