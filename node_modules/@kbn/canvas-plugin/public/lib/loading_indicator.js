"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadingIndicator = exports.initLoadingIndicator = void 0;
var Rx = _interopRequireWildcard(require("rxjs"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

let isActive = false;
const loadingCount$ = new Rx.BehaviorSubject(0);
const initLoadingIndicator = addLoadingCount => addLoadingCount(loadingCount$);
exports.initLoadingIndicator = initLoadingIndicator;
const loadingIndicator = {
  show: () => {
    if (!isActive) {
      isActive = true;
      loadingCount$.next(1);
    }
  },
  hide: () => {
    if (isActive) {
      isActive = false;
      loadingCount$.next(0);
    }
  }
};
exports.loadingIndicator = loadingIndicator;