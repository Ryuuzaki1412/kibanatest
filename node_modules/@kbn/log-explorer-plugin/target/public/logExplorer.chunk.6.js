/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.logExplorer_bundle_jsonpfunction=window.logExplorer_bundle_jsonpfunction||[]).push([[6],{267:function(t,e,r){"use strict";r.r(e),r.d(e,"DatasetsClient",(function(){return datasets_client_DatasetsClient})),r.d(e,"DatasetsService",(function(){return datasets_service_DatasetsService}));var s=r(37),a=r(6),n=r(0);const o=s.EPM_API_ROUTES.DATA_STREAMS_PATTERN,i=s.EPM_API_ROUTES.INSTALLED_LIST_PATTERN,c=n.keyof({asc:null,desc:null});var d=r(23);const l=n.type({items:n.array(d.a)}),p=n.exact(n.partial({datasetQuery:n.string,type:n.literal("logs"),sortOrder:c,uncategorisedOnly:n.boolean}));var u=r(8);const _=n.array(n.union([n.number,n.string])),g=n.exact(n.intersection([n.type({items:n.array(d.b),total:n.number}),n.partial({searchAfter:_})])),y=n.exact(n.partial({nameQuery:n.string,perPage:n.number,dataStreamType:n.literal("logs"),searchAfter:u.c.pipe(_),sortOrder:c}));class FindIntegrationsError extends Error{constructor(t){super(t),Object.setPrototypeOf(this,new.target.prototype),this.name="FindIntegrationsError"}}class FindDatasetsError extends Error{constructor(t){super(t),Object.setPrototypeOf(this,new.target.prototype),this.name="FindDatasetsError"}}var E=r(14);const h={dataStreamType:"logs"},m={type:"logs",uncategorisedOnly:!0};class datasets_client_DatasetsClient{constructor(t){this.http=t}async findIntegrations(t={}){const e={...h,...t},r=y.encode(e),n=await this.http.get(i,{query:r,version:s.API_VERSIONS.public.v1}).catch((t=>{throw new FindIntegrationsError(`Failed to fetch integrations": ${t}`)})),o=Object(E.a)(g,(t=>new FindIntegrationsError(`Failed to decode integrations response: ${t}"`)))(n);return{...o,items:o.items.map(a.b.create)}}async findDatasets(t={}){const e={...m,...t},r=p.encode(e),n=await this.http.get(o,{query:r,version:s.API_VERSIONS.public.v1}).catch((t=>{throw new FindDatasetsError(`Failed to fetch data streams": ${t}`)}));return{items:Object(E.a)(l,(t=>new FindDatasetsError(`Failed to decode data streams response: ${t}"`)))(n).items.map((t=>a.a.create(t)))}}}class datasets_service_DatasetsService{constructor(){}setup(){}start({http:t}){return{client:new datasets_client_DatasetsClient(t)}}}}}]);