/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.osquery_bundle_jsonpfunction=window.osquery_bundle_jsonpfunction||[]).push([[9],{193:function(e,t,a){"use strict";a.r(t),a.d(t,"OsqueryActionResult",(function(){return j})),a.d(t,"default",(function(){return v}));var n=a(5),s=a(1),r=a.n(s),u=a(14),l=a(6),i=a(11),o=a(27),c=a(4),d=a(23),g=a(22),f=a(75),p=a(67),m=a(72),b=a(0);const x=r.a.memo((({actionId:e,ruleName:t,startDate:a,ecsData:r})=>{const{read:l}=Object(c.e)().services.application.capabilities.osquery,[i,d]=Object(s.useState)(!1),{data:x}=Object(m.a)({actionId:e,isLive:i,skip:!l});return Object(s.useEffect)((()=>{d((()=>!("completed"===(null==x?void 0:x.status))))}),[null==x?void 0:x.status]),Object(b.jsx)(g.a.Provider,{value:r},Object(b.jsx)(n.EuiComment,{username:t,timestamp:Object(b.jsx)(u.FormattedRelative,{value:a}),event:p.e,"data-test-subj":"osquery-results-comment"},l?Object(b.jsx)(f.a,{actionId:e,data:null==x?void 0:x.queries,startDate:null==x?void 0:x["@timestamp"],expirationDate:null==x?void 0:x.expiration,agentIds:null==x?void 0:x.agents}):Object(b.jsx)(o.a,null)))})),j=r.a.memo(x),y=({services:e,...t})=>Object(b.jsx)(l.KibanaThemeProvider,{theme$:e.theme.theme$},Object(b.jsx)(l.KibanaContextProvider,{services:e},Object(b.jsx)(n.EuiErrorBoundary,null,Object(b.jsx)(i.QueryClientProvider,{client:d.a},Object(b.jsx)(j,t))))),v=r.a.memo(y)},67:function(e,t,a){"use strict";a.d(t,"h",(function(){return s})),a.d(t,"d",(function(){return r})),a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return l})),a.d(t,"c",(function(){return i})),a.d(t,"f",(function(){return o})),a.d(t,"g",(function(){return c})),a.d(t,"e",(function(){return d}));var n=a(8);const s=e=>0===e?"":1===e?n.i18n.translate("xpack.osquery.agents.oneSelectedAgentText",{defaultMessage:"{numAgents} agent selected.",values:{numAgents:e}}):n.i18n.translate("xpack.osquery.agents.mulitpleSelectedAgentsText",{defaultMessage:"{numAgents} agents selected.",values:{numAgents:e}}),r=n.i18n.translate("xpack.osquery.agents.allAgentsLabel",{defaultMessage:"All agents"}),u=n.i18n.translate("xpack.osquery.agents.platformLabel",{defaultMessage:"Platform"}),l=n.i18n.translate("xpack.osquery.agents.policyLabel",{defaultMessage:"Policy"}),i=(n.i18n.translate("xpack.osquery.agents.agent",{defaultMessage:"Agent"}),n.i18n.translate("xpack.osquery.agents.selectionLabel",{defaultMessage:"Agents"})),o=n.i18n.translate("xpack.osquery.agents.noAgentAvailableTitle",{defaultMessage:"No agents available"}),c=(n.i18n.translate("xpack.osquery.agents.query",{defaultMessage:"Query"}),n.i18n.translate("xpack.osquery.agents.selectAgentLabel",{defaultMessage:"Select agents or groups to query"})),d=(n.i18n.translate("xpack.osquery.agents.errorSearchDescription",{defaultMessage:"An error has occurred on all agents search"}),n.i18n.translate("xpack.osquery.agents.failSearchDescription",{defaultMessage:"Failed to fetch agents"}),n.i18n.translate("xpack.osquery.agent.attachedQuery",{defaultMessage:"attached query"}))}}]);