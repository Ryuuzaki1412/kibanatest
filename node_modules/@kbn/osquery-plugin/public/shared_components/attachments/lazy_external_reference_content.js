"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLazyExternalContent = void 0;
var _react = _interopRequireWildcard(require("react"));
var _kibana = require("../../common/lib/kibana");
var _services_wrapper = _interopRequireDefault(require("../services_wrapper"));
var _empty_prompt = require("../../routes/components/empty_prompt");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const AttachmentContent = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./external_references_content'))));
const getLazyExternalContent =
// eslint-disable-next-line react/display-name
services => props => {
  const {
    services: {
      application: {
        capabilities: {
          osquery
        }
      }
    }
  } = (0, _kibana.useKibana)();
  if (!osquery.read) {
    return /*#__PURE__*/_react.default.createElement(_empty_prompt.EmptyPrompt, null);
  }
  return /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: null
  }, /*#__PURE__*/_react.default.createElement(_services_wrapper.default, {
    services: services
  }, /*#__PURE__*/_react.default.createElement(AttachmentContent, props)));
};
exports.getLazyExternalContent = getLazyExternalContent;