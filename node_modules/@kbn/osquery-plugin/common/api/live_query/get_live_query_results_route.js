"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLiveQueryResultsRequestQuerySchema = exports.getLiveQueryResultsRequestParamsSchema = void 0;
var t = _interopRequireWildcard(require("io-ts"));
var _ioTsUtils = require("@kbn/io-ts-utils");
var _search_strategy = require("../../search_strategy");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getLiveQueryResultsRequestQuerySchema = t.type({
  kuery: t.union([t.string, t.undefined]),
  page: t.union([_ioTsUtils.toNumberRt, t.undefined]),
  pageSize: t.union([_ioTsUtils.toNumberRt, t.undefined]),
  sort: t.union([t.string, t.undefined]),
  sortOrder: t.union([t.literal(_search_strategy.Direction.asc), t.literal(_search_strategy.Direction.desc), t.undefined])
});
exports.getLiveQueryResultsRequestQuerySchema = getLiveQueryResultsRequestQuerySchema;
const getLiveQueryResultsRequestParamsSchema = t.type({
  id: t.string,
  actionId: t.string
});
exports.getLiveQueryResultsRequestParamsSchema = getLiveQueryResultsRequestParamsSchema;