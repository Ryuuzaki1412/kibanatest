"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormLabel = void 0;
var _eui = require("@elastic/eui");
var _formik = require("formik");
var _react = _interopRequireWildcard(require("react"));
var _form_changes = require("./form_changes");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Component that visually indicates whether a field value has changed.
 *
 * @example Renders a dot next to "Email" label when field value changes.
 * ```typescript
 * <Formik>
 *   <FormChanges>
 *     <FormRow label={<FormLabel for="email">Email</FormLabel>}>
 *       <FormField name="email" />
 *     </FormRow>
 *   </FormChanges>
 * </Formik>
 * ```
 *
 * @throws Error if not a child of a `<Formik>` component.
 * @throws Error if not a child of a `<FormChanges>` component.
 */
const FormLabel = props => {
  const formik = (0, _formik.useFormikContext)();
  const {
    report
  } = (0, _form_changes.useFormChangesContext)();
  const meta = formik.getFieldMeta(props.for);
  const isEqual = meta.value === meta.initialValue;
  (0, _react.useEffect)(() => report(isEqual), [isEqual]); // eslint-disable-line react-hooks/exhaustive-deps

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.children, " ", !isEqual ? /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    type: "dot",
    color: "success",
    size: "s"
  }) : undefined);
};
exports.FormLabel = FormLabel;