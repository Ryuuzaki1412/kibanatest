"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReindexContext = exports.ReindexStatusProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _use_reindex_state = require("./use_reindex_state");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ReindexContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const useReindexContext = () => {
  const context = (0, _react.useContext)(ReindexContext);
  if (context === undefined) {
    throw new Error('useReindexContext must be used within a <ReindexStatusProvider />');
  }
  return context;
};
exports.useReindexContext = useReindexContext;
const ReindexStatusProvider = ({
  api,
  indexName,
  children
}) => {
  const {
    reindexState,
    startReindex,
    cancelReindex
  } = (0, _use_reindex_state.useReindexStatus)({
    indexName,
    api
  });
  return /*#__PURE__*/_react.default.createElement(ReindexContext.Provider, {
    value: {
      reindexState,
      startReindex,
      cancelReindex
    }
  }, children);
};
exports.ReindexStatusProvider = ReindexStatusProvider;