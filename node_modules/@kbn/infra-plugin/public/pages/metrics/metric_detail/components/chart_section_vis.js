"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChartSectionVis = void 0;
var _react = _interopRequireWildcard(require("react"));
var _moment = _interopRequireDefault(require("moment"));
var _i18n = require("@kbn/i18n");
var _charts = require("@elastic/charts");
var _eui = require("@elastic/eui");
var _use_timeline_chart_theme = require("../../../../utils/use_timeline_chart_theme");
var _series_chart = require("./series_chart");
var _helpers = require("./helpers");
var _error_message = require("./error_message");
var _use_kibana_ui_setting = require("../../../../utils/use_kibana_ui_setting");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ChartSectionVis = ({
  id,
  onChangeRangeTime,
  metric,
  stopLiveStreaming,
  isLiveStreaming,
  formatter,
  formatterTemplate,
  stacked,
  seriesOverrides,
  type
}) => {
  const chartTheme = (0, _use_timeline_chart_theme.useTimelineChartTheme)();
  const [dateFormat] = (0, _use_kibana_ui_setting.useKibanaUiSetting)('dateFormat');
  /* eslint-disable-next-line react-hooks/exhaustive-deps */
  const valueFormatter = (0, _react.useCallback)((0, _helpers.getFormatter)(formatter, formatterTemplate), [formatter, formatterTemplate]);
  const dateFormatter = (0, _react.useMemo)(() => metric != null ? (0, _charts.niceTimeFormatter)((0, _helpers.getMaxMinTimestamp)(metric)) : undefined, [metric]);
  const handleTimeChange = (0, _react.useCallback)(({
    x
  }) => {
    if (!x) {
      return;
    }
    const [from, to] = x;
    if (onChangeRangeTime) {
      if (isLiveStreaming && stopLiveStreaming) {
        stopLiveStreaming();
      }
      onChangeRangeTime({
        from: (0, _moment.default)(from).toISOString(),
        to: (0, _moment.default)(to).toISOString(),
        interval: '>=1m'
      });
    }
  }, [onChangeRangeTime, isLiveStreaming, stopLiveStreaming]);
  const tooltipProps = {
    headerFormatter: (0, _react.useCallback)(({
      value
    }) => (0, _moment.default)(value).format(dateFormat || 'Y-MM-DD HH:mm:ss.SSS'), [dateFormat])
  };
  if (!id) {
    return null;
  } else if (!metric) {
    return /*#__PURE__*/_react.default.createElement(_error_message.ErrorMessage, {
      title: _i18n.i18n.translate('xpack.infra.chartSection.missingMetricDataText', {
        defaultMessage: 'Missing Data'
      }),
      body: _i18n.i18n.translate('xpack.infra.chartSection.missingMetricDataBody', {
        defaultMessage: 'The data for this chart is missing.'
      })
    });
  } else if (metric.series.some(_helpers.seriesHasLessThen2DataPoints)) {
    return /*#__PURE__*/_react.default.createElement(_error_message.ErrorMessage, {
      title: _i18n.i18n.translate('xpack.infra.chartSection.notEnoughDataPointsToRenderTitle', {
        defaultMessage: 'Not Enough Data'
      }),
      body: _i18n.i18n.translate('xpack.infra.chartSection.notEnoughDataPointsToRenderText', {
        defaultMessage: 'Not enough data points to render chart, try increasing the time range.'
      })
    });
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPageSection, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "infrastructureChart",
    style: {
      height: 250,
      marginBottom: 16
    }
  }, /*#__PURE__*/_react.default.createElement(_charts.Chart, null, /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "timestamp",
    position: _charts.Position.Bottom,
    showOverlappingTicks: true,
    tickFormat: dateFormatter
  }), /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "values",
    position: _charts.Position.Left,
    tickFormat: valueFormatter
  }), metric && metric.series.map(series => /*#__PURE__*/_react.default.createElement(_series_chart.SeriesChart, {
    key: `series-${id}-${series.id}`,
    id: `series-${id}-${series.id}`,
    series: series,
    name: (0, _helpers.getChartName)(seriesOverrides, series.id, series.id),
    type: (0, _helpers.getChartType)(seriesOverrides, type, series.id),
    color: (0, _helpers.getChartColor)(seriesOverrides, series.id),
    stack: stacked
  })), /*#__PURE__*/_react.default.createElement(_charts.Tooltip, tooltipProps), /*#__PURE__*/_react.default.createElement(_charts.Settings, {
    onBrushEnd: handleTimeChange,
    baseTheme: chartTheme.baseTheme,
    showLegend: true,
    showLegendExtra: true,
    legendPosition: "right",
    locale: _i18n.i18n.getLocale()
  }))));
};
exports.ChartSectionVis = ChartSectionVis;