"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeDetailsPage = void 0;
var _react = _interopRequireWildcard(require("react"));
var _datemath = _interopRequireDefault(require("@kbn/datemath"));
var _moment = _interopRequireDefault(require("moment"));
var _eui = require("@elastic/eui");
var _use_page_header = require("../../../../components/asset_details/hooks/use_page_header");
var _metrics_source = require("../../../../containers/metrics_source");
var _use_node_details = require("../hooks/use_node_details");
var _side_nav = require("./side_nav");
var _time_controls = require("./time_controls");
var _side_nav_context = require("../lib/side_nav_context");
var _page_body = require("./page_body");
var _page_error = require("./page_error");
var _metadata_context = require("../containers/metadata_context");
var _page_template = require("../../page_template");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const parseRange = range => {
  const parsedFrom = _datemath.default.parse(range.from.toString());
  const parsedTo = _datemath.default.parse(range.to.toString(), {
    roundUp: true
  });
  return {
    ...range,
    from: parsedFrom && parsedFrom.valueOf() || (0, _moment.default)().subtract(1, 'hour').valueOf(),
    to: parsedTo && parsedTo.valueOf() || (0, _moment.default)().valueOf()
  };
};
const NodeDetailsPage = props => {
  const {
    metricIndicesExist
  } = (0, _metrics_source.useSourceContext)();
  const {
    breadcrumbs
  } = (0, _use_page_header.useTemplateHeaderBreadcrumbs)();
  const [parsedTimeRange, setParsedTimeRange] = (0, _react.useState)(parseRange(props.timeRange));
  const {
    metrics,
    loading,
    makeRequest,
    error
  } = (0, _use_node_details.useNodeDetails)(props.requiredMetrics, props.nodeId, props.nodeType, props.sourceId, parsedTimeRange, props.cloudId);
  const refetch = (0, _react.useCallback)(() => {
    setParsedTimeRange(parseRange(props.timeRange));
  }, [props.timeRange]);
  (0, _react.useEffect)(() => {
    setParsedTimeRange(parseRange(props.timeRange));
  }, [props.timeRange]);
  (0, _react.useEffect)(() => {
    makeRequest();
  }, [makeRequest, parsedTimeRange]);
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_page_error.PageError, {
      error: error,
      name: props.name
    });
  }
  return /*#__PURE__*/_react.default.createElement(_page_template.MetricsPageTemplate, {
    hasData: metricIndicesExist,
    pageHeader: {
      pageTitle: props.name,
      rightSideItems: [/*#__PURE__*/_react.default.createElement(_time_controls.MetricsTimeControls, {
        currentTimeRange: props.timeRange,
        isLiveStreaming: props.isAutoReloading,
        refreshInterval: props.refreshInterval,
        setRefreshInterval: props.setRefreshInterval,
        onChangeTimeRange: props.setTimeRange,
        setAutoReload: props.setAutoReload,
        onRefresh: refetch
      })],
      breadcrumbs
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_side_nav.MetricsSideNav, {
    loading: props.metadataLoading,
    name: props.name,
    items: props.sideNav
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_side_nav_context.SideNavContext.Provider, {
    value: {
      items: props.sideNav,
      addNavItem: props.addNavItem
    }
  }, /*#__PURE__*/_react.default.createElement(_metadata_context.MetadataContext.Provider, {
    value: props.metadata
  }, /*#__PURE__*/_react.default.createElement(_page_body.PageBody, {
    loading: metrics.length > 0 && props.isAutoReloading ? false : loading,
    refetch: refetch,
    type: props.nodeType,
    metrics: metrics,
    onChangeRangeTime: props.setTimeRange,
    isLiveStreaming: props.isAutoReloading,
    stopLiveStreaming: () => props.setAutoReload(false)
  }))))));
};
exports.NodeDetailsPage = NodeDetailsPage;