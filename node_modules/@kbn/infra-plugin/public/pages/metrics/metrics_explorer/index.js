"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsExplorerPage = void 0;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/observability-shared-plugin/public");
var _feature_feedback_button = require("../../../components/feature_feedback_button");
var _source_loading_page = require("../../../components/source_loading_page");
var _use_metrics_explorer_views = require("../../../hooks/use_metrics_explorer_views");
var _use_metrics_breadcrumbs = require("../../../hooks/use_metrics_breadcrumbs");
var _empty_states = require("../../../components/empty_states");
var _charts = require("./components/charts");
var _toolbar = require("./components/toolbar");
var _use_metric_explorer_state = require("./hooks/use_metric_explorer_state");
var _metrics_source = require("../../../containers/metrics_source");
var _page_template = require("../page_template");
var _translations = require("../../../translations");
var _saved_views = require("./components/saved_views");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const METRICS_EXPLORER_FEEDBACK_URL = 'https://ela.st/survey-infra-metricsexplorer?usp=pp_url';
const MetricsExplorerPage = ({
  source,
  derivedIndexPattern
}) => {
  var _sourceContext$status;
  const [enabled, setEnabled] = (0, _react.useState)(false);
  const {
    isLoading,
    error,
    data,
    timeRange,
    options,
    chartOptions,
    setChartOptions,
    handleAggregationChange,
    handleMetricsChange,
    handleFilterQuerySubmit,
    handleGroupByChange,
    handleTimeChange,
    handleLoadMore,
    onViewStateChange,
    refresh
  } = (0, _use_metric_explorer_state.useMetricsExplorerState)(source, derivedIndexPattern, enabled);
  const {
    currentView
  } = (0, _use_metrics_explorer_views.useMetricsExplorerViews)();
  const {
    source: sourceContext,
    metricIndicesExist
  } = (0, _metrics_source.useSourceContext)();
  (0, _public.useTrackPageview)({
    app: 'infra_metrics',
    path: 'metrics_explorer'
  });
  (0, _public.useTrackPageview)({
    app: 'infra_metrics',
    path: 'metrics_explorer',
    delay: 15000
  });
  const {
    remoteClustersExist
  } = (_sourceContext$status = sourceContext === null || sourceContext === void 0 ? void 0 : sourceContext.status) !== null && _sourceContext$status !== void 0 ? _sourceContext$status : {};
  (0, _react.useEffect)(() => {
    if (currentView) {
      onViewStateChange(currentView);
    }
  }, [currentView, onViewStateChange]);
  (0, _react.useEffect)(() => {
    if (currentView != null) {
      // load metrics explorer data after default view loaded, unless we're not isLoading a view
      setEnabled(true);
    }
  }, [currentView]);
  (0, _use_metrics_breadcrumbs.useMetricsBreadcrumbs)([{
    text: _translations.metricsExplorerTitle
  }]);
  const viewState = {
    options,
    chartOptions,
    currentTimerange: timeRange
  };
  if (isLoading && !sourceContext) return /*#__PURE__*/_react.default.createElement(_source_loading_page.SourceLoadingPage, null);
  if (!remoteClustersExist) {
    return /*#__PURE__*/_react.default.createElement(_empty_states.NoRemoteCluster, null);
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiErrorBoundary, null, /*#__PURE__*/_react.default.createElement(_page_template.MetricsPageTemplate, {
    hasData: metricIndicesExist,
    pageHeader: {
      pageTitle: _translations.metricsExplorerTitle,
      rightSideItems: [/*#__PURE__*/_react.default.createElement(_saved_views.SavedViews, {
        viewState: viewState
      }), /*#__PURE__*/_react.default.createElement(_feature_feedback_button.FeatureFeedbackButton, {
        formUrl: METRICS_EXPLORER_FEEDBACK_URL,
        "data-test-subj": "infraMetricsExplorerFeedbackLink"
      })]
    }
  }, /*#__PURE__*/_react.default.createElement(_toolbar.MetricsExplorerToolbar, {
    derivedIndexPattern: derivedIndexPattern,
    timeRange: timeRange,
    options: options,
    chartOptions: chartOptions,
    onRefresh: refresh,
    onTimeChange: handleTimeChange,
    onGroupByChange: handleGroupByChange,
    onFilterQuerySubmit: handleFilterQuerySubmit,
    onMetricsChange: handleMetricsChange,
    onAggregationChange: handleAggregationChange,
    onChartOptionsChange: setChartOptions
  }), error ? /*#__PURE__*/_react.default.createElement(_empty_states.NoData, {
    titleText: "Whoops!",
    bodyText: _i18n.i18n.translate('xpack.infra.metricsExplorer.errorMessage', {
      defaultMessage: 'It looks like the request failed with "{message}"',
      values: {
        message: error.message
      }
    }),
    onRefetch: refresh,
    refetchText: "Try Again"
  }) : /*#__PURE__*/_react.default.createElement(_charts.MetricsExplorerCharts, {
    timeRange: timeRange,
    isLoading: isLoading,
    data: data,
    source: source,
    options: options,
    chartOptions: chartOptions,
    onLoadMore: handleLoadMore,
    onFilter: handleFilterQuerySubmit,
    onRefetch: refresh,
    onTimeChange: handleTimeChange
  })));
};
exports.MetricsExplorerPage = MetricsExplorerPage;