"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMetricThresholdRuleType = createMetricThresholdRuleType;
var _i18n = require("@kbn/i18n");
var _react = require("react");
var _metrics = require("../../../common/alerting/metrics");
var _validation = require("./components/validation");
var _rule_data_formatters = require("./rule_data_formatters");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const metricThresholdDefaultActionMessage = _i18n.i18n.translate('xpack.infra.metrics.alerting.metric.threshold.defaultActionMessage', {
  defaultMessage: `\\{\\{context.reason\\}\\}

\\{\\{rule.name\\}\\} is active with the following conditions:

- Affected: \\{\\{context.group\\}\\}
- Metric: \\{\\{context.metric\\}\\}
- Observed value: \\{\\{context.value\\}\\}
- Threshold: \\{\\{context.threshold\\}\\}

[View alert details](\\{\\{context.alertDetailsUrl\\}\\})
`
});
const metricThresholdDefaultRecoveryMessage = _i18n.i18n.translate('xpack.infra.metrics.alerting.metric.threshold.defaultRecoveryMessage', {
  defaultMessage: `\\{\\{rule.name\\}\\} has recovered.

- Affected: \\{\\{context.group\\}\\}
- Metric: \\{\\{context.metric\\}\\}
- Threshold: \\{\\{context.threshold\\}\\}

[View alert details](\\{\\{context.alertDetailsUrl\\}\\})
`
});
function createMetricThresholdRuleType() {
  return {
    id: _metrics.METRIC_THRESHOLD_ALERT_TYPE_ID,
    description: _i18n.i18n.translate('xpack.infra.metrics.alertFlyout.alertDescription', {
      defaultMessage: 'Alert when the metrics aggregation exceeds the threshold.'
    }),
    iconClass: 'bell',
    documentationUrl(docLinks) {
      return `${docLinks.links.observability.metricsThreshold}`;
    },
    ruleParamsExpression: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/expression')))),
    validate: _validation.validateMetricThreshold,
    defaultActionMessage: metricThresholdDefaultActionMessage,
    defaultRecoveryMessage: metricThresholdDefaultRecoveryMessage,
    requiresAppContext: false,
    format: _rule_data_formatters.formatReason,
    alertDetailsAppSection: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/alert_details_app_section')))),
    priority: 10
  };
}