"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultEditorController = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _eui = require("@elastic/eui");
var _public = require("@kbn/kibana-react-plugin/public");
var _services = require("./services");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
and the Server Side Public License, v 1; you may not use this file except
in compliance with, at your election, the Elastic License 2.0 or the Server
ide Public License, v 1.

// @ts-ignore
const DefaultEditor = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./default_editor'))));
class DefaultEditorController {
  constructor(el, vis, eventEmitter, embeddableHandler) {
    this.el = el;
    this.vis = vis;
    this.eventEmitter = eventEmitter;
    this.embeddableHandler = embeddableHandler;
  }
  render(props) {
    (0, _reactDom.render)( /*#__PURE__*/_react.default.createElement(_public.KibanaThemeProvider, {
      theme$: (0, _services.getTheme)().theme$
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiErrorBoundary, null, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
      fallback: /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'flex',
          flex: '1 1 auto',
          justifyContent: 'center',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingChart, {
        size: "xl",
        mono: true
      }))
    }, /*#__PURE__*/_react.default.createElement(DefaultEditor, (0, _extends2.default)({
      eventEmitter: this.eventEmitter,
      embeddableHandler: this.embeddableHandler,
      vis: this.vis
    }, props))))), this.el);
  }
  destroy() {
    (0, _reactDom.unmountComponentAtNode)(this.el);
  }
}
exports.DefaultEditorController = DefaultEditorController;