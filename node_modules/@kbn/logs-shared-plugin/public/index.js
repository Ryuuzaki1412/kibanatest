"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogEntryFieldColumn = exports.LogEntryContextMenu = exports.LogEntryColumn = exports.LogColumnHeadersWrapper = exports.LogColumnHeader = exports.LogAIAssistant = void 0;
Object.defineProperty(exports, "LogEntryFlyout", {
  enumerable: true,
  get: function () {
    return _log_entry_flyout.LogEntryFlyout;
  }
});
exports.LogEntryTimestampColumn = exports.LogEntryRowWrapper = exports.LogEntryMessageColumn = void 0;
Object.defineProperty(exports, "LogHighlightsStateProvider", {
  enumerable: true,
  get: function () {
    return _log_highlights.LogHighlightsStateProvider;
  }
});
Object.defineProperty(exports, "LogPositionStateProvider", {
  enumerable: true,
  get: function () {
    return _log_position.LogPositionStateProvider;
  }
});
exports.LogStream = void 0;
Object.defineProperty(exports, "LogStreamProvider", {
  enumerable: true,
  get: function () {
    return _log_stream.LogStreamProvider;
  }
});
Object.defineProperty(exports, "LogViewProvider", {
  enumerable: true,
  get: function () {
    return _use_log_view.LogViewProvider;
  }
});
exports.ScrollableLogTextStreamView = void 0;
Object.defineProperty(exports, "WithSummary", {
  enumerable: true,
  get: function () {
    return _log_summary.WithSummary;
  }
});
Object.defineProperty(exports, "getLogViewReferenceFromUrl", {
  enumerable: true,
  get: function () {
    return _log_view_state.getLogViewReferenceFromUrl;
  }
});
Object.defineProperty(exports, "iconColumnId", {
  enumerable: true,
  get: function () {
    return _log_entry_column.iconColumnId;
  }
});
Object.defineProperty(exports, "initializeFromUrl", {
  enumerable: true,
  get: function () {
    return _log_view_state.initializeFromUrl;
  }
});
Object.defineProperty(exports, "listenForUrlChanges", {
  enumerable: true,
  get: function () {
    return _log_view_state.listenForUrlChanges;
  }
});
exports.plugin = plugin;
Object.defineProperty(exports, "updateContextInUrl", {
  enumerable: true,
  get: function () {
    return _log_view_state.updateContextInUrl;
  }
});
Object.defineProperty(exports, "useColumnWidths", {
  enumerable: true,
  get: function () {
    return _log_entry_column.useColumnWidths;
  }
});
Object.defineProperty(exports, "useLogEntryFlyout", {
  enumerable: true,
  get: function () {
    return _log_entry_flyout.useLogEntryFlyout;
  }
});
Object.defineProperty(exports, "useLogHighlightsStateContext", {
  enumerable: true,
  get: function () {
    return _log_highlights.useLogHighlightsStateContext;
  }
});
Object.defineProperty(exports, "useLogPositionStateContext", {
  enumerable: true,
  get: function () {
    return _log_position.useLogPositionStateContext;
  }
});
Object.defineProperty(exports, "useLogStreamContext", {
  enumerable: true,
  get: function () {
    return _log_stream.useLogStreamContext;
  }
});
Object.defineProperty(exports, "useLogSummary", {
  enumerable: true,
  get: function () {
    return _log_summary.useLogSummary;
  }
});
Object.defineProperty(exports, "useLogView", {
  enumerable: true,
  get: function () {
    return _use_log_view.useLogView;
  }
});
Object.defineProperty(exports, "useLogViewContext", {
  enumerable: true,
  get: function () {
    return _use_log_view.useLogViewContext;
  }
});
var _dynamic = require("../common/dynamic");
var _plugin = require("./plugin");
var _use_log_view = require("./hooks/use_log_view");
var _log_stream = require("./containers/logs/log_stream");
var _log_position = require("./containers/logs/log_position");
var _log_highlights = require("./containers/logs/log_highlights");
var _log_summary = require("./containers/logs/log_summary");
var _log_entry_flyout = require("./components/logging/log_entry_flyout");
var _log_entry_column = require("./components/logging/log_text_stream/log_entry_column");
var _log_view_state = require("./observability_logs/log_view_state");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


// This exports static code and TypeScript types,
// as well as, Kibana Platform `plugin()` initializer.
function plugin() {
  return new _plugin.LogsSharedPlugin();
}

// Containers & Hook

// Shared components

const LogAIAssistant = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/log_ai_assistant/log_ai_assistant'))));
exports.LogAIAssistant = LogAIAssistant;
const LogStream = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/log_stream/log_stream'))));
exports.LogStream = LogStream;
const LogColumnHeader = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/column_headers'))));
exports.LogColumnHeader = LogColumnHeader;
const LogColumnHeadersWrapper = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/column_headers_wrapper'))));
exports.LogColumnHeadersWrapper = LogColumnHeadersWrapper;
const LogEntryColumn = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_column'))));
exports.LogEntryColumn = LogEntryColumn;
const LogEntryContextMenu = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_context_menu'))));
exports.LogEntryContextMenu = LogEntryContextMenu;
const LogEntryFieldColumn = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_field_column'))));
exports.LogEntryFieldColumn = LogEntryFieldColumn;
const LogEntryMessageColumn = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_message_column'))));
exports.LogEntryMessageColumn = LogEntryMessageColumn;
const LogEntryRowWrapper = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_row_wrapper'))));
exports.LogEntryRowWrapper = LogEntryRowWrapper;
const LogEntryTimestampColumn = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_timestamp_column'))));
exports.LogEntryTimestampColumn = LogEntryTimestampColumn;
const ScrollableLogTextStreamView = (0, _dynamic.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/scrollable_log_text_stream_view'))));

// State machine utils
exports.ScrollableLogTextStreamView = ScrollableLogTextStreamView;