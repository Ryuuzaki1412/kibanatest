"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panel = Panel;
var _react = _interopRequireWildcard(require("react"));
var _contexts = require("../../contexts");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

function Panel({
  children,
  className,
  initialWidth = 100,
  style = {}
}) {
  const [width, setWidth] = (0, _react.useState)(`${initialWidth}%`);
  const {
    registry
  } = (0, _contexts.usePanelContext)();
  const divRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    registry.registerPanel({
      width: initialWidth,
      setWidth(value) {
        setWidth(value + '%');
        this.width = value;
      },
      getWidth() {
        return divRef.current.getBoundingClientRect().width;
      }
    });
  }, [initialWidth, registry]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className,
    ref: divRef,
    style: {
      ...style,
      width,
      display: 'flex'
    }
  }, children);
}