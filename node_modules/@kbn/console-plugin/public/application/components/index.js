"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ConsoleMenu", {
  enumerable: true,
  get: function () {
    return _console_menu.ConsoleMenu;
  }
});
exports.DevToolsVariablesFlyoutLazy = exports.DevToolsVariablesFlyout = exports.DevToolsSettingsModalLazy = exports.DevToolsSettingsModal = void 0;
Object.defineProperty(exports, "EditorContentSpinner", {
  enumerable: true,
  get: function () {
    return _editor_content_spinner.EditorContentSpinner;
  }
});
Object.defineProperty(exports, "HelpPanel", {
  enumerable: true,
  get: function () {
    return _help_panel.HelpPanel;
  }
});
Object.defineProperty(exports, "NetworkRequestStatusBar", {
  enumerable: true,
  get: function () {
    return _network_request_status_bar.NetworkRequestStatusBar;
  }
});
Object.defineProperty(exports, "SomethingWentWrongCallout", {
  enumerable: true,
  get: function () {
    return _something_went_wrong_callout.SomethingWentWrongCallout;
  }
});
Object.defineProperty(exports, "TopNavMenu", {
  enumerable: true,
  get: function () {
    return _top_nav_menu.TopNavMenu;
  }
});
Object.defineProperty(exports, "WelcomePanel", {
  enumerable: true,
  get: function () {
    return _welcome_panel.WelcomePanel;
  }
});
var _react = _interopRequireDefault(require("react"));
var _sharedUxUtility = require("@kbn/shared-ux-utility");
var _network_request_status_bar = require("./network_request_status_bar");
var _something_went_wrong_callout = require("./something_went_wrong_callout");
var _top_nav_menu = require("./top_nav_menu");
var _console_menu = require("./console_menu");
var _welcome_panel = require("./welcome_panel");
var _help_panel = require("./help_panel");
var _editor_content_spinner = require("./editor_content_spinner");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
and the Server Side Public License, v 1; you may not use this file except
in compliance with, at your election, the Elastic License 2.0 or the Server
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Side Public License, v 1.

/**
 * The Lazily-loaded `DevToolsSettingsModal` component.  Consumers should use `React.Suspense` or
 * the withSuspense` HOC to load this component.
 */
const DevToolsSettingsModalLazy = /*#__PURE__*/_react.default.lazy(() => Promise.resolve().then(() => _interopRequireWildcard(require('./settings_modal'))).then(({
  DevToolsSettingsModal
}) => ({
  default: DevToolsSettingsModal
})));

/**
 * A `DevToolsSettingsModal` component that is wrapped by the `withSuspense` HOC. This component can
 * be used directly by consumers and will load the `DevToolsSettingsModalLazy` component lazily with
 * a predefined fallback and error boundary.
 */
exports.DevToolsSettingsModalLazy = DevToolsSettingsModalLazy;
const DevToolsSettingsModal = (0, _sharedUxUtility.withSuspense)(DevToolsSettingsModalLazy);

/**
 * The Lazily-loaded `DevToolsVariablesFlyout` component.  Consumers should use `React.Suspense` or
 * the withSuspense` HOC to load this component.
 */
exports.DevToolsSettingsModal = DevToolsSettingsModal;
const DevToolsVariablesFlyoutLazy = /*#__PURE__*/_react.default.lazy(() => Promise.resolve().then(() => _interopRequireWildcard(require('./variables'))).then(({
  DevToolsVariablesFlyout
}) => ({
  default: DevToolsVariablesFlyout
})));

/**
 * A `DevToolsVariablesFlyout` component that is wrapped by the `withSuspense` HOC. This component can
 * be used directly by consumers and will load the `DevToolsVariablesFlyoutLazy` component lazily with
 * a predefined fallback and error boundary.
 */
exports.DevToolsVariablesFlyoutLazy = DevToolsVariablesFlyoutLazy;
const DevToolsVariablesFlyout = (0, _sharedUxUtility.withSuspense)(DevToolsVariablesFlyoutLazy);
exports.DevToolsVariablesFlyout = DevToolsVariablesFlyout;