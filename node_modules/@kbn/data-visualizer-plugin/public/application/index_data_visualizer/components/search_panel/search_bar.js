"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchPanelContent = void 0;
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _mlIsDefined = require("@kbn/ml-is-defined");
var _saved_search_utils = require("../../utils/saved_search_utils");
var _kibana_context = require("../../../kibana_context");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SearchPanelContent = ({
  searchQuery,
  searchString,
  searchQueryLanguage,
  dataView,
  setSearchParams
}) => {
  const {
    services: {
      uiSettings,
      notifications: {
        toasts
      },
      data: {
        query: queryManager
      },
      unifiedSearch: {
        ui: {
          SearchBar
        }
      }
    }
  } = (0, _kibana_context.useDataVisualizerKibana)();
  // The internal state of the input query bar updated on every key stroke.
  const [searchInput, setSearchInput] = (0, _react.useState)({
    query: searchString || '',
    language: searchQueryLanguage
  });
  (0, _react.useEffect)(() => {
    setSearchInput({
      query: searchString || '',
      language: searchQueryLanguage
    });
  }, [searchQueryLanguage, searchString, queryManager.filterManager]);
  const searchHandler = ({
    query,
    filters
  }) => {
    const mergedQuery = (0, _mlIsDefined.isDefined)(query) ? query : searchInput;
    const mergedFilters = (0, _mlIsDefined.isDefined)(filters) ? filters : queryManager.filterManager.getFilters();
    try {
      var _queryManager$filterM;
      if (mergedFilters) {
        queryManager.filterManager.setFilters(mergedFilters);
      }
      const combinedQuery = (0, _saved_search_utils.createMergedEsQuery)(mergedQuery, (_queryManager$filterM = queryManager.filterManager.getFilters()) !== null && _queryManager$filterM !== void 0 ? _queryManager$filterM : [], dataView, uiSettings);
      setSearchParams({
        searchQuery: combinedQuery,
        searchString: mergedQuery.query,
        queryLanguage: mergedQuery.language,
        filters: mergedFilters
      });
    } catch (e) {
      console.log('Invalid syntax', JSON.stringify(e, null, 2)); // eslint-disable-line no-console
      toasts.addError(e, {
        title: _i18n.i18n.translate('xpack.dataVisualizer.searchPanel.invalidSyntax', {
          defaultMessage: 'Invalid syntax'
        })
      });
    }
  };
  return /*#__PURE__*/_react.default.createElement(SearchBar, {
    dataTestSubj: "dataVisualizerQueryInput",
    appName: 'dataVisualizer',
    showFilterBar: true,
    showDatePicker: false,
    showQueryInput: true,
    query: searchInput,
    onQuerySubmit: params => searchHandler({
      query: params.query
    }),
    onFiltersUpdated: filters => searchHandler({
      filters
    }),
    indexPatterns: [dataView],
    placeholder: _i18n.i18n.translate('xpack.dataVisualizer.searchPanel.queryBarPlaceholderText', {
      defaultMessage: 'Searchâ€¦ (e.g. status:200 AND extension:"PHP")'
    }),
    displayStyle: 'inPage',
    isClearable: true,
    customSubmitButton: /*#__PURE__*/_react.default.createElement("div", null)
  });
};
exports.SearchPanelContent = SearchPanelContent;