"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ManageRoutesSpy = void 0;
var _react = _interopRequireWildcard(require("react"));
var _helpers = require("./helpers");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ManageRoutesSpyComponent = ({
  children
}) => {
  const reducerSpyRoute = (state, action) => {
    switch (action.type) {
      case 'updateRoute':
        return action.route;
      case 'updateRouteWithOutSearch':
        return {
          ...state,
          ...action.route
        };
      case 'updateSearch':
        return {
          ...state,
          search: action.search
        };
      default:
        return state;
    }
  };
  return /*#__PURE__*/_react.default.createElement(_helpers.RouterSpyStateContext.Provider, {
    value: (0, _react.useReducer)(reducerSpyRoute, _helpers.initRouteSpy)
  }, children);
};
const ManageRoutesSpy = /*#__PURE__*/(0, _react.memo)(ManageRoutesSpyComponent);
exports.ManageRoutesSpy = ManageRoutesSpy;