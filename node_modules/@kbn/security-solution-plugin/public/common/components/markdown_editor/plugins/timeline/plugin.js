"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _timeline = require("../../../../../../common/api/timeline");
var _selectable_timeline = require("../../../../../timelines/components/timeline/selectable_timeline");
var _link_to = require("../../../link_to");
var _constants = require("./constants");
var i18n = _interopRequireWildcard(require("./translations"));
var _types = require("../../../../../app/types");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const TimelineEditorComponent = ({
  onClosePopover,
  onInsert
}) => {
  const {
    formatUrl
  } = (0, _link_to.useFormatUrl)(_types.SecurityPageName.timelines);
  const handleGetSelectableOptions = (0, _react.useCallback)(({
    timelines
  }) => [...timelines.map((t, index) => ({
    description: t.description,
    favorite: t.favorite,
    label: t.title,
    id: t.savedObjectId,
    key: `${t.title}-${index}`,
    title: t.title,
    checked: undefined
  }))], []);
  const handleTimelineChange = (0, _react.useCallback)((timelineTitle, timelineId, graphEventId) => {
    const url = formatUrl((0, _link_to.getTimelineUrl)(timelineId !== null && timelineId !== void 0 ? timelineId : '', graphEventId), {
      absolute: true,
      skipSearch: true
    });
    onInsert(`[${timelineTitle}](${url})`, {
      block: false
    });
  }, [formatUrl, onInsert]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiModalHeader, null), /*#__PURE__*/_react.default.createElement(_eui.EuiModalBody, null, /*#__PURE__*/_react.default.createElement(_selectable_timeline.SelectableTimeline, {
    hideUntitled: true,
    getSelectableOptions: handleGetSelectableOptions,
    onTimelineChange: handleTimelineChange,
    onClosePopover: onClosePopover,
    timelineType: _timeline.TimelineType.default
  })));
};
const TimelineEditor = /*#__PURE__*/(0, _react.memo)(TimelineEditorComponent);
const plugin = {
  name: _constants.ID,
  button: {
    label: i18n.INSERT_TIMELINE,
    iconType: 'timeline'
  },
  helpText: /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
    language: "md",
    paddingSize: "s",
    fontSize: "l"
  }, '[title](url)'),
  editor: function editor({
    node,
    onSave,
    onCancel
  }) {
    return /*#__PURE__*/_react.default.createElement(TimelineEditor, {
      onClosePopover: onCancel,
      onInsert: onSave
    });
  }
};
exports.plugin = plugin;