"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VIEW_DETAILS_FOR_ROW = exports.VIEW_DETAILS = exports.SORT_FIELDS = exports.SEND_ALERT_TO_TIMELINE_FOR_ROW = exports.PIN_EVENT_FOR_ROW = exports.OPEN_SESSION_VIEW = exports.NOTES_TOOLTIP = exports.NOTES_DISABLE_TOOLTIP = exports.MORE_ACTIONS_FOR_ROW = exports.FULL_SCREEN = exports.CHECKBOX_FOR_ROW = exports.ADD_NOTES_FOR_ROW = exports.ACTION_INVESTIGATE_IN_RESOLVER_FOR_ROW = exports.ACTION_INVESTIGATE_IN_RESOLVER = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const OPEN_SESSION_VIEW = _i18n.i18n.translate('xpack.securitySolution.timeline.body.openSessionViewLabel', {
  defaultMessage: 'Open Session View'
});
exports.OPEN_SESSION_VIEW = OPEN_SESSION_VIEW;
const NOTES_DISABLE_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.timeline.body.notes.disableEventTooltip', {
  defaultMessage: 'Notes may not be added here while editing a template timeline'
});
exports.NOTES_DISABLE_TOOLTIP = NOTES_DISABLE_TOOLTIP;
const NOTES_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.timeline.body.notes.addNoteTooltip', {
  defaultMessage: 'Add note'
});
exports.NOTES_TOOLTIP = NOTES_TOOLTIP;
const SORT_FIELDS = _i18n.i18n.translate('xpack.securitySolution.timeline.sortFieldsButton', {
  defaultMessage: 'Sort fields'
});
exports.SORT_FIELDS = SORT_FIELDS;
const FULL_SCREEN = _i18n.i18n.translate('xpack.securitySolution.timeline.fullScreenButton', {
  defaultMessage: 'Full screen'
});
exports.FULL_SCREEN = FULL_SCREEN;
const VIEW_DETAILS = _i18n.i18n.translate('xpack.securitySolution.hoverActions.viewDetailsAriaLabel', {
  defaultMessage: 'View details'
});
exports.VIEW_DETAILS = VIEW_DETAILS;
const VIEW_DETAILS_FOR_ROW = ({
  ariaRowindex,
  columnValues
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.viewDetailsForRowAriaLabel', {
  values: {
    ariaRowindex,
    columnValues
  },
  defaultMessage: 'View details for the alert or event in row {ariaRowindex}, with columns {columnValues}'
});
exports.VIEW_DETAILS_FOR_ROW = VIEW_DETAILS_FOR_ROW;
const ACTION_INVESTIGATE_IN_RESOLVER = _i18n.i18n.translate('xpack.securitySolution.hoverActions.investigateInResolverTooltip', {
  defaultMessage: 'Analyze event'
});
exports.ACTION_INVESTIGATE_IN_RESOLVER = ACTION_INVESTIGATE_IN_RESOLVER;
const CHECKBOX_FOR_ROW = ({
  ariaRowindex,
  columnValues,
  checked
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.checkboxForRowAriaLabel', {
  values: {
    ariaRowindex,
    checked,
    columnValues
  },
  defaultMessage: '{checked, select, false {unchecked} true {checked}} checkbox for the alert or event in row {ariaRowindex}, with columns {columnValues}'
});
exports.CHECKBOX_FOR_ROW = CHECKBOX_FOR_ROW;
const ACTION_INVESTIGATE_IN_RESOLVER_FOR_ROW = ({
  ariaRowindex,
  columnValues
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.investigateInResolverForRowAriaLabel', {
  values: {
    ariaRowindex,
    columnValues
  },
  defaultMessage: 'Analyze the alert or event in row {ariaRowindex}, with columns {columnValues}'
});
exports.ACTION_INVESTIGATE_IN_RESOLVER_FOR_ROW = ACTION_INVESTIGATE_IN_RESOLVER_FOR_ROW;
const SEND_ALERT_TO_TIMELINE_FOR_ROW = ({
  ariaRowindex,
  columnValues
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.sendAlertToTimelineForRowAriaLabel', {
  values: {
    ariaRowindex,
    columnValues
  },
  defaultMessage: 'Send the alert in row {ariaRowindex} to timeline, with columns {columnValues}'
});
exports.SEND_ALERT_TO_TIMELINE_FOR_ROW = SEND_ALERT_TO_TIMELINE_FOR_ROW;
const ADD_NOTES_FOR_ROW = ({
  ariaRowindex,
  columnValues
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.addNotesForRowAriaLabel', {
  values: {
    ariaRowindex,
    columnValues
  },
  defaultMessage: 'Add notes for the event in row {ariaRowindex} to timeline, with columns {columnValues}'
});
exports.ADD_NOTES_FOR_ROW = ADD_NOTES_FOR_ROW;
const PIN_EVENT_FOR_ROW = ({
  ariaRowindex,
  columnValues,
  isEventPinned
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.pinEventForRowAriaLabel', {
  values: {
    ariaRowindex,
    columnValues,
    isEventPinned
  },
  defaultMessage: '{isEventPinned, select, false {Pin} true {Unpin}} the event in row {ariaRowindex} to timeline, with columns {columnValues}'
});
exports.PIN_EVENT_FOR_ROW = PIN_EVENT_FOR_ROW;
const MORE_ACTIONS_FOR_ROW = ({
  ariaRowindex,
  columnValues
}) => _i18n.i18n.translate('xpack.securitySolution.hoverActions.moreActionsForRowAriaLabel', {
  values: {
    ariaRowindex,
    columnValues
  },
  defaultMessage: 'Select more actions for the alert or event in row {ariaRowindex}, with columns {columnValues}'
});
exports.MORE_ACTIONS_FOR_ROW = MORE_ACTIONS_FOR_ROW;