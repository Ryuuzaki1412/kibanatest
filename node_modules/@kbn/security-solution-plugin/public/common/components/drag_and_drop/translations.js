"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FIELD = exports.DRAGGABLE_KEYBOARD_INSTRUCTIONS_NOT_DRAGGING_SCREEN_READER_ONLY = exports.COPY_TO_CLIPBOARD = exports.CLOSE = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const COPY_TO_CLIPBOARD = _i18n.i18n.translate('xpack.securitySolution.dragAndDrop.copyToClipboardTooltip', {
  defaultMessage: 'Copy to Clipboard'
});
exports.COPY_TO_CLIPBOARD = COPY_TO_CLIPBOARD;
const DRAGGABLE_KEYBOARD_INSTRUCTIONS_NOT_DRAGGING_SCREEN_READER_ONLY = _i18n.i18n.translate('xpack.securitySolution.dragAndDrop.draggableKeyboardInstructionsNotDraggingScreenReaderOnly', {
  defaultMessage: 'Press enter for options, or press space to begin dragging.'
});
exports.DRAGGABLE_KEYBOARD_INSTRUCTIONS_NOT_DRAGGING_SCREEN_READER_ONLY = DRAGGABLE_KEYBOARD_INSTRUCTIONS_NOT_DRAGGING_SCREEN_READER_ONLY;
const FIELD = _i18n.i18n.translate('xpack.securitySolution.dragAndDrop.fieldLabel', {
  defaultMessage: 'Field'
});
exports.FIELD = FIELD;
const CLOSE = _i18n.i18n.translate('xpack.securitySolution.dragAndDrop.closeButtonLabel', {
  defaultMessage: 'Close'
});
exports.CLOSE = CLOSE;