"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditExceptionFlyout = void 0;
var _fp = require("lodash/fp");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _eui = require("@elastic/eui");
var _securitysolutionIoTsListTypes = require("@kbn/securitysolution-io-ts-list-types");
var _moment = _interopRequireDefault(require("moment"));
var _utils = require("../../../../../common/detection_engine/utils");
var _item_meta_form = require("../flyout_components/item_meta_form");
var _linked_to_list = require("../flyout_components/linked_to_list");
var _linked_to_rule = require("../flyout_components/linked_to_rule");
var _alerts_actions = require("../flyout_components/alerts_actions");
var _item_conditions = require("../flyout_components/item_conditions");
var _use_exception_flyout_data = require("../../logic/use_exception_flyout_data");
var _use_close_alerts = require("../../logic/use_close_alerts");
var _use_find_references = require("../../logic/use_find_references");
var _utils2 = require("../flyout_components/utils");
var _item_comments = require("../item_comments");
var _reducer = require("./reducer");
var _use_edit_exception = require("./use_edit_exception");
var i18n = _interopRequireWildcard(require("./translations"));
var _expire_time = require("../flyout_components/expire_time");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const FlyoutHeader = (0, _styledComponents.default)(_eui.EuiFlyoutHeader)`
  ${({
  theme
}) => (0, _styledComponents.css)`
    border-bottom: 1px solid ${theme.eui.euiColorLightShade};
  `}
`;
const FlyoutBodySection = (0, _styledComponents.default)(_eui.EuiFlyoutBody)`
  ${() => (0, _styledComponents.css)`
    &.builder-section {
      overflow-y: scroll;
    }
  `}
`;
const FlyoutFooterGroup = (0, _styledComponents.default)(_eui.EuiFlexGroup)`
  ${({
  theme
}) => (0, _styledComponents.css)`
    padding: ${theme.eui.euiSizeS};
  `}
`;
const SectionHeader = (0, _styledComponents.default)(_eui.EuiTitle)`
  ${() => (0, _styledComponents.css)`
    font-weight: ${({
  theme
}) => theme.eui.euiFontWeightSemiBold};
  `}
`;
const EditExceptionFlyoutComponent = ({
  list,
  itemToEdit,
  rule,
  showAlertCloseOptions,
  openedFromListDetailPage,
  onCancel,
  onConfirm
}) => {
  var _itemToEdit$comments$;
  const selectedOs = (0, _react.useMemo)(() => itemToEdit.os_types, [itemToEdit]);
  const rules = (0, _react.useMemo)(() => rule != null ? [rule] : null, [rule]);
  const listType = (0, _react.useMemo)(() => list.type, [list]);
  const {
    isLoading,
    indexPatterns,
    getExtendedFields
  } = (0, _use_exception_flyout_data.useFetchIndexPatterns)(rules);
  const [isSubmitting, submitEditExceptionItems] = (0, _use_edit_exception.useEditExceptionItems)();
  const [isClosingAlerts, closeAlerts] = (0, _use_close_alerts.useCloseAlertsFromExceptions)();
  const [{
    exceptionItems,
    exceptionItemMeta: {
      name: exceptionItemName
    },
    newComment,
    commentErrorExists,
    bulkCloseAlerts,
    disableBulkClose,
    bulkCloseIndex,
    entryErrorExists,
    expireTime,
    expireErrorExists
  }, dispatch] = (0, _react.useReducer)((0, _reducer.createExceptionItemsReducer)(), {
    exceptionItems: [itemToEdit],
    exceptionItemMeta: {
      name: itemToEdit.name
    },
    newComment: '',
    commentErrorExists: false,
    bulkCloseAlerts: false,
    disableBulkClose: true,
    bulkCloseIndex: undefined,
    entryErrorExists: false,
    expireTime: itemToEdit.expire_time !== undefined ? (0, _moment.default)(itemToEdit.expire_time) : undefined,
    expireErrorExists: false
  });
  const allowLargeValueLists = (0, _react.useMemo)(() => {
    if (rule != null) {
      // We'll only block this when we know what rule we're dealing with.
      // When editing an item outside the context of a specific rule,
      // we won't block but should communicate to the user that large value lists
      // won't be applied to all rule types.
      return !(0, _utils.isEqlRule)(rule.type) && !(0, _utils.isThresholdRule)(rule.type) && !(0, _utils.isNewTermsRule)(rule.type);
    } else {
      return true;
    }
  }, [rule]);
  const [isLoadingReferences, referenceFetchError, ruleReferences, fetchReferences] = (0, _use_find_references.useFindExceptionListReferences)();
  (0, _react.useEffect)(() => {
    if (fetchReferences != null) {
      fetchReferences([{
        id: list.id,
        listId: list.list_id,
        namespaceType: list.namespace_type
      }]);
    }
  }, [list, fetchReferences]);

  /**
   * Reducer action dispatchers
   * */
  const setExceptionItemsToAdd = (0, _react.useCallback)(items => {
    dispatch({
      type: 'setExceptionItems',
      items
    });
  }, [dispatch]);
  const setExceptionItemMeta = (0, _react.useCallback)(value => {
    dispatch({
      type: 'setExceptionItemMeta',
      value
    });
  }, [dispatch]);
  const setComment = (0, _react.useCallback)(comment => {
    dispatch({
      type: 'setComment',
      comment
    });
  }, [dispatch]);
  const setCommentError = (0, _react.useCallback)(errorExists => {
    dispatch({
      type: 'setCommentError',
      errorExists
    });
  }, [dispatch]);
  const setBulkCloseAlerts = (0, _react.useCallback)(bulkClose => {
    dispatch({
      type: 'setBulkCloseAlerts',
      bulkClose
    });
  }, [dispatch]);
  const setDisableBulkCloseAlerts = (0, _react.useCallback)(disableBulkCloseAlerts => {
    dispatch({
      type: 'setDisableBulkCloseAlerts',
      disableBulkCloseAlerts
    });
  }, [dispatch]);
  const setBulkCloseIndex = (0, _react.useCallback)(index => {
    dispatch({
      type: 'setBulkCloseIndex',
      bulkCloseIndex: index
    });
  }, [dispatch]);
  const setConditionsValidationError = (0, _react.useCallback)(errorExists => {
    dispatch({
      type: 'setConditionValidationErrorExists',
      errorExists
    });
  }, [dispatch]);
  const setExpireTime = (0, _react.useCallback)(exceptionExpireTime => {
    dispatch({
      type: 'setExpireTime',
      expireTime: exceptionExpireTime
    });
  }, [dispatch]);
  const setExpireError = (0, _react.useCallback)(errorExists => {
    dispatch({
      type: 'setExpireError',
      errorExists
    });
  }, [dispatch]);
  const handleCloseFlyout = (0, _react.useCallback)(() => {
    onCancel(false);
  }, [onCancel]);
  const areItemsReadyForUpdate = (0, _react.useCallback)(items => {
    return items.every(item => _securitysolutionIoTsListTypes.updateExceptionListItemSchema.is(item));
  }, []);
  const handleSubmit = (0, _react.useCallback)(async () => {
    if (submitEditExceptionItems == null) return;
    try {
      const items = (0, _utils2.enrichExceptionItemsForUpdate)({
        itemName: exceptionItemName,
        commentToAdd: newComment,
        listType,
        selectedOs: itemToEdit.os_types,
        expireTime,
        items: exceptionItems
      });
      if (areItemsReadyForUpdate(items)) {
        await submitEditExceptionItems({
          itemsToUpdate: items
        });
        const ruleDefaultRule = rule != null ? [rule.rule_id] : [];
        const referencedRules = ruleReferences != null ? ruleReferences[list.list_id].referenced_rules.map(({
          rule_id: ruleId
        }) => ruleId) : [];
        const ruleIdsForBulkClose = listType === _securitysolutionIoTsListTypes.ExceptionListTypeEnum.RULE_DEFAULT ? ruleDefaultRule : referencedRules;
        if (closeAlerts != null && !(0, _fp.isEmpty)(ruleIdsForBulkClose) && bulkCloseAlerts) {
          await closeAlerts(ruleIdsForBulkClose, items, undefined, bulkCloseIndex);
        }
        onConfirm(true);
      }
    } catch (e) {
      onCancel(false);
    }
  }, [submitEditExceptionItems, exceptionItemName, newComment, listType, itemToEdit.os_types, exceptionItems, areItemsReadyForUpdate, rule, ruleReferences, list.list_id, closeAlerts, bulkCloseAlerts, onConfirm, bulkCloseIndex, onCancel, expireTime]);
  const editExceptionMessage = (0, _react.useMemo)(() => listType === _securitysolutionIoTsListTypes.ExceptionListTypeEnum.ENDPOINT ? i18n.EDIT_ENDPOINT_EXCEPTION_TITLE : i18n.EDIT_EXCEPTION_TITLE, [listType]);
  const isSubmitButtonDisabled = (0, _react.useMemo)(() => isSubmitting || isClosingAlerts || exceptionItems.every(item => item.entries.length === 0) || isLoading || entryErrorExists || expireErrorExists || commentErrorExists, [isLoading, entryErrorExists, exceptionItems, isSubmitting, isClosingAlerts, expireErrorExists, commentErrorExists]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlyout, {
    size: "l",
    onClose: handleCloseFlyout,
    "data-test-subj": "editExceptionFlyout"
  }, /*#__PURE__*/_react.default.createElement(FlyoutHeader, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, null, /*#__PURE__*/_react.default.createElement("h2", {
    "data-test-subj": "exceptionFlyoutTitle"
  }, editExceptionMessage)), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  })), /*#__PURE__*/_react.default.createElement(FlyoutBodySection, {
    className: "builder-section"
  }, isLoading && /*#__PURE__*/_react.default.createElement(_eui.EuiSkeletonText, {
    "data-test-subj": "loadingEditExceptionFlyout",
    lines: 4
  }), /*#__PURE__*/_react.default.createElement(_item_meta_form.ExceptionsFlyoutMeta, {
    exceptionItemName: exceptionItemName,
    onChange: setExceptionItemMeta
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_item_conditions.ExceptionsConditions, {
    exceptionItemName: exceptionItemName,
    allowLargeValueLists: allowLargeValueLists,
    exceptionListItems: [itemToEdit],
    exceptionListType: listType,
    indexPatterns: indexPatterns,
    rules: rules,
    selectedOs: selectedOs,
    showOsTypeOptions: listType === _securitysolutionIoTsListTypes.ExceptionListTypeEnum.ENDPOINT,
    isEdit: true,
    onExceptionItemAdd: setExceptionItemsToAdd,
    onSetErrorExists: setConditionsValidationError,
    getExtendedFields: getExtendedFields
  }), !openedFromListDetailPage && listType === _securitysolutionIoTsListTypes.ExceptionListTypeEnum.DETECTION && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_linked_to_list.ExceptionsLinkedToLists, {
    isLoadingReferences: isLoadingReferences,
    errorFetchingReferences: referenceFetchError,
    listAndReferences: ruleReferences != null ? [ruleReferences[list.list_id]] : []
  })), !openedFromListDetailPage && listType === _securitysolutionIoTsListTypes.ExceptionListTypeEnum.RULE_DEFAULT && rule != null && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_linked_to_rule.ExceptionsLinkedToRule, {
    rule: rule
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_item_comments.ExceptionItemComments, {
    accordionTitle: /*#__PURE__*/_react.default.createElement(SectionHeader, {
      size: "xs"
    }, /*#__PURE__*/_react.default.createElement("h3", null, i18n.COMMENTS_SECTION_TITLE((_itemToEdit$comments$ = itemToEdit.comments.length) !== null && _itemToEdit$comments$ !== void 0 ? _itemToEdit$comments$ : 0))),
    exceptionItemComments: itemToEdit.comments,
    newCommentValue: newComment,
    newCommentOnChange: setComment,
    setCommentError: setCommentError
  }), listType !== _securitysolutionIoTsListTypes.ExceptionListTypeEnum.ENDPOINT && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_expire_time.ExceptionsExpireTime, {
    expireTime: expireTime,
    setExpireTime: setExpireTime,
    setExpireError: setExpireError
  })), showAlertCloseOptions && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_alerts_actions.ExceptionItemsFlyoutAlertsActions, {
    exceptionListType: listType,
    shouldBulkCloseAlert: bulkCloseAlerts,
    disableBulkClose: disableBulkClose,
    exceptionListItems: exceptionItems,
    onDisableBulkClose: setDisableBulkCloseAlerts,
    onUpdateBulkCloseIndex: setBulkCloseIndex,
    onBulkCloseCheckboxChange: setBulkCloseAlerts
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlyoutFooter, null, /*#__PURE__*/_react.default.createElement(FlyoutFooterGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    "data-test-subj": "cancelExceptionEditButton",
    onClick: handleCloseFlyout
  }, i18n.CANCEL), /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    "data-test-subj": "editExceptionConfirmButton",
    onClick: handleSubmit,
    isDisabled: isSubmitButtonDisabled,
    fill: true
  }, editExceptionMessage))));
};
const EditExceptionFlyout = /*#__PURE__*/_react.default.memo(EditExceptionFlyoutComponent);
exports.EditExceptionFlyout = EditExceptionFlyout;
EditExceptionFlyout.displayName = 'EditExceptionFlyout';