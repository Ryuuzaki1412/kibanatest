"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverTooltip = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var i18n = _interopRequireWildcard(require("../../../../detections/pages/detection_engine/rules/translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Table column tooltip component utilizing EuiPopover for rich content like documentation links
 * @param columnName string Name of column to use as aria-label of button
 * @param children React.ReactNode of content to display in popover tooltip
 */
const PopoverTooltipComponent = ({
  columnName,
  children
}) => {
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    anchorPosition: 'upCenter',
    isOpen: isPopoverOpen,
    closePopover: () => setIsPopoverOpen(false),
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
      "aria-label": i18n.POPOVER_TOOLTIP_ARIA_LABEL(columnName),
      onClick: event => {
        setIsPopoverOpen(!isPopoverOpen);
        event.stopPropagation();
      },
      size: "xs",
      color: "primary",
      iconType: "questionInCircle",
      style: {
        height: 'auto'
      }
    })
  }, children);
};
const PopoverTooltip = /*#__PURE__*/_react.default.memo(PopoverTooltipComponent);
exports.PopoverTooltip = PopoverTooltip;
PopoverTooltip.displayName = 'PopoverTooltip';