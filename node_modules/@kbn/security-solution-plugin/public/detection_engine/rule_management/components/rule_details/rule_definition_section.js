"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuleDefinitionSection = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _fp = require("lodash/fp");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _eui = require("@elastic/eui");
var _public = require("@kbn/data-plugin/public");
var _reactField = require("@kbn/react-field");
var _fieldTypes = require("@kbn/field-types");
var _public2 = require("@kbn/unified-search-plugin/public");
var _rule_schema = require("../../../../../common/api/detection_engine/model/rule_schema");
var _utility_types = require("../../../../../common/utility_types");
var descriptionStepI18n = _interopRequireWildcard(require("../../../../detections/components/rules/description_step/translations"));
var _integrations_description = require("../../../../detections/components/rules/related_integrations/integrations_description");
var _alert_suppression_technical_preview_badge = require("../../../../detections/components/rules/description_step/alert_suppression_technical_preview_badge");
var _use_get_saved_query = require("../../../../detections/pages/detection_engine/rules/use_get_saved_query");
var threatMatchI18n = _interopRequireWildcard(require("../../../../common/components/threat_match/translations"));
var timelinesI18n = _interopRequireWildcard(require("../../../../timelines/components/timeline/translations"));
var _form = require("../../../rule_creation_ui/pages/form");
var _types = require("../../../../detections/pages/detection_engine/rules/types");
var _helpers = require("../../../../detections/pages/detection_engine/rules/helpers");
var _ml_jobs_description = require("../../../../detections/components/rules/ml_jobs_description/ml_jobs_description");
var _ml_job_link = require("../../../../detections/components/rules/ml_job_link/ml_job_link");
var _use_security_jobs = require("../../../../common/components/ml_popover/hooks/use_security_jobs");
var _kibana_react = require("../../../../common/lib/kibana/kibana_react");
var _technical_preview_badge = require("../../../../detections/components/rules/technical_preview_badge");
var _badge_list = require("./badge_list");
var _constants = require("./constants");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SavedQueryName = ({
  savedQueryName
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
  size: "s",
  "data-test-subj": "savedQueryNamePropertyValue"
}, savedQueryName);
const EuiBadgeWrap = (0, _styledComponents.default)(_eui.EuiBadge)`
  .euiBadge__text {
    white-space: pre-wrap !important;
  }
`;
const Filters = ({
  filters,
  dataViewId,
  index,
  'data-test-subj': dataTestSubj
}) => {
  const {
    indexPattern
  } = (0, _form.useRuleIndexPattern)({
    dataSourceType: dataViewId ? _types.DataSourceType.DataView : _types.DataSourceType.IndexPatterns,
    index: index !== null && index !== void 0 ? index : [],
    dataViewId
  });
  const flattenedFilters = (0, _public.mapAndFlattenFilters)(filters);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    wrap: true,
    responsive: false,
    gutterSize: "xs",
    "data-test-subj": dataTestSubj
  }, flattenedFilters.map((filter, idx) => {
    const displayContent = filter.meta.alias ? filter.meta.alias : /*#__PURE__*/_react.default.createElement(_public2.FilterBadgeGroup, {
      filters: [filter],
      dataViews: [indexPattern]
    });
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false,
      key: `filter-${idx}`,
      css: {
        width: '100%'
      },
      "data-test-subj": `filterItem-${filter.meta.key}`
    }, /*#__PURE__*/_react.default.createElement(EuiBadgeWrap, {
      color: "hollow"
    }, indexPattern != null ? displayContent : /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
      size: "m"
    })));
  }));
};
const QueryContent = _styledComponents.default.div`
  white-space: pre-wrap;
`;
const Query = ({
  query,
  'data-test-subj': dataTestSubj = 'query'
}) => /*#__PURE__*/_react.default.createElement(QueryContent, {
  "data-test-subj": dataTestSubj
}, query);
const Index = ({
  index
}) => /*#__PURE__*/_react.default.createElement(_badge_list.BadgeList, {
  badges: index,
  "data-test-subj": "indexPropertyValue"
});
const DataViewId = ({
  dataViewId
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
  size: "s",
  "data-test-subj": "dataViewIdPropertyValue"
}, dataViewId);
const DataViewIndexPattern = ({
  dataViewId
}) => {
  const {
    data
  } = (0, _kibana_react.useKibana)().services;
  const [indexPattern, setIndexPattern] = _react.default.useState('');
  const [hasError, setHasError] = _react.default.useState(false);
  _react.default.useEffect(() => {
    data.dataViews.get(dataViewId).then(dataView => {
      setIndexPattern(dataView.getIndexPattern());
    }).catch(() => {
      setHasError(true);
    });
  }, [data, dataViewId]);
  if (hasError) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
      size: "s"
    }, i18n.DATA_VIEW_INDEX_PATTERN_FETCH_ERROR_MESSAGE);
  }
  if (!indexPattern) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
      size: "m"
    });
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    "data-test-subj": "dataViewIndexPatternPropertyValue"
  }, indexPattern);
};
const Threshold = ({
  threshold
}) => /*#__PURE__*/_react.default.createElement("div", {
  "data-test-subj": "thresholdPropertyValue"
}, (0, _fp.isEmpty)(threshold.field[0]) ? `${descriptionStepI18n.THRESHOLD_RESULTS_ALL} >= ${threshold.value}` : `${descriptionStepI18n.THRESHOLD_RESULTS_AGGREGATED_BY} ${Array.isArray(threshold.field) ? threshold.field.join(',') : threshold.field} >= ${threshold.value}`);
const AnomalyThreshold = ({
  anomalyThreshold
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
  size: "s",
  "data-test-subj": "anomalyThresholdPropertyValue"
}, anomalyThreshold);
const MachineLearningJobList = ({
  jobIds,
  isInteractive
}) => {
  const {
    jobs
  } = (0, _use_security_jobs.useSecurityJobs)();
  if (isInteractive) {
    return /*#__PURE__*/_react.default.createElement(_ml_jobs_description.MlJobsDescription, {
      jobIds: jobIds
    });
  }
  const relevantJobs = jobs.filter(job => jobIds.includes(job.id));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, relevantJobs.map(job => {
    var _job$customSettings;
    return /*#__PURE__*/_react.default.createElement(_ml_job_link.MlJobLink, {
      key: job.id,
      jobId: job.id,
      jobName: (_job$customSettings = job.customSettings) === null || _job$customSettings === void 0 ? void 0 : _job$customSettings.security_app_display_name
    });
  }));
};
const getRuleTypeDescription = ruleType => {
  switch (ruleType) {
    case 'machine_learning':
      return descriptionStepI18n.ML_TYPE_DESCRIPTION;
    case 'query':
    case 'saved_query':
      return descriptionStepI18n.QUERY_TYPE_DESCRIPTION;
    case 'threshold':
      return descriptionStepI18n.THRESHOLD_TYPE_DESCRIPTION;
    case 'eql':
      return descriptionStepI18n.EQL_TYPE_DESCRIPTION;
    case 'esql':
      return /*#__PURE__*/_react.default.createElement(_technical_preview_badge.TechnicalPreviewBadge, {
        label: descriptionStepI18n.ESQL_TYPE_DESCRIPTION
      });
    case 'threat_match':
      return descriptionStepI18n.THREAT_MATCH_TYPE_DESCRIPTION;
    case 'new_terms':
      return descriptionStepI18n.NEW_TERMS_TYPE_DESCRIPTION;
    default:
      return (0, _utility_types.assertUnreachable)(ruleType);
  }
};
const RuleType = ({
  type
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
  size: "s"
}, getRuleTypeDescription(type));
const StyledFieldTypeText = (0, _styledComponents.default)(_eui.EuiText)`
  font-size: ${({
  theme
}) => theme.eui.euiFontSizeXS};
  font-family: ${({
  theme
}) => theme.eui.euiCodeFontFamily};
  display: inline;
`;
const RequiredFields = ({
  requiredFields
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGrid, {
  gutterSize: 's',
  "data-test-subj": "requiredFieldsPropertyValue"
}, requiredFields.map((rF, index) => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
  grow: false,
  key: rF.name
}, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
  alignItems: "center",
  gutterSize: 'xs'
}, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
  grow: false
}, /*#__PURE__*/_react.default.createElement(_reactField.FieldIcon, {
  "data-test-subj": "field-type-icon",
  type: (0, _fieldTypes.castEsToKbnFieldTypeName)(rF.type),
  label: rF.type
})), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
  grow: false
}, /*#__PURE__*/_react.default.createElement(StyledFieldTypeText, {
  grow: false,
  size: 's',
  "data-test-subj": "requiredFieldsPropertyValueItem"
}, ` ${rF.name}${index + 1 !== requiredFields.length ? ', ' : ''}`))))));
const TimelineTitle = ({
  timelineTitle
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
  size: "s",
  "data-test-subj": "timelineTemplatePropertyValue"
}, timelineTitle);
const ThreatIndex = ({
  threatIndex
}) => /*#__PURE__*/_react.default.createElement(_badge_list.BadgeList, {
  badges: threatIndex,
  "data-test-subj": "threatIndexPropertyValue"
});
const ThreatMapping = ({
  threatMapping
}) => {
  const description = threatMapping.reduce((accumThreatMaps, threatMap, threatMapIndex, {
    length: threatMappingLength
  }) => {
    const matches = threatMap.entries.reduce((accumItems, item, itemsIndex, {
      length: threatMapLength
    }) => {
      if (threatMapLength === 1) {
        return `${item.field} ${threatMatchI18n.MATCHES} ${item.value}`;
      } else if (itemsIndex === 0) {
        return `(${item.field} ${threatMatchI18n.MATCHES} ${item.value})`;
      } else {
        return `${accumItems} ${threatMatchI18n.AND} (${item.field} ${threatMatchI18n.MATCHES} ${item.value})`;
      }
    }, '');
    if (threatMappingLength === 1) {
      return `${matches}`;
    } else if (threatMapIndex === 0) {
      return `(${matches})`;
    } else {
      return `${accumThreatMaps} ${threatMatchI18n.OR} (${matches})`;
    }
  }, '');
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    "data-test-subj": "threatMappingPropertyValue"
  }, description);
};
const AlertSuppressionTitle = ({
  title
}) => {
  return /*#__PURE__*/_react.default.createElement(_alert_suppression_technical_preview_badge.AlertSuppressionTechnicalPreviewBadge, {
    label: title
  });
};
const SuppressAlertsByField = ({
  fields
}) => /*#__PURE__*/_react.default.createElement(_badge_list.BadgeList, {
  badges: fields,
  "data-test-subj": "alertSuppressionGroupByPropertyValue"
});
const SuppressAlertsDuration = ({
  duration
}) => {
  const durationDescription = duration ? `${duration.value}${duration.unit}` : descriptionStepI18n.ALERT_SUPPRESSION_PER_RULE_EXECUTION;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    "data-test-subj": "alertSuppressionDurationPropertyValue"
  }, durationDescription);
};
const MissingFieldsStrategy = ({
  missingFieldsStrategy
}) => {
  const missingFieldsDescription = missingFieldsStrategy === _rule_schema.AlertSuppressionMissingFieldsStrategyEnum.suppress ? descriptionStepI18n.ALERT_SUPPRESSION_SUPPRESS_ON_MISSING_FIELDS : descriptionStepI18n.ALERT_SUPPRESSION_DO_NOT_SUPPRESS_ON_MISSING_FIELDS;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    "data-test-subj": "alertSuppressionSuppressionFieldPropertyValue"
  }, missingFieldsDescription);
};
const NewTermsFields = ({
  newTermsFields
}) => /*#__PURE__*/_react.default.createElement(_badge_list.BadgeList, {
  badges: newTermsFields,
  "data-test-subj": "newTermsFieldsPropertyValue"
});
const HistoryWindowSize = ({
  historyWindowStart
}) => {
  const size = historyWindowStart ? (0, _helpers.convertHistoryStartToSize)(historyWindowStart) : '7d';
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    "data-test-subj": `newTermsWindowSizePropertyValue-${historyWindowStart}`
  }, size);
};

// eslint-disable-next-line complexity
const prepareDefinitionSectionListItems = (rule, isInteractive, savedQuery, experimentalFeatures) => {
  var _rule$filters;
  const definitionSectionListItems = [];
  if ('index' in rule && rule.index && rule.index.length > 0) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "indexPropertyTitle"
      }, i18n.INDEX_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(Index, {
        index: rule.index
      })
    });
  }
  if ('data_view_id' in rule && rule.data_view_id) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "dataViewIdPropertyTitle"
      }, i18n.DATA_VIEW_ID_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(DataViewId, {
        dataViewId: rule.data_view_id
      })
    }, {
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "dataViewIndexPatternPropertyTitle"
      }, i18n.DATA_VIEW_INDEX_PATTERN_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(DataViewIndexPattern, {
        dataViewId: rule.data_view_id
      })
    });
  }
  if (savedQuery) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "savedQueryNamePropertyTitle"
      }, descriptionStepI18n.SAVED_QUERY_NAME_LABEL),
      description: /*#__PURE__*/_react.default.createElement(SavedQueryName, {
        savedQueryName: savedQuery.attributes.title
      })
    });
    if (savedQuery.attributes.filters) {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "savedQueryFiltersPropertyTitle"
        }, descriptionStepI18n.SAVED_QUERY_FILTERS_LABEL),
        description: /*#__PURE__*/_react.default.createElement(Filters, {
          filters: savedQuery.attributes.filters,
          "data-test-subj": "savedQueryFiltersPropertyValue"
        })
      });
    }
    if (typeof savedQuery.attributes.query.query === 'string') {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "savedQueryContentPropertyTitle"
        }, descriptionStepI18n.SAVED_QUERY_LABEL),
        description: /*#__PURE__*/_react.default.createElement(Query, {
          query: savedQuery.attributes.query.query,
          "data-test-subj": "savedQueryContentPropertyValue"
        })
      });
    }
  }
  if ('filters' in rule && (_rule$filters = rule.filters) !== null && _rule$filters !== void 0 && _rule$filters.length) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "filtersPropertyTitle"
      }, descriptionStepI18n.FILTERS_LABEL),
      description: /*#__PURE__*/_react.default.createElement(Filters, {
        filters: rule.filters,
        dataViewId: rule.data_view_id,
        index: rule.index,
        "data-test-subj": "filtersPropertyValue"
      })
    });
  }
  if ('query' in rule && rule.query) {
    if (rule.type === 'eql') {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "eqlQueryPropertyTitle"
        }, descriptionStepI18n.EQL_QUERY_LABEL),
        description: /*#__PURE__*/_react.default.createElement(Query, {
          query: rule.query,
          "data-test-subj": "eqlQueryPropertyValue"
        })
      });
    } else if (rule.type === 'esql') {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "esqlQueryPropertyTitle"
        }, descriptionStepI18n.ESQL_QUERY_LABEL),
        description: /*#__PURE__*/_react.default.createElement(Query, {
          query: rule.query,
          "data-test-subj": "esqlQueryPropertyValue"
        })
      });
    } else {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "customQueryPropertyTitle"
        }, descriptionStepI18n.QUERY_LABEL),
        description: /*#__PURE__*/_react.default.createElement(Query, {
          query: rule.query,
          "data-test-subj": "customQueryPropertyValue"
        })
      });
    }
  }
  if (rule.type) {
    definitionSectionListItems.push({
      title: i18n.RULE_TYPE_FIELD_LABEL,
      description: /*#__PURE__*/_react.default.createElement(RuleType, {
        type: rule.type
      })
    });
  }
  if ('anomaly_threshold' in rule && rule.anomaly_threshold) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "anomalyThresholdPropertyTitle"
      }, i18n.ANOMALY_THRESHOLD_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(AnomalyThreshold, {
        anomalyThreshold: rule.anomaly_threshold
      })
    });
  }
  if ('machine_learning_job_id' in rule) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "mlJobPropertyTitle"
      }, i18n.MACHINE_LEARNING_JOB_ID_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(MachineLearningJobList, {
        jobIds: rule.machine_learning_job_id,
        isInteractive: isInteractive
      })
    });
  }
  if (rule.related_integrations && rule.related_integrations.length > 0) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "relatedIntegrationsPropertyTitle"
      }, i18n.RELATED_INTEGRATIONS_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(_integrations_description.RelatedIntegrationsDescription, {
        relatedIntegrations: rule.related_integrations,
        dataTestSubj: "relatedIntegrationsPropertyValue"
      })
    });
  }
  if (rule.required_fields && rule.required_fields.length > 0) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "requiredFieldsPropertyTitle"
      }, i18n.REQUIRED_FIELDS_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(RequiredFields, {
        requiredFields: rule.required_fields
      })
    });
  }
  definitionSectionListItems.push({
    title: /*#__PURE__*/_react.default.createElement("span", {
      "data-test-subj": "timelineTemplatePropertyTitle"
    }, i18n.TIMELINE_TITLE_FIELD_LABEL),
    description: /*#__PURE__*/_react.default.createElement(TimelineTitle, {
      timelineTitle: rule.timeline_title || timelinesI18n.DEFAULT_TIMELINE_TITLE
    })
  });
  if ('threshold' in rule && rule.threshold) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "thresholdPropertyTitle"
      }, i18n.THRESHOLD_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(Threshold, {
        threshold: rule.threshold
      })
    });
  }
  if ('threat_index' in rule && rule.threat_index) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "threatIndexPropertyTitle"
      }, i18n.THREAT_INDEX_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(ThreatIndex, {
        threatIndex: rule.threat_index
      })
    });
  }
  if ('threat_mapping' in rule && rule.threat_mapping) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "threatMappingPropertyTitle"
      }, i18n.THREAT_MAPPING_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(ThreatMapping, {
        threatMapping: rule.threat_mapping
      })
    });
  }
  if ('threat_filters' in rule && rule.threat_filters && rule.threat_filters.length > 0) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "threatFiltersPropertyTitle"
      }, i18n.THREAT_FILTERS_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(Filters, {
        filters: rule.threat_filters,
        dataViewId: rule.data_view_id,
        index: rule.index,
        "data-test-subj": "threatFiltersPropertyValue"
      })
    });
  }
  if ('threat_query' in rule && rule.threat_query) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "threatQueryPropertyTitle"
      }, descriptionStepI18n.THREAT_QUERY_LABEL),
      description: /*#__PURE__*/_react.default.createElement(Query, {
        query: rule.threat_query,
        "data-test-subj": "threatQueryPropertyValue"
      })
    });
  }
  if ('alert_suppression' in rule && rule.alert_suppression) {
    if ('group_by' in rule.alert_suppression) {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "alertSuppressionGroupByPropertyTitle"
        }, /*#__PURE__*/_react.default.createElement(AlertSuppressionTitle, {
          title: i18n.SUPPRESS_ALERTS_BY_FIELD_LABEL
        })),
        description: /*#__PURE__*/_react.default.createElement(SuppressAlertsByField, {
          fields: rule.alert_suppression.group_by
        })
      });
    }
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "alertSuppressionDurationPropertyTitle"
      }, /*#__PURE__*/_react.default.createElement(AlertSuppressionTitle, {
        title: i18n.SUPPRESS_ALERTS_DURATION_FIELD_LABEL
      })),
      description: /*#__PURE__*/_react.default.createElement(SuppressAlertsDuration, {
        duration: rule.alert_suppression.duration
      })
    });
    if ('missing_fields_strategy' in rule.alert_suppression) {
      definitionSectionListItems.push({
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "alertSuppressionSuppressionFieldPropertyTitle"
        }, /*#__PURE__*/_react.default.createElement(AlertSuppressionTitle, {
          title: i18n.SUPPRESSION_FIELD_MISSING_FIELD_LABEL
        })),
        description: /*#__PURE__*/_react.default.createElement(MissingFieldsStrategy, {
          missingFieldsStrategy: rule.alert_suppression.missing_fields_strategy
        })
      });
    }
  }
  if ('new_terms_fields' in rule && rule.new_terms_fields && rule.new_terms_fields.length > 0) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "newTermsFieldsPropertyTitle"
      }, i18n.NEW_TERMS_FIELDS_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(NewTermsFields, {
        newTermsFields: rule.new_terms_fields
      })
    });
  }
  if ('history_window_start' in rule) {
    definitionSectionListItems.push({
      title: /*#__PURE__*/_react.default.createElement("span", {
        "data-test-subj": "newTermsWindowSizePropertyTitle"
      }, i18n.HISTORY_WINDOW_SIZE_FIELD_LABEL),
      description: /*#__PURE__*/_react.default.createElement(HistoryWindowSize, {
        historyWindowStart: rule.history_window_start
      })
    });
  }
  return definitionSectionListItems;
};
const RuleDefinitionSection = ({
  rule,
  isInteractive = false,
  columnWidths = _constants.DEFAULT_DESCRIPTION_LIST_COLUMN_WIDTHS,
  dataTestSubj,
  ...descriptionListProps
}) => {
  var _descriptionListProps, _descriptionListProps2;
  const {
    savedQuery
  } = (0, _use_get_saved_query.useGetSavedQuery)({
    savedQueryId: rule.type === 'saved_query' ? rule.saved_id : '',
    ruleType: rule.type
  });
  const definitionSectionListItems = prepareDefinitionSectionListItems(rule, isInteractive, savedQuery);
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-test-subj": dataTestSubj
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionList, (0, _extends2.default)({
    type: (_descriptionListProps = descriptionListProps.type) !== null && _descriptionListProps !== void 0 ? _descriptionListProps : 'column',
    rowGutterSize: (_descriptionListProps2 = descriptionListProps.rowGutterSize) !== null && _descriptionListProps2 !== void 0 ? _descriptionListProps2 : 'm',
    listItems: definitionSectionListItems,
    columnWidths: columnWidths,
    "data-test-subj": "listItemColumnStepRuleDescription"
  }, descriptionListProps)));
};
exports.RuleDefinitionSection = RuleDefinitionSection;