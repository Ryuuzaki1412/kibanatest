"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONNECTOR_TYPES_FETCH_ERROR = exports.CONNECTORS_FETCH_ERROR = exports.ACTIONS_FETCH_ERROR_DESCRIPTION = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const CONNECTORS_FETCH_ERROR = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleDetails.actions.connectorsFetchError', {
  defaultMessage: 'Failed to fetch connectors'
});
exports.CONNECTORS_FETCH_ERROR = CONNECTORS_FETCH_ERROR;
const CONNECTOR_TYPES_FETCH_ERROR = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleDetails.actions.connectorTypesFetchError', {
  defaultMessage: 'Failed to fetch connector types'
});
exports.CONNECTOR_TYPES_FETCH_ERROR = CONNECTOR_TYPES_FETCH_ERROR;
const ACTIONS_FETCH_ERROR_DESCRIPTION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleDetails.actions.actionsFetchErrorDescription', {
  defaultMessage: 'Viewing actions is not available'
});
exports.ACTIONS_FETCH_ERROR_DESCRIPTION = ACTIONS_FETCH_ERROR_DESCRIPTION;