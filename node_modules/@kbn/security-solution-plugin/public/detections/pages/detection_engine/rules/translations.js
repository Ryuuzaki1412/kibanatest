"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NO_RULES_AVAILABLE_FOR_INSTALL = exports.NO_RULES = exports.MONITORING_TAB = exports.LACK_OF_KIBANA_SECURITY_PRIVILEGES = exports.LACK_OF_KIBANA_ACTIONS_FEATURE_PRIVILEGES = exports.INSTALL_RULE_BUTTON = exports.INITIAL_PROMPT_TEXT = exports.IMPORT_VALUE_LISTS = exports.IMPORT_RULE_BTN_TITLE = exports.IMPORT_RULE = exports.IMPORT_FAILED_DETAILED = exports.IMPORT_FAILED = exports.GO_BACK_TO_RULES_TABLE_BUTTON = exports.EXPORT_RULE = exports.EXPORT_FILENAME = exports.EXPLAIN_THEN_SUMMARIZE_RULE_DETAILS = exports.ENABLED_RULES = exports.ELASTIC_RULES = exports.EDIT_RULE_SETTINGS = exports.EDIT_PAGE_TITLE = exports.DUPLICATE_RULE = exports.DISABLED_RULES = exports.DETECTION_RULES_CONVERSATION_ID = exports.DELETE_RULE = exports.DELETE_CONFIRMATION_CONFIRM = exports.DELETE_CONFIRMATION_CANCEL = exports.DELETE = exports.DEFINITION = exports.DEFINE_RULE = exports.CUSTOM_RULES = exports.CONTINUE = exports.COLUMN_TAGS = exports.COLUMN_SNOOZE = exports.COLUMN_SEVERITY = exports.COLUMN_RULE = exports.COLUMN_RISK_SCORE = exports.COLUMN_QUERY_TIMES_TOOLTIP = exports.COLUMN_QUERY_TIMES = exports.COLUMN_LAST_UPDATE = exports.COLUMN_LAST_RESPONSE = exports.COLUMN_LAST_COMPLETE_RUN = exports.COLUMN_INDEXING_TIMES_TOOLTIP = exports.COLUMN_INDEXING_TIMES = exports.COLUMN_GAP_TOOLTIP_SEE_DOCUMENTATION = exports.COLUMN_GAP = exports.COLUMN_ENABLE = exports.CLEAR_SELECTION = exports.CLEAR_RULES_TABLE_FILTERS = exports.CANCEL_BUTTON_LABEL = exports.BULK_EXPORT_CONFIRMATION_REJECTED_TITLE = exports.BULK_EXPORT_CONFIRMATION_CONFIRM = exports.BULK_EDIT_WARNING_TOAST_TITLE = exports.BULK_EDIT_WARNING_TOAST_NOTIFY = exports.BULK_EDIT_WARNING_TOAST_DESCRIPTION = exports.BULK_EDIT_FLYOUT_FORM_TAGS_REQUIRED_ERROR = exports.BULK_EDIT_FLYOUT_FORM_SAVE = exports.BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_TITLE = exports.BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_LABEL = exports.BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_HELP_TEXT = exports.BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_TITLE = exports.BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_LABEL = exports.BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_HELP_TEXT = exports.BULK_EDIT_FLYOUT_FORM_DATA_VIEWS_OVERWRITE_LABEL = exports.BULK_EDIT_FLYOUT_FORM_CANCEL = exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_TITLE = exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_OVERWRITE_LABEL = exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_LABEL = exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_HELP_TEXT = exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_TITLE = exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_REQUIRED_ERROR = exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_OVERWRITE_LABEL = exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_LABEL = exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_HELP_TEXT = exports.BULK_EDIT_CONFIRMATION_REJECTED_TITLE = exports.BULK_EDIT_CONFIRMATION_CONFIRM = exports.BULK_EDIT_CONFIRMATION_CANCEL = exports.BULK_DELETE_CONFIRMATION_TITLE = exports.BULK_ACTION_TAGS = exports.BULK_ACTION_SET_SCHEDULE = exports.BULK_ACTION_MENU_TITLE = exports.BULK_ACTION_INDEX_PATTERNS = exports.BULK_ACTION_EXPORT = exports.BULK_ACTION_ENABLE = exports.BULK_ACTION_DUPLICATE = exports.BULK_ACTION_DISABLE = exports.BULK_ACTION_DELETE_TAGS = exports.BULK_ACTION_DELETE_INDEX_PATTERNS = exports.BULK_ACTION_DELETE = exports.BULK_ACTION_CONFIRMATION_PARTLY_TITLE = exports.BULK_ACTION_CONFIRMATION_CLOSE = exports.BULK_ACTION_APPLY_TIMELINE_TEMPLATE = exports.BULK_ACTION_ADD_TAGS = exports.BULK_ACTION_ADD_RULE_ACTIONS = exports.BULK_ACTION_ADD_INDEX_PATTERNS = exports.BATCH_ACTIONS = exports.ADD_PAGE_TITLE = exports.ADD_NEW_RULE = exports.ACTIONS = exports.ABOUT_RULE = exports.ABOUT = void 0;
exports.UPLOAD_VALUE_LISTS_TOOLTIP = exports.UPLOAD_VALUE_LISTS_PRIVILEGES_TOOLTIP = exports.UPDATE_RULE_BUTTON = exports.UPDATE = exports.TAGS = exports.SUCCESSFULLY_IMPORTED_RULES = exports.SINGLE_DELETE_CONFIRMATION_TITLE = exports.SHOWING_RULES = exports.SELECT_RULE = exports.SELECT_ALL_RULES = exports.SELECTED_RULES = exports.SEARCH_TAGS = exports.SEARCH_RULES = exports.SEARCH_PLACEHOLDER = exports.SCHEDULE_RULE = exports.SCHEDULE = exports.SAVED_QUERY_LOAD_ERROR_TOAST = exports.RULE_UPDATES_DOCUMENTATION_LINK = exports.RULE_MANAGEMENT_CONTEXT_TOOLTIP = exports.RULE_MANAGEMENT_CONTEXT_DESCRIPTION = exports.RULE_EXECTION_STATUS_FILTER = exports.RULE_ACTIONS = exports.RULES_TAG_SEARCH = exports.RULES_TAB = exports.RULES_BULK_EXPORT_SUCCESS_DESCRIPTION = exports.RULES_BULK_EXPORT_SUCCESS = exports.RULES_BULK_EXPORT_PREBUILT_RULES_EXCLUDED_DESCRIPTION = exports.RULES_BULK_EXPORT_FAILURE_DESCRIPTION = exports.RULES_BULK_EXPORT_FAILURE = exports.RULES_BULK_ENABLE_SUCCESS_DESCRIPTION = exports.RULES_BULK_ENABLE_SUCCESS = exports.RULES_BULK_ENABLE_FAILURE_DESCRIPTION = exports.RULES_BULK_ENABLE_FAILURE = exports.RULES_BULK_EDIT_SUCCESS_DESCRIPTION = exports.RULES_BULK_EDIT_SUCCESS_DATA_VIEW_RULES_SKIPPED_DETAIL = exports.RULES_BULK_EDIT_SUCCESS = exports.RULES_BULK_EDIT_FAILURE_DESCRIPTION = exports.RULES_BULK_EDIT_FAILURE = exports.RULES_BULK_DUPLICATE_SUCCESS_DESCRIPTION = exports.RULES_BULK_DUPLICATE_SUCCESS = exports.RULES_BULK_DUPLICATE_FAILURE_DESCRIPTION = exports.RULES_BULK_DUPLICATE_FAILURE = exports.RULES_BULK_DISABLE_SUCCESS_DESCRIPTION = exports.RULES_BULK_DISABLE_SUCCESS = exports.RULES_BULK_DISABLE_FAILURE_DESCRIPTION = exports.RULES_BULK_DISABLE_FAILURE = exports.RULES_BULK_DELETE_SUCCESS_DESCRIPTION = exports.RULES_BULK_DELETE_SUCCESS = exports.RULES_BULK_DELETE_FAILURE_DESCRIPTION = exports.RULES_BULK_DELETE_FAILURE = exports.REFRESH_RULE_POPOVER_LABEL = exports.REFRESH_RULE_POPOVER_DESCRIPTION = exports.REFRESH = exports.POPOVER_TOOLTIP_ARIA_LABEL = exports.PAGE_TITLE = exports.OVERWRITE_WITH_SAME_NAME = exports.OPTIONAL_FIELD = exports.NO_TAGS_AVAILABLE = exports.NO_RULES_BODY = exports.NO_RULES_AVAILABLE_FOR_UPGRADE_BODY = exports.NO_RULES_AVAILABLE_FOR_UPGRADE = exports.NO_RULES_AVAILABLE_FOR_INSTALL_BODY = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const POPOVER_TOOLTIP_ARIA_LABEL = columnName => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.popoverTooltip.ariaLabel', {
  defaultMessage: 'Tooltip for column: {columnName}',
  values: {
    columnName
  }
});
exports.POPOVER_TOOLTIP_ARIA_LABEL = POPOVER_TOOLTIP_ARIA_LABEL;
const IMPORT_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.importRuleTitle', {
  defaultMessage: 'Import rules'
});
exports.IMPORT_RULE = IMPORT_RULE;
const IMPORT_VALUE_LISTS = _i18n.i18n.translate('xpack.securitySolution.lists.detectionEngine.rules.importValueListsButton', {
  defaultMessage: 'Import value lists'
});
exports.IMPORT_VALUE_LISTS = IMPORT_VALUE_LISTS;
const UPLOAD_VALUE_LISTS_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.lists.detectionEngine.rules.uploadValueListsButtonTooltip', {
  defaultMessage: 'Use value lists to create an exception when a field value matches a value found in a list'
});
exports.UPLOAD_VALUE_LISTS_TOOLTIP = UPLOAD_VALUE_LISTS_TOOLTIP;
const UPLOAD_VALUE_LISTS_PRIVILEGES_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.lists.detectionEngine.rules.uploadValueListsButtonPrivilegesTooltip', {
  defaultMessage: 'A user with manage cluster privileges must visit the Rules page before you can import value lists.'
});
exports.UPLOAD_VALUE_LISTS_PRIVILEGES_TOOLTIP = UPLOAD_VALUE_LISTS_PRIVILEGES_TOOLTIP;
const ADD_NEW_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.addNewRuleTitle', {
  defaultMessage: 'Create new rule'
});
exports.ADD_NEW_RULE = ADD_NEW_RULE;
const PAGE_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.pageTitle', {
  defaultMessage: 'Rules'
});
exports.PAGE_TITLE = PAGE_TITLE;
const ADD_PAGE_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.addPageTitle', {
  defaultMessage: 'Create'
});
exports.ADD_PAGE_TITLE = ADD_PAGE_TITLE;
const EDIT_PAGE_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.editPageTitle', {
  defaultMessage: 'Edit'
});
exports.EDIT_PAGE_TITLE = EDIT_PAGE_TITLE;
const REFRESH = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.refreshTitle', {
  defaultMessage: 'Refresh'
});
exports.REFRESH = REFRESH;
const BATCH_ACTIONS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.batchActionsTitle', {
  defaultMessage: 'Bulk actions'
});
exports.BATCH_ACTIONS = BATCH_ACTIONS;
const BULK_ACTION_ENABLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.enableTitle', {
  defaultMessage: 'Enable'
});
exports.BULK_ACTION_ENABLE = BULK_ACTION_ENABLE;
const BULK_ACTION_DISABLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.disableTitle', {
  defaultMessage: 'Disable'
});
exports.BULK_ACTION_DISABLE = BULK_ACTION_DISABLE;
const BULK_ACTION_EXPORT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.exportTitle', {
  defaultMessage: 'Export'
});
exports.BULK_ACTION_EXPORT = BULK_ACTION_EXPORT;
const BULK_ACTION_DUPLICATE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.duplicateTitle', {
  defaultMessage: 'Duplicate'
});
exports.BULK_ACTION_DUPLICATE = BULK_ACTION_DUPLICATE;
const BULK_ACTION_DELETE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.deleteTitle', {
  defaultMessage: 'Delete'
});
exports.BULK_ACTION_DELETE = BULK_ACTION_DELETE;
const BULK_ACTION_INDEX_PATTERNS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.indexPatternsTitle', {
  defaultMessage: 'Index patterns'
});
exports.BULK_ACTION_INDEX_PATTERNS = BULK_ACTION_INDEX_PATTERNS;
const BULK_ACTION_TAGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.tagsTitle', {
  defaultMessage: 'Tags'
});
exports.BULK_ACTION_TAGS = BULK_ACTION_TAGS;
const BULK_ACTION_ADD_INDEX_PATTERNS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.addIndexPatternsTitle', {
  defaultMessage: 'Add index patterns'
});
exports.BULK_ACTION_ADD_INDEX_PATTERNS = BULK_ACTION_ADD_INDEX_PATTERNS;
const BULK_ACTION_DELETE_INDEX_PATTERNS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.deleteIndexPatternsTitle', {
  defaultMessage: 'Delete index patterns'
});
exports.BULK_ACTION_DELETE_INDEX_PATTERNS = BULK_ACTION_DELETE_INDEX_PATTERNS;
const BULK_ACTION_ADD_TAGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.addTagsTitle', {
  defaultMessage: 'Add tags'
});
exports.BULK_ACTION_ADD_TAGS = BULK_ACTION_ADD_TAGS;
const BULK_ACTION_DELETE_TAGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.deleteTagsTitle', {
  defaultMessage: 'Delete tags'
});
exports.BULK_ACTION_DELETE_TAGS = BULK_ACTION_DELETE_TAGS;
const BULK_ACTION_APPLY_TIMELINE_TEMPLATE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.applyTimelineTemplateTitle', {
  defaultMessage: 'Apply Timeline template'
});
exports.BULK_ACTION_APPLY_TIMELINE_TEMPLATE = BULK_ACTION_APPLY_TIMELINE_TEMPLATE;
const BULK_ACTION_ADD_RULE_ACTIONS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.addRuleActionsTitle', {
  defaultMessage: 'Add rule actions'
});
exports.BULK_ACTION_ADD_RULE_ACTIONS = BULK_ACTION_ADD_RULE_ACTIONS;
const BULK_ACTION_SET_SCHEDULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.setScheduleTitle', {
  defaultMessage: 'Update rule schedules'
});
exports.BULK_ACTION_SET_SCHEDULE = BULK_ACTION_SET_SCHEDULE;
const BULK_ACTION_MENU_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.contextMenuTitle', {
  defaultMessage: 'Options'
});
exports.BULK_ACTION_MENU_TITLE = BULK_ACTION_MENU_TITLE;
const BULK_EDIT_WARNING_TOAST_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.bulkEditWarningToastTitle', {
  defaultMessage: 'Rules updates are in progress'
});
exports.BULK_EDIT_WARNING_TOAST_TITLE = BULK_EDIT_WARNING_TOAST_TITLE;
const BULK_EDIT_WARNING_TOAST_DESCRIPTION = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.bulkEditWarningToastDescription', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule is} other {# rules are}} updating.'
});
exports.BULK_EDIT_WARNING_TOAST_DESCRIPTION = BULK_EDIT_WARNING_TOAST_DESCRIPTION;
const BULK_EDIT_WARNING_TOAST_NOTIFY = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.bulkEditWarningToastNotifyButtonLabel', {
  defaultMessage: `Notify me when done`
});
exports.BULK_EDIT_WARNING_TOAST_NOTIFY = BULK_EDIT_WARNING_TOAST_NOTIFY;
const BULK_EXPORT_CONFIRMATION_REJECTED_TITLE = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.bulkExportConfirmationDeniedTitle', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule} other {# rules}} cannot be exported'
});
exports.BULK_EXPORT_CONFIRMATION_REJECTED_TITLE = BULK_EXPORT_CONFIRMATION_REJECTED_TITLE;
const BULK_EDIT_CONFIRMATION_REJECTED_TITLE = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.bulkEditConfirmationDeniedTitle', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule} other {# rules}} cannot be edited'
});
exports.BULK_EDIT_CONFIRMATION_REJECTED_TITLE = BULK_EDIT_CONFIRMATION_REJECTED_TITLE;
const BULK_ACTION_CONFIRMATION_PARTLY_TITLE = customRulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.bulkActionConfirmationPartlyTitle', {
  values: {
    customRulesCount
  },
  defaultMessage: 'This action can only be applied to {customRulesCount, plural, =1 {# custom rule} other {# custom rules}}'
});
exports.BULK_ACTION_CONFIRMATION_PARTLY_TITLE = BULK_ACTION_CONFIRMATION_PARTLY_TITLE;
const BULK_EDIT_CONFIRMATION_CANCEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditConfirmationCancelButtonLabel', {
  defaultMessage: 'Cancel'
});
exports.BULK_EDIT_CONFIRMATION_CANCEL = BULK_EDIT_CONFIRMATION_CANCEL;
const BULK_ACTION_CONFIRMATION_CLOSE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkActionConfirmationCloseButtonLabel', {
  defaultMessage: 'Close'
});
exports.BULK_ACTION_CONFIRMATION_CLOSE = BULK_ACTION_CONFIRMATION_CLOSE;
const BULK_EDIT_CONFIRMATION_CONFIRM = customRulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditConfirmation.confirmButtonLabel', {
  values: {
    customRulesCount
  },
  defaultMessage: 'Edit {customRulesCount, plural, =1 {# custom rule} other {# custom rules}}'
});
exports.BULK_EDIT_CONFIRMATION_CONFIRM = BULK_EDIT_CONFIRMATION_CONFIRM;
const BULK_EXPORT_CONFIRMATION_CONFIRM = customRulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkExportConfirmation.confirmButtonLabel', {
  values: {
    customRulesCount
  },
  defaultMessage: 'Export {customRulesCount, plural, =1 {# custom rule} other {# custom rules}}'
});
exports.BULK_EXPORT_CONFIRMATION_CONFIRM = BULK_EXPORT_CONFIRMATION_CONFIRM;
const BULK_EDIT_FLYOUT_FORM_SAVE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.saveButtonLabel', {
  defaultMessage: 'Save'
});
exports.BULK_EDIT_FLYOUT_FORM_SAVE = BULK_EDIT_FLYOUT_FORM_SAVE;
const BULK_EDIT_FLYOUT_FORM_CANCEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.cancelButtonLabel', {
  defaultMessage: 'Cancel'
});
exports.BULK_EDIT_FLYOUT_FORM_CANCEL = BULK_EDIT_FLYOUT_FORM_CANCEL;
const BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_HELP_TEXT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addIndexPatternsComboboxHelpText', {
  defaultMessage: 'Enter the pattern of Elasticsearch indices that you would like to add. By default, the dropdown includes index patterns defined in Security Solution advanced settings.'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_HELP_TEXT = BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_HELP_TEXT;
const BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_HELP_TEXT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.deleteIndexPatternsComboboxHelpText', {
  defaultMessage: 'Enter the pattern of Elasticsearch indices that you would like to delete. By default, the dropdown includes index patterns defined in Security Solution advanced settings.'
});
exports.BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_HELP_TEXT = BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_HELP_TEXT;
const BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addIndexPatternsComboboxLabel', {
  defaultMessage: 'Add index patterns for selected rules'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_LABEL = BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_LABEL;
const BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_REQUIRED_ERROR = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.indexPatternsRequiredErrorMessage', {
  defaultMessage: 'A minimum of one index pattern is required.'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_REQUIRED_ERROR = BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_REQUIRED_ERROR;
const BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addIndexPatternsTitle', {
  defaultMessage: 'Add index patterns'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_TITLE = BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_TITLE;
const BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_OVERWRITE_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addIndexPatternsOverwriteCheckboxLabel', {
  defaultMessage: "Overwrite all selected rules' index patterns"
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_OVERWRITE_LABEL = BULK_EDIT_FLYOUT_FORM_ADD_INDEX_PATTERNS_OVERWRITE_LABEL;
const BULK_EDIT_FLYOUT_FORM_DATA_VIEWS_OVERWRITE_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.dataViewsOverwriteCheckboxLabel', {
  defaultMessage: 'Apply changes to rules configured with data views'
});
exports.BULK_EDIT_FLYOUT_FORM_DATA_VIEWS_OVERWRITE_LABEL = BULK_EDIT_FLYOUT_FORM_DATA_VIEWS_OVERWRITE_LABEL;
const BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.deleteIndexPatternsComboboxLabel', {
  defaultMessage: 'Delete index patterns for selected rules'
});
exports.BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_LABEL = BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_LABEL;
const BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.deleteIndexPatternsTitle', {
  defaultMessage: 'Delete index patterns'
});
exports.BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_TITLE = BULK_EDIT_FLYOUT_FORM_DELETE_INDEX_PATTERNS_TITLE;
const BULK_EDIT_FLYOUT_FORM_ADD_TAGS_HELP_TEXT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addTagsComboboxHelpText', {
  defaultMessage: 'Add one or more tags for selected rules from the dropdown. You can also enter custom identifying tags and press Enter to begin a new one.'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_HELP_TEXT = BULK_EDIT_FLYOUT_FORM_ADD_TAGS_HELP_TEXT;
const BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_HELP_TEXT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.deleteTagsComboboxHelpText', {
  defaultMessage: 'Delete one or more tags for selected rules from the dropdown. You can also enter custom identifying tags and press Enter to begin a new one.'
});
exports.BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_HELP_TEXT = BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_HELP_TEXT;
const BULK_EDIT_FLYOUT_FORM_ADD_TAGS_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addTagsComboboxLabel', {
  defaultMessage: 'Add tags for selected rules'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_LABEL = BULK_EDIT_FLYOUT_FORM_ADD_TAGS_LABEL;
const BULK_EDIT_FLYOUT_FORM_TAGS_REQUIRED_ERROR = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.tagsComoboxRequiredErrorMessage', {
  defaultMessage: 'A minimum of one tag is required.'
});
exports.BULK_EDIT_FLYOUT_FORM_TAGS_REQUIRED_ERROR = BULK_EDIT_FLYOUT_FORM_TAGS_REQUIRED_ERROR;
const BULK_EDIT_FLYOUT_FORM_ADD_TAGS_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addTagsTitle', {
  defaultMessage: 'Add tags'
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_TITLE = BULK_EDIT_FLYOUT_FORM_ADD_TAGS_TITLE;
const BULK_EDIT_FLYOUT_FORM_ADD_TAGS_OVERWRITE_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.addTagsOverwriteCheckboxLabel', {
  defaultMessage: "Overwrite all selected rules' tags"
});
exports.BULK_EDIT_FLYOUT_FORM_ADD_TAGS_OVERWRITE_LABEL = BULK_EDIT_FLYOUT_FORM_ADD_TAGS_OVERWRITE_LABEL;
const BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.deleteTagsComboboxLabel', {
  defaultMessage: 'Delete tags for selected rules'
});
exports.BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_LABEL = BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_LABEL;
const BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkActions.bulkEditFlyoutForm.deleteTagsTitle', {
  defaultMessage: 'Delete tags'
});
exports.BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_TITLE = BULK_EDIT_FLYOUT_FORM_DELETE_TAGS_TITLE;
const EXPORT_FILENAME = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.exportFilenameTitle', {
  defaultMessage: 'rules_export'
});
exports.EXPORT_FILENAME = EXPORT_FILENAME;
const SEARCH_RULES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.searchAriaLabel', {
  defaultMessage: 'Search rules'
});
exports.SEARCH_RULES = SEARCH_RULES;
const SEARCH_PLACEHOLDER = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.searchPlaceholder', {
  defaultMessage: 'Rule name, index pattern (e.g., "filebeat-*"), or MITRE ATT&CK™ tactic or technique (e.g., "Defense Evasion" or "TA0005")'
});
exports.SEARCH_PLACEHOLDER = SEARCH_PLACEHOLDER;
const SHOWING_RULES = (firstInPage, lastOfPage, totalRules) => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.showingRulesTitle', {
  values: {
    firstInPage,
    lastOfPage,
    totalRules
  },
  defaultMessage: 'Showing {firstInPage}-{lastOfPage} of {totalRules} {totalRules, plural, =1 {rule} other {rules}}'
});
exports.SHOWING_RULES = SHOWING_RULES;
const SELECT_ALL_RULES = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.selectAllRulesTitle', {
  values: {
    totalRules
  },
  defaultMessage: 'Select all {totalRules} {totalRules, plural, =1 {rule} other {rules}}'
});
exports.SELECT_ALL_RULES = SELECT_ALL_RULES;
const CLEAR_SELECTION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.clearSelectionTitle', {
  defaultMessage: 'Clear selection'
});
exports.CLEAR_SELECTION = CLEAR_SELECTION;
const SELECTED_RULES = selectedRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.selectedRulesTitle', {
  values: {
    selectedRules
  },
  defaultMessage: 'Selected {selectedRules} {selectedRules, plural, =1 {rule} other {rules}}'
});
exports.SELECTED_RULES = SELECTED_RULES;
const EDIT_RULE_SETTINGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.actions.editRuleSettingsDescription', {
  defaultMessage: 'Edit rule settings'
});
exports.EDIT_RULE_SETTINGS = EDIT_RULE_SETTINGS;
const LACK_OF_KIBANA_ACTIONS_FEATURE_PRIVILEGES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.actions.lackOfKibanaActionsFeaturePrivileges', {
  defaultMessage: 'You do not have Kibana Actions privileges'
});
exports.LACK_OF_KIBANA_ACTIONS_FEATURE_PRIVILEGES = LACK_OF_KIBANA_ACTIONS_FEATURE_PRIVILEGES;
const LACK_OF_KIBANA_SECURITY_PRIVILEGES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.actions.lackOfKibanaSecurityPrivileges', {
  defaultMessage: 'You do not have Kibana Security privileges'
});
exports.LACK_OF_KIBANA_SECURITY_PRIVILEGES = LACK_OF_KIBANA_SECURITY_PRIVILEGES;
const DUPLICATE_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.actions.duplicateRuleDescription', {
  defaultMessage: 'Duplicate rule'
});
exports.DUPLICATE_RULE = DUPLICATE_RULE;
const EXPORT_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.actions.exportRuleDescription', {
  defaultMessage: 'Export rule'
});
exports.EXPORT_RULE = EXPORT_RULE;
const DELETE_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.actions.deleteRuleDescription', {
  defaultMessage: 'Delete rule'
});
exports.DELETE_RULE = DELETE_RULE;
const COLUMN_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.ruleTitle', {
  defaultMessage: 'Rule'
});
exports.COLUMN_RULE = COLUMN_RULE;
const COLUMN_RISK_SCORE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.riskScoreTitle', {
  defaultMessage: 'Risk score'
});
exports.COLUMN_RISK_SCORE = COLUMN_RISK_SCORE;
const COLUMN_SEVERITY = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.severityTitle', {
  defaultMessage: 'Severity'
});
exports.COLUMN_SEVERITY = COLUMN_SEVERITY;
const COLUMN_LAST_COMPLETE_RUN = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.lastRunTitle', {
  defaultMessage: 'Last run'
});
exports.COLUMN_LAST_COMPLETE_RUN = COLUMN_LAST_COMPLETE_RUN;
const COLUMN_LAST_UPDATE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.lastUpdateTitle', {
  defaultMessage: 'Last updated'
});
exports.COLUMN_LAST_UPDATE = COLUMN_LAST_UPDATE;
const COLUMN_LAST_RESPONSE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.lastResponseTitle', {
  defaultMessage: 'Last response'
});
exports.COLUMN_LAST_RESPONSE = COLUMN_LAST_RESPONSE;
const COLUMN_TAGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.tagsTitle', {
  defaultMessage: 'Tags'
});
exports.COLUMN_TAGS = COLUMN_TAGS;
const COLUMN_ENABLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.enabledTitle', {
  defaultMessage: 'Enabled'
});
exports.COLUMN_ENABLE = COLUMN_ENABLE;
const COLUMN_SNOOZE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.snoozeTitle', {
  defaultMessage: 'Notify'
});
exports.COLUMN_SNOOZE = COLUMN_SNOOZE;
const COLUMN_INDEXING_TIMES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.indexingTimes', {
  defaultMessage: 'Indexing Time (ms)'
});
exports.COLUMN_INDEXING_TIMES = COLUMN_INDEXING_TIMES;
const COLUMN_INDEXING_TIMES_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.indexingTimesTooltip', {
  defaultMessage: 'Total time spent indexing alerts during last Rule execution'
});
exports.COLUMN_INDEXING_TIMES_TOOLTIP = COLUMN_INDEXING_TIMES_TOOLTIP;
const COLUMN_QUERY_TIMES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.queryTimes', {
  defaultMessage: 'Query Time (ms)'
});
exports.COLUMN_QUERY_TIMES = COLUMN_QUERY_TIMES;
const COLUMN_QUERY_TIMES_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.queryTimesTooltip', {
  defaultMessage: 'Total time spent querying source indices during last Rule execution'
});
exports.COLUMN_QUERY_TIMES_TOOLTIP = COLUMN_QUERY_TIMES_TOOLTIP;
const COLUMN_GAP = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.gap', {
  defaultMessage: 'Last Gap (if any)'
});
exports.COLUMN_GAP = COLUMN_GAP;
const COLUMN_GAP_TOOLTIP_SEE_DOCUMENTATION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.columns.gapTooltipSeeDocsDescription', {
  defaultMessage: 'see documentation'
});
exports.COLUMN_GAP_TOOLTIP_SEE_DOCUMENTATION = COLUMN_GAP_TOOLTIP_SEE_DOCUMENTATION;
const RULES_TAB = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.tabs.rules', {
  defaultMessage: 'Rules'
});
exports.RULES_TAB = RULES_TAB;
const MONITORING_TAB = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.tabs.monitoring', {
  defaultMessage: 'Rule Monitoring'
});
exports.MONITORING_TAB = MONITORING_TAB;
const ENABLED_RULES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.enabledRulesTitle', {
  defaultMessage: 'Enabled rules'
});
exports.ENABLED_RULES = ENABLED_RULES;
const DISABLED_RULES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.disabledRulesTitle', {
  defaultMessage: 'Disabled rules'
});
exports.DISABLED_RULES = DISABLED_RULES;
const CUSTOM_RULES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.customRulesTitle', {
  defaultMessage: 'Custom rules'
});
exports.CUSTOM_RULES = CUSTOM_RULES;
const ELASTIC_RULES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.elasticRulesTitle', {
  defaultMessage: 'Elastic rules'
});
exports.ELASTIC_RULES = ELASTIC_RULES;
const TAGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.tagsLabel', {
  defaultMessage: 'Tags'
});
exports.TAGS = TAGS;
const SEARCH_TAGS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.searchTagsPlaceholder', {
  defaultMessage: 'Search tags'
});
exports.SEARCH_TAGS = SEARCH_TAGS;
const RULES_TAG_SEARCH = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.rulesTagSearchText', {
  defaultMessage: 'Rules tag search'
});
exports.RULES_TAG_SEARCH = RULES_TAG_SEARCH;
const NO_TAGS_AVAILABLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.noTagsAvailableDescription', {
  defaultMessage: 'No tags available'
});
exports.NO_TAGS_AVAILABLE = NO_TAGS_AVAILABLE;
const RULE_EXECTION_STATUS_FILTER = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.ruleExecutionStatusFilter', {
  defaultMessage: 'Select rule execution status to filter by'
});
exports.RULE_EXECTION_STATUS_FILTER = RULE_EXECTION_STATUS_FILTER;
const NO_RULES = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.noRulesTitle', {
  defaultMessage: 'No rules found'
});
exports.NO_RULES = NO_RULES;
const NO_RULES_BODY = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.filters.noRulesBodyTitle', {
  defaultMessage: "We weren't able to find any rules with the above filters."
});
exports.NO_RULES_BODY = NO_RULES_BODY;
const NO_RULES_AVAILABLE_FOR_INSTALL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.addRules.noRulesTitle', {
  defaultMessage: 'All Elastic rules have been installed'
});
exports.NO_RULES_AVAILABLE_FOR_INSTALL = NO_RULES_AVAILABLE_FOR_INSTALL;
const NO_RULES_AVAILABLE_FOR_INSTALL_BODY = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.addRules.noRulesBodyTitle', {
  defaultMessage: 'There are no prebuilt detection rules available for installation'
});
exports.NO_RULES_AVAILABLE_FOR_INSTALL_BODY = NO_RULES_AVAILABLE_FOR_INSTALL_BODY;
const NO_RULES_AVAILABLE_FOR_UPGRADE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.upgradeRules.noRulesTitle', {
  defaultMessage: 'All Elastic rules are up to date'
});
exports.NO_RULES_AVAILABLE_FOR_UPGRADE = NO_RULES_AVAILABLE_FOR_UPGRADE;
const NO_RULES_AVAILABLE_FOR_UPGRADE_BODY = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.upgradeRules.noRulesBodyTitle', {
  defaultMessage: 'There are currently no available updates to your installed Elastic rules.'
});
exports.NO_RULES_AVAILABLE_FOR_UPGRADE_BODY = NO_RULES_AVAILABLE_FOR_UPGRADE_BODY;
const DEFINE_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.defineRuleTitle', {
  defaultMessage: 'Define rule'
});
exports.DEFINE_RULE = DEFINE_RULE;
const ABOUT_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.aboutRuleTitle', {
  defaultMessage: 'About rule'
});
exports.ABOUT_RULE = ABOUT_RULE;
const SCHEDULE_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.scheduleRuleTitle', {
  defaultMessage: 'Schedule rule'
});
exports.SCHEDULE_RULE = SCHEDULE_RULE;
const RULE_ACTIONS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.ruleActionsTitle', {
  defaultMessage: 'Rule actions'
});
exports.RULE_ACTIONS = RULE_ACTIONS;
const DEFINITION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.stepDefinitionTitle', {
  defaultMessage: 'Definition'
});
exports.DEFINITION = DEFINITION;
const ABOUT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.stepAboutTitle', {
  defaultMessage: 'About'
});
exports.ABOUT = ABOUT;
const SCHEDULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.stepScheduleTitle', {
  defaultMessage: 'Schedule'
});
exports.SCHEDULE = SCHEDULE;
const ACTIONS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.stepActionsTitle', {
  defaultMessage: 'Actions'
});
exports.ACTIONS = ACTIONS;
const OPTIONAL_FIELD = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.optionalFieldDescription', {
  defaultMessage: 'Optional'
});
exports.OPTIONAL_FIELD = OPTIONAL_FIELD;
const CONTINUE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.continueButtonTitle', {
  defaultMessage: 'Continue'
});
exports.CONTINUE = CONTINUE;
const UPDATE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.updateButtonTitle', {
  defaultMessage: 'Update'
});
exports.UPDATE = UPDATE;
const DELETE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.deleteDescription', {
  defaultMessage: 'Delete'
});
exports.DELETE = DELETE;
const IMPORT_RULE_BTN_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.importRuleTitle', {
  defaultMessage: 'Import'
});
exports.IMPORT_RULE_BTN_TITLE = IMPORT_RULE_BTN_TITLE;
const SELECT_RULE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.selectRuleDescription', {
  defaultMessage: 'Select rules to import. Associated rule actions and exceptions can be included.'
});
exports.SELECT_RULE = SELECT_RULE;
const INITIAL_PROMPT_TEXT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.initialPromptTextDescription', {
  defaultMessage: 'Select or drag and drop a valid rules_export.ndjson file'
});
exports.INITIAL_PROMPT_TEXT = INITIAL_PROMPT_TEXT;
const OVERWRITE_WITH_SAME_NAME = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.overwriteDescription', {
  defaultMessage: 'Overwrite existing detection rules with conflicting "rule_id"'
});
exports.OVERWRITE_WITH_SAME_NAME = OVERWRITE_WITH_SAME_NAME;
const SUCCESSFULLY_IMPORTED_RULES = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.successfullyImportedRulesTitle', {
  values: {
    totalRules
  },
  defaultMessage: 'Successfully imported {totalRules} {totalRules, plural, =1 {rule} other {rules}}'
});
exports.SUCCESSFULLY_IMPORTED_RULES = SUCCESSFULLY_IMPORTED_RULES;
const IMPORT_FAILED = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.importFailedTitle', {
  values: {
    totalRules
  },
  defaultMessage: 'Failed to import {totalRules} {totalRules, plural, =1 {rule} other {rules}}'
});
exports.IMPORT_FAILED = IMPORT_FAILED;
const IMPORT_FAILED_DETAILED = message => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.importRuleModal.importFailedDetailedTitle', {
  values: {
    message
  },
  defaultMessage: '{message}'
});
exports.IMPORT_FAILED_DETAILED = IMPORT_FAILED_DETAILED;
const BULK_DELETE_CONFIRMATION_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.bulkDeleteConfirmationTitle', {
  defaultMessage: 'Confirm bulk deletion'
});
exports.BULK_DELETE_CONFIRMATION_TITLE = BULK_DELETE_CONFIRMATION_TITLE;
const SINGLE_DELETE_CONFIRMATION_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.singleDeleteConfirmationTitle', {
  defaultMessage: 'Confirm deletion'
});
exports.SINGLE_DELETE_CONFIRMATION_TITLE = SINGLE_DELETE_CONFIRMATION_TITLE;
const DELETE_CONFIRMATION_CONFIRM = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.deleteConfirmationConfirm', {
  defaultMessage: 'Delete'
});
exports.DELETE_CONFIRMATION_CONFIRM = DELETE_CONFIRMATION_CONFIRM;
const DELETE_CONFIRMATION_CANCEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.components.allRules.deleteConfirmationCancel', {
  defaultMessage: 'Cancel'
});
exports.DELETE_CONFIRMATION_CANCEL = DELETE_CONFIRMATION_CANCEL;
const REFRESH_RULE_POPOVER_DESCRIPTION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.refreshRulePopoverDescription', {
  defaultMessage: 'Automatically refresh table'
});
exports.REFRESH_RULE_POPOVER_DESCRIPTION = REFRESH_RULE_POPOVER_DESCRIPTION;
const REFRESH_RULE_POPOVER_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.refreshRulePopoverLabel', {
  defaultMessage: 'Refresh settings'
});
exports.REFRESH_RULE_POPOVER_LABEL = REFRESH_RULE_POPOVER_LABEL;
const CLEAR_RULES_TABLE_FILTERS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.clearRulesTableFilters', {
  defaultMessage: 'Clear filters'
});

/**
 * Bulk Export
 */
exports.CLEAR_RULES_TABLE_FILTERS = CLEAR_RULES_TABLE_FILTERS;
const RULES_BULK_EXPORT_SUCCESS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.export.successToastTitle', {
  defaultMessage: 'Rules exported'
});
exports.RULES_BULK_EXPORT_SUCCESS = RULES_BULK_EXPORT_SUCCESS;
const RULES_BULK_EXPORT_SUCCESS_DESCRIPTION = (exportedRules, totalRules) => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.export.successToastDescription', {
  values: {
    totalRules,
    exportedRules
  },
  defaultMessage: 'Successfully exported {exportedRules} of {totalRules} {totalRules, plural, =1 {rule} other {rules}}.'
});
exports.RULES_BULK_EXPORT_SUCCESS_DESCRIPTION = RULES_BULK_EXPORT_SUCCESS_DESCRIPTION;
const RULES_BULK_EXPORT_PREBUILT_RULES_EXCLUDED_DESCRIPTION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.export.prebuiltRulesExcludedToastDescription', {
  defaultMessage: 'Prebuilt rules were excluded from the resulting file.'
});
exports.RULES_BULK_EXPORT_PREBUILT_RULES_EXCLUDED_DESCRIPTION = RULES_BULK_EXPORT_PREBUILT_RULES_EXCLUDED_DESCRIPTION;
const RULES_BULK_EXPORT_FAILURE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.export.errorToastTitle', {
  defaultMessage: 'Error exporting rules'
});
exports.RULES_BULK_EXPORT_FAILURE = RULES_BULK_EXPORT_FAILURE;
const RULES_BULK_EXPORT_FAILURE_DESCRIPTION = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.export.errorToastDescription', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule is} other {# rules are}} failed to export.'
});

/**
 * Bulk Duplicate
 */
exports.RULES_BULK_EXPORT_FAILURE_DESCRIPTION = RULES_BULK_EXPORT_FAILURE_DESCRIPTION;
const RULES_BULK_DUPLICATE_SUCCESS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.duplicate.successToastTitle', {
  defaultMessage: 'Rules duplicated'
});
exports.RULES_BULK_DUPLICATE_SUCCESS = RULES_BULK_DUPLICATE_SUCCESS;
const RULES_BULK_DUPLICATE_SUCCESS_DESCRIPTION = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.duplicate.successToastDescription', {
  values: {
    totalRules
  },
  defaultMessage: 'Successfully duplicated {totalRules, plural, =1 {{totalRules} rule} other {{totalRules} rules}}'
});
exports.RULES_BULK_DUPLICATE_SUCCESS_DESCRIPTION = RULES_BULK_DUPLICATE_SUCCESS_DESCRIPTION;
const RULES_BULK_DUPLICATE_FAILURE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.duplicate.errorToastTitle', {
  defaultMessage: 'Error duplicating rule'
});
exports.RULES_BULK_DUPLICATE_FAILURE = RULES_BULK_DUPLICATE_FAILURE;
const RULES_BULK_DUPLICATE_FAILURE_DESCRIPTION = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.duplicate.errorToastDescription', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule is} other {# rules are}} failed to duplicate.'
});

/**
 * Bulk Delete
 */
exports.RULES_BULK_DUPLICATE_FAILURE_DESCRIPTION = RULES_BULK_DUPLICATE_FAILURE_DESCRIPTION;
const RULES_BULK_DELETE_SUCCESS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.delete.successToastTitle', {
  defaultMessage: 'Rules deleted'
});
exports.RULES_BULK_DELETE_SUCCESS = RULES_BULK_DELETE_SUCCESS;
const RULES_BULK_DELETE_SUCCESS_DESCRIPTION = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.delete.successToastDescription', {
  values: {
    totalRules
  },
  defaultMessage: 'Successfully deleted {totalRules, plural, =1 {{totalRules} rule} other {{totalRules} rules}}'
});
exports.RULES_BULK_DELETE_SUCCESS_DESCRIPTION = RULES_BULK_DELETE_SUCCESS_DESCRIPTION;
const RULES_BULK_DELETE_FAILURE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.delete.errorToastTitle', {
  defaultMessage: 'Error deleting rules'
});
exports.RULES_BULK_DELETE_FAILURE = RULES_BULK_DELETE_FAILURE;
const RULES_BULK_DELETE_FAILURE_DESCRIPTION = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.delete.errorToastDescription', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule is} other {# rules are}} failed to delete.'
});

/**
 * Bulk Enable
 */
exports.RULES_BULK_DELETE_FAILURE_DESCRIPTION = RULES_BULK_DELETE_FAILURE_DESCRIPTION;
const RULES_BULK_ENABLE_SUCCESS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.enable.successToastTitle', {
  defaultMessage: 'Rules enabled'
});
exports.RULES_BULK_ENABLE_SUCCESS = RULES_BULK_ENABLE_SUCCESS;
const RULES_BULK_ENABLE_SUCCESS_DESCRIPTION = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkAction.enable.successToastDescription', {
  values: {
    totalRules
  },
  defaultMessage: 'Successfully enabled {totalRules, plural, =1 {{totalRules} rule} other {{totalRules} rules}}'
});
exports.RULES_BULK_ENABLE_SUCCESS_DESCRIPTION = RULES_BULK_ENABLE_SUCCESS_DESCRIPTION;
const RULES_BULK_ENABLE_FAILURE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.enable.errorToastTitle', {
  defaultMessage: 'Error enabling rules'
});
exports.RULES_BULK_ENABLE_FAILURE = RULES_BULK_ENABLE_FAILURE;
const RULES_BULK_ENABLE_FAILURE_DESCRIPTION = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.enable.errorToastDescription', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule is} other {# rules are}} failed to enable.'
});

/**
 * Bulk Disable
 */
exports.RULES_BULK_ENABLE_FAILURE_DESCRIPTION = RULES_BULK_ENABLE_FAILURE_DESCRIPTION;
const RULES_BULK_DISABLE_SUCCESS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.disable.successToastTitle', {
  defaultMessage: 'Rules disabled'
});
exports.RULES_BULK_DISABLE_SUCCESS = RULES_BULK_DISABLE_SUCCESS;
const RULES_BULK_DISABLE_SUCCESS_DESCRIPTION = totalRules => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.disable.successToastDescription', {
  values: {
    totalRules
  },
  defaultMessage: 'Successfully disabled {totalRules, plural, =1 {{totalRules} rule} other {{totalRules} rules}}'
});
exports.RULES_BULK_DISABLE_SUCCESS_DESCRIPTION = RULES_BULK_DISABLE_SUCCESS_DESCRIPTION;
const RULES_BULK_DISABLE_FAILURE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.disable.errorToastTitle', {
  defaultMessage: 'Error disabling rules'
});
exports.RULES_BULK_DISABLE_FAILURE = RULES_BULK_DISABLE_FAILURE;
const RULES_BULK_DISABLE_FAILURE_DESCRIPTION = rulesCount => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.disable.errorToastDescription', {
  values: {
    rulesCount
  },
  defaultMessage: '{rulesCount, plural, =1 {# rule is} other {# rules are}} failed to disable.'
});

/**
 * Bulk Edit
 */
exports.RULES_BULK_DISABLE_FAILURE_DESCRIPTION = RULES_BULK_DISABLE_FAILURE_DESCRIPTION;
const RULES_BULK_EDIT_SUCCESS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.edit.successToastTitle', {
  defaultMessage: 'Rules updated'
});
exports.RULES_BULK_EDIT_SUCCESS = RULES_BULK_EDIT_SUCCESS;
const RULES_BULK_EDIT_SUCCESS_DESCRIPTION = (succeededRulesCount, skippedRulesCount) => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.edit.successToastDescription', {
  values: {
    succeededRulesCount,
    skippedRulesCount
  },
  defaultMessage: `{succeededRulesCount, plural, =0 {} =1 {You've successfully updated # rule. } other {You've successfully updated # rules. }}
        {skippedRulesCount, plural, =0 {} =1 { # rule was skipped.} other { # rules were skipped.}}
        `
});
exports.RULES_BULK_EDIT_SUCCESS_DESCRIPTION = RULES_BULK_EDIT_SUCCESS_DESCRIPTION;
const RULES_BULK_EDIT_SUCCESS_DATA_VIEW_RULES_SKIPPED_DETAIL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.edit.successIndexEditToastDescription', {
  defaultMessage: 'If you did not select to apply changes to rules using Kibana data views, those rules were not updated and will continue using data views.'
});
exports.RULES_BULK_EDIT_SUCCESS_DATA_VIEW_RULES_SKIPPED_DETAIL = RULES_BULK_EDIT_SUCCESS_DATA_VIEW_RULES_SKIPPED_DETAIL;
const RULES_BULK_EDIT_FAILURE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.edit.errorToastTitle', {
  defaultMessage: 'Error updating rules'
});
exports.RULES_BULK_EDIT_FAILURE = RULES_BULK_EDIT_FAILURE;
const RULES_BULK_EDIT_FAILURE_DESCRIPTION = (failedRulesCount, skippedRulesCount) => _i18n.i18n.translate('xpack.securitySolution.detectionEngine.rules.allRules.bulkActions.edit.errorToastDescription', {
  values: {
    failedRulesCount,
    skippedRulesCount
  },
  defaultMessage: '{failedRulesCount, plural, =0 {} =1 {# rule} other {# rules}} failed to update. {skippedRulesCount, plural, =0 {} =1 { # rule was skipped.} other { # rules were skipped.}}'
});
exports.RULES_BULK_EDIT_FAILURE_DESCRIPTION = RULES_BULK_EDIT_FAILURE_DESCRIPTION;
const CANCEL_BUTTON_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.createRule.cancelButtonLabel', {
  defaultMessage: 'Cancel'
});
exports.CANCEL_BUTTON_LABEL = CANCEL_BUTTON_LABEL;
const SAVED_QUERY_LOAD_ERROR_TOAST = _i18n.i18n.translate('xpack.securitySolution.hooks.useGetSavedQuery.errorToastMessage', {
  defaultMessage: 'Failed to load the saved query'
});

// Prompt Context i18n
exports.SAVED_QUERY_LOAD_ERROR_TOAST = SAVED_QUERY_LOAD_ERROR_TOAST;
const RULE_MANAGEMENT_CONTEXT_DESCRIPTION = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleManagement.ruleManagementContextDescription', {
  defaultMessage: 'Selected Detection Rules'
});
exports.RULE_MANAGEMENT_CONTEXT_DESCRIPTION = RULE_MANAGEMENT_CONTEXT_DESCRIPTION;
const EXPLAIN_THEN_SUMMARIZE_RULE_DETAILS = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleManagement.explainThenSummarizeRuleDetails', {
  defaultMessage: "Please explain the selected rules above. For each rule, highlight why they are relevant, the query as published on Elastic's detection rules repository and an in-depth explanation of it, and what they typically mean for an organization if detected."
});
exports.EXPLAIN_THEN_SUMMARIZE_RULE_DETAILS = EXPLAIN_THEN_SUMMARIZE_RULE_DETAILS;
const DETECTION_RULES_CONVERSATION_ID = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleManagement.detectionRulesConversationId', {
  defaultMessage: 'Detection Rules'
});
exports.DETECTION_RULES_CONVERSATION_ID = DETECTION_RULES_CONVERSATION_ID;
const RULE_MANAGEMENT_CONTEXT_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.ruleManagement.ruleManagementContextTooltip', {
  defaultMessage: 'Add this alert as context'
});
exports.RULE_MANAGEMENT_CONTEXT_TOOLTIP = RULE_MANAGEMENT_CONTEXT_TOOLTIP;
const INSTALL_RULE_BUTTON = _i18n.i18n.translate('xpack.securitySolution.addRules.installRuleButton', {
  defaultMessage: 'Install rule'
});
exports.INSTALL_RULE_BUTTON = INSTALL_RULE_BUTTON;
const UPDATE_RULE_BUTTON = _i18n.i18n.translate('xpack.securitySolution.addRules.upgradeRuleButton', {
  defaultMessage: 'Update rule'
});
exports.UPDATE_RULE_BUTTON = UPDATE_RULE_BUTTON;
const GO_BACK_TO_RULES_TABLE_BUTTON = _i18n.i18n.translate('xpack.securitySolution.addRules.goBackToRulesTableButton', {
  defaultMessage: 'Go back to installed Elastic rules'
});
exports.GO_BACK_TO_RULES_TABLE_BUTTON = GO_BACK_TO_RULES_TABLE_BUTTON;
const RULE_UPDATES_DOCUMENTATION_LINK = _i18n.i18n.translate('xpack.securitySolution.ruleUpdates.documentationLink', {
  defaultMessage: "See what's new in Prebuilt Security Detection Rules"
});
exports.RULE_UPDATES_DOCUMENTATION_LINK = RULE_UPDATES_DOCUMENTATION_LINK;