"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolicyResponseWrapper = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _kibana = require("../../../common/lib/kibana");
var _formatted_date = require("../../../common/components/formatted_date");
var _use_get_endpoint_policy_response = require("../../hooks/endpoint/use_get_endpoint_policy_response");
var _policy_response = require("./policy_response");
var _utils = require("../../pages/endpoint_hosts/store/utils");
var _policy_response_action_item = require("./policy_response_action_item");
var _policy_response_friendly_names = require("./policy_response_friendly_names");
var _hooks = require("../../hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const PolicyResponseWrapper = /*#__PURE__*/(0, _react.memo)(({
  endpointId,
  showRevisionMessage = true,
  onShowNeedsAttentionBadge
}) => {
  var _data$policy_response, _data$policy_response2, _endpointDetails$meta;
  const {
    data,
    isLoading,
    isFetching,
    isError
  } = (0, _use_get_endpoint_policy_response.useGetEndpointPolicyResponse)(endpointId);
  const {
    data: endpointDetails
  } = (0, _hooks.useGetEndpointDetails)(endpointId);
  const {
    docLinks
  } = (0, _kibana.useKibana)().services;
  const [policyResponseConfig, setPolicyResponseConfig] = (0, _react.useState)();
  const [policyResponseActions, setPolicyResponseActions] = (0, _react.useState)();
  const [policyResponseAttentionCount, setPolicyResponseAttentionCount] = (0, _react.useState)(new Map());
  (0, _react.useEffect)(() => {
    if (!!data && !isLoading && !isFetching && !isError) {
      setPolicyResponseConfig(data.policy_response.Endpoint.policy.applied.response.configurations);
      setPolicyResponseActions(data.policy_response.Endpoint.policy.applied.actions);
      setPolicyResponseAttentionCount((0, _utils.getFailedOrWarningActionCountFromPolicyResponse)(data.policy_response.Endpoint.policy.applied));
    }
  }, [data, isLoading, isFetching, isError]);

  // This is needed for the `needs attention` action button in fleet. Will callback `true` if any error in policy response
  (0, _react.useEffect)(() => {
    if (onShowNeedsAttentionBadge) {
      for (const count of policyResponseAttentionCount.values()) {
        if (count) {
          // When an error has found, callback to true and return for loop exit
          onShowNeedsAttentionBadge(true);
          return;
        }
      }
    }
  }, [policyResponseAttentionCount, onShowNeedsAttentionBadge]);
  const genericErrors = (0, _react.useMemo)(() => {
    if (!policyResponseConfig && !policyResponseActions) {
      return [];
    }
    return policyResponseActions === null || policyResponseActions === void 0 ? void 0 : policyResponseActions.reduce((acc, currentAction) => {
      const policyResponseActionFormatter = new _policy_response_friendly_names.PolicyResponseActionFormatter(currentAction, docLinks.links.securitySolution.policyResponseTroubleshooting, endpointDetails === null || endpointDetails === void 0 ? void 0 : endpointDetails.metadata.host.os.name.toLowerCase());
      if (policyResponseActionFormatter.isGeneric && policyResponseActionFormatter.hasError) {
        acc.push(policyResponseActionFormatter);
      }
      return acc;
    }, []);
  }, [docLinks.links.securitySolution.policyResponseTroubleshooting, policyResponseActions, policyResponseConfig, endpointDetails === null || endpointDetails === void 0 ? void 0 : endpointDetails.metadata.host.os.name]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showRevisionMessage && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs",
    color: "subdued",
    "data-test-subj": "endpointPolicyResponseTimestamp"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.securitySolution.endpoint.policyResponse.appliedOn",
    defaultMessage: "Revision {rev} applied on {date}",
    values: {
      rev: (_data$policy_response = data === null || data === void 0 ? void 0 : data.policy_response.Endpoint.policy.applied.endpoint_policy_version) !== null && _data$policy_response !== void 0 ? _data$policy_response : '',
      date: /*#__PURE__*/_react.default.createElement(_formatted_date.PreferenceFormattedDateFromPrimitive, {
        value: (_data$policy_response2 = data === null || data === void 0 ? void 0 : data.policy_response['@timestamp']) !== null && _data$policy_response2 !== void 0 ? _data$policy_response2 : ''
      })
    }
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  })), isError && /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.endpoint.details.noPolicyResponse",
      defaultMessage: "No policy response available"
    })
  }), isLoading && /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
    size: "m"
  }), policyResponseConfig !== undefined && policyResponseActions !== undefined && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_policy_response.PolicyResponse, {
    hostOs: (_endpointDetails$meta = endpointDetails === null || endpointDetails === void 0 ? void 0 : endpointDetails.metadata.host.os.name.toLowerCase()) !== null && _endpointDetails$meta !== void 0 ? _endpointDetails$meta : '',
    policyResponseConfig: policyResponseConfig,
    policyResponseActions: policyResponseActions,
    policyResponseAttentionCount: policyResponseAttentionCount
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), genericErrors === null || genericErrors === void 0 ? void 0 : genericErrors.map(genericActionError => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
    key: genericActionError.key
  }, /*#__PURE__*/_react.default.createElement(_policy_response_action_item.PolicyResponseActionItem, {
    policyResponseActionFormatter: genericActionError
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  })))));
});
exports.PolicyResponseWrapper = PolicyResponseWrapper;
PolicyResponseWrapper.displayName = 'PolicyResponse';