"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CasesTable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _types = require("../../../../app/types");
var _formatted_date = require("../../../../common/components/formatted_date");
var _formatted_number = require("../../../../common/components/formatted_number");
var _header_section = require("../../../../common/components/header_section");
var _hover_visibility_container = require("../../../../common/components/hover_visibility_container");
var _inspect = require("../../../../common/components/inspect");
var _last_updated_at = require("../../../../common/components/last_updated_at");
var _links = require("../../../../common/components/links");
var _query_toggle = require("../../../../common/containers/query_toggle");
var _kibana = require("../../../../common/lib/kibana");
var i18n = _interopRequireWildcard(require("../translations"));
var _status_badge = require("./status_badge");
var _use_case_items = require("./use_case_items");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DETECTION_RESPONSE_RECENT_CASES_QUERY_ID = 'recentlyCreatedCasesQuery';
const CasesTable = /*#__PURE__*/_react.default.memo(() => {
  const {
    getAppUrl,
    navigateTo
  } = (0, _kibana.useNavigation)();
  const {
    toggleStatus,
    setToggleStatus
  } = (0, _query_toggle.useQueryToggle)(DETECTION_RESPONSE_RECENT_CASES_QUERY_ID);
  const {
    items,
    isLoading,
    updatedAt
  } = (0, _use_case_items.useCaseItems)({
    skip: !toggleStatus
  });
  const navigateToCases = (0, _react.useCallback)(() => {
    navigateTo({
      deepLinkId: _types.SecurityPageName.case
    });
  }, [navigateTo]);
  const columns = (0, _react.useMemo)(() => getTableColumns({
    getAppUrl,
    navigateTo
  }), [getAppUrl, navigateTo]);
  return /*#__PURE__*/_react.default.createElement(_hover_visibility_container.HoverVisibilityContainer, {
    show: true,
    targetClassNames: [_inspect.BUTTON_CLASS]
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true,
    "data-test-subj": "recentlyCreatedCasesPanel"
  }, /*#__PURE__*/_react.default.createElement(_header_section.HeaderSection, {
    id: DETECTION_RESPONSE_RECENT_CASES_QUERY_ID,
    title: i18n.CASES_TABLE_SECTION_TITLE,
    titleSize: "s",
    toggleStatus: toggleStatus,
    toggleQuery: setToggleStatus,
    subtitle: /*#__PURE__*/_react.default.createElement(_last_updated_at.LastUpdatedAt, {
      updatedAt: updatedAt,
      isUpdating: isLoading
    }),
    showInspectButton: false,
    tooltip: i18n.CASES_TABLE_SECTION_TOOLTIP
  }), toggleStatus && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    "data-test-subj": "recentlyCreatedCasesTable",
    columns: columns,
    items: items,
    loading: isLoading,
    noItemsMessage: /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
      title: /*#__PURE__*/_react.default.createElement("h3", null, i18n.NO_CASES_FOUND),
      titleSize: "xs"
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    "data-test-subj": "allCasesButton",
    onClick: navigateToCases
  }, i18n.VIEW_RECENT_CASES))));
});
exports.CasesTable = CasesTable;
CasesTable.displayName = 'CasesTable';
const getTableColumns = () => [{
  field: 'id',
  name: i18n.CASES_TABLE_COLUMN_NAME,
  'data-test-subj': 'recentlyCreatedCaseName',
  render: (id, {
    name
  }) => /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    title: i18n.OPEN_CASE_DETAIL_TOOLTIP,
    content: name,
    anchorClassName: "eui-textTruncate"
  }, /*#__PURE__*/_react.default.createElement(_links.CaseDetailsLink, {
    detailName: id
  }, name))
}, {
  field: 'totalAlerts',
  name: i18n.ALERTS_TEXT,
  truncateText: true,
  textOnly: true,
  'data-test-subj': 'recentlyCreatedCaseAlert',
  render: totalAlerts => /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: totalAlerts
  })
}, {
  field: 'createdAt',
  name: i18n.CASES_TABLE_COLUMN_TIME,
  render: createdAt => /*#__PURE__*/_react.default.createElement(_formatted_date.FormattedDate, {
    fieldName: i18n.CASES_TABLE_COLUMN_TIME,
    value: createdAt,
    className: "eui-textTruncate",
    dateFormat: "MMMM D, YYYY"
  }),
  'data-test-subj': 'recentlyCreatedCaseTime'
}, {
  field: 'createdBy',
  name: i18n.CASES_TABLE_COLUMN_CREATED_BY,
  render: createdBy => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    "data-test-subj": "recentlyCreatedCaseCreatedBy",
    size: "s"
  }, createdBy)
}, {
  field: 'status',
  name: i18n.CASES_TABLE_COLUMN_STATUS,
  render: status => /*#__PURE__*/_react.default.createElement(_status_badge.StatusBadge, {
    status: status
  }),
  'data-test-subj': 'recentlyCreatedCaseStatus'
}];