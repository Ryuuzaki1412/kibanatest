"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VALUE_LABEL = exports.VALUE = exports.UNAVAILABLE_OPERATOR = exports.SELECT_AN_OPERATOR = exports.SAVE = exports.OPERATOR = exports.IS_ONE_OF = exports.IS_NOT_ONE_OF = exports.IS_NOT = exports.IS = exports.FIELD_PLACEHOLDER = exports.FIELD = exports.EXISTS = exports.ENTER_ONE_OR_MORE_VALUES = exports.DOES_NOT_EXIST = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DOES_NOT_EXIST = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.doesNotExistLabel', {
  defaultMessage: 'does not exist'
});
exports.DOES_NOT_EXIST = DOES_NOT_EXIST;
const EXISTS = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.existsLabel', {
  defaultMessage: 'exists'
});
exports.EXISTS = EXISTS;
const FIELD = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.fieldLabel', {
  defaultMessage: 'Field'
});
exports.FIELD = FIELD;
const FIELD_PLACEHOLDER = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.placeholder', {
  defaultMessage: 'Select a field'
});
exports.FIELD_PLACEHOLDER = FIELD_PLACEHOLDER;
const IS = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.isLabel', {
  defaultMessage: 'is'
});
exports.IS = IS;
const IS_ONE_OF = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.isOneOfLabel', {
  defaultMessage: 'is one of'
});
exports.IS_ONE_OF = IS_ONE_OF;
const IS_NOT = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.isNotLabel', {
  defaultMessage: 'is not'
});
exports.IS_NOT = IS_NOT;
const IS_NOT_ONE_OF = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.isNotOneOfLabel', {
  defaultMessage: 'is not one of'
});
exports.IS_NOT_ONE_OF = IS_NOT_ONE_OF;
const ENTER_ONE_OR_MORE_VALUES = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.includesPlaceholder', {
  defaultMessage: 'enter one or more values'
});
exports.ENTER_ONE_OR_MORE_VALUES = ENTER_ONE_OR_MORE_VALUES;
const OPERATOR = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.operatorLabel', {
  defaultMessage: 'Operator'
});
exports.OPERATOR = OPERATOR;
const SAVE = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.saveButton', {
  defaultMessage: 'Save'
});
exports.SAVE = SAVE;
const VALUE = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.valuePlaceholder', {
  defaultMessage: 'value'
});
exports.VALUE = VALUE;
const VALUE_LABEL = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.valueLabel', {
  defaultMessage: 'Value'
});
exports.VALUE_LABEL = VALUE_LABEL;
const SELECT_AN_OPERATOR = _i18n.i18n.translate('xpack.securitySolution.editDataProvider.selectAnOperatorPlaceholder', {
  defaultMessage: 'Select an operator'
});
exports.SELECT_AN_OPERATOR = SELECT_AN_OPERATOR;
const UNAVAILABLE_OPERATOR = operator => _i18n.i18n.translate('xpack.securitySolution.editDataProvider.unavailableOperator', {
  values: {
    operator
  },
  defaultMessage: '{operator} operator is unavailable with templates'
});
exports.UNAVAILABLE_OPERATOR = UNAVAILABLE_OPERATOR;