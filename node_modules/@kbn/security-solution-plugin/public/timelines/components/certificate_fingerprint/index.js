"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TLS_SERVER_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME = exports.TLS_CLIENT_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME = exports.CertificateFingerprint = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _draggables = require("../../../common/components/draggables");
var _links = require("../../../common/components/links");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const TLS_CLIENT_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME = 'tls.client_certificate.fingerprint.sha1';
exports.TLS_CLIENT_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME = TLS_CLIENT_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME;
const TLS_SERVER_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME = 'tls.server_certificate.fingerprint.sha1';
exports.TLS_SERVER_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME = TLS_SERVER_CERTIFICATE_FINGERPRINT_SHA1_FIELD_NAME;
const FingerprintLabel = _styledComponents.default.span`
  margin-right: 5px;
`;
FingerprintLabel.displayName = 'FingerprintLabel';

/**
 * Represents a field containing a certificate fingerprint (e.g. a sha1), with
 * a link to an external site, which in-turn compares the fingerprint against a
 * set of known fingerprints
 * Examples:
 * 'tls.client_certificate.fingerprint.sha1'
 * 'tls.server_certificate.fingerprint.sha1'
 */
const CertificateFingerprint = /*#__PURE__*/_react.default.memo(({
  eventId,
  certificateType,
  contextId,
  fieldName,
  isDraggable,
  value
}) => {
  return /*#__PURE__*/_react.default.createElement(_draggables.DraggableBadge, {
    contextId: contextId,
    "data-test-subj": `${certificateType}-certificate-fingerprint`,
    eventId: eventId,
    field: fieldName,
    iconType: "snowflake",
    isDraggable: isDraggable,
    tooltipContent: /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
      size: "xs"
    }, /*#__PURE__*/_react.default.createElement("span", null, fieldName)),
    value: value,
    isAggregatable: true,
    fieldType: "keyword"
  }, /*#__PURE__*/_react.default.createElement(FingerprintLabel, null, certificateType === 'client' ? i18n.CLIENT_CERT : i18n.SERVER_CERT), /*#__PURE__*/_react.default.createElement(_links.CertificateFingerprintLink, {
    certificateFingerprint: value || ''
  }));
});
exports.CertificateFingerprint = CertificateFingerprint;
CertificateFingerprint.displayName = 'CertificateFingerprint';