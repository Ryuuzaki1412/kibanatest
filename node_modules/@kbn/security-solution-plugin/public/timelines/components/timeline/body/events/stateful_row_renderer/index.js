"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatefulRowRenderer = void 0;
var _fp = require("lodash/fp");
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/timelines-plugin/public");
var _get_row_renderer = require("../../renderers/get_row_renderer");
var _use_stateful_event_focus = require("../use_stateful_event_focus");
var i18n = _interopRequireWildcard(require("../translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * This component addresses the accessibility of row renderers.
 *
 * accessibility details:
 * - This component has a 'dialog' `role` because it's rendered as a dialog
 *   "outside" the current row for screen readers, similar to a popover
 * - It has tabIndex="0" to allow for keyboard focus
 * - It traps keyboard focus when a user clicks inside a row renderer, to
 *   allow for tabbing through the contents of row renderers
 * - The "dialog" can be dismissed via the up arrow key, down arrow key,
 *   which focuses the current or next row, respectively.
 * - A screen-reader-only message provides additional context and instruction
 */
const StatefulRowRenderer = ({
  ariaRowindex,
  containerRef,
  event,
  lastFocusedAriaColindex,
  rowRenderers,
  timelineId
}) => {
  const {
    focusOwnership,
    onFocus,
    onKeyDown,
    onOutsideClick
  } = (0, _use_stateful_event_focus.useStatefulEventFocus)({
    ariaRowindex,
    colindexAttribute: _public.ARIA_COLINDEX_ATTRIBUTE,
    containerRef,
    lastFocusedAriaColindex,
    onColumnFocused: _fp.noop,
    rowindexAttribute: _public.ARIA_ROWINDEX_ATTRIBUTE
  });
  const rowRenderer = (0, _react.useMemo)(() => (0, _get_row_renderer.getRowRenderer)({
    data: event.ecs,
    rowRenderers
  }), [event.ecs, rowRenderers]);
  const content = (0, _react.useMemo)(() => rowRenderer &&
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
  _react.default.createElement("div", {
    className: (0, _public.getRowRendererClassName)(ariaRowindex),
    role: "dialog",
    onFocus: onFocus
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiOutsideClickDetector, {
    onOutsideClick: onOutsideClick
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFocusTrap, {
    clickOutsideDisables: true,
    disabled: focusOwnership !== 'owned'
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiScreenReaderOnly, {
    "data-test-subj": "eventRendererScreenReaderOnly"
  }, /*#__PURE__*/_react.default.createElement("p", null, i18n.YOU_ARE_IN_AN_EVENT_RENDERER(ariaRowindex))), /*#__PURE__*/_react.default.createElement("div", {
    onKeyDown: onKeyDown
  }, rowRenderer.renderRow({
    data: event.ecs,
    isDraggable: true,
    scopeId: timelineId
  }))))), [ariaRowindex, event.ecs, focusOwnership, onFocus, onKeyDown, onOutsideClick, rowRenderer, timelineId]);
  return content;
};
exports.StatefulRowRenderer = StatefulRowRenderer;