"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WITH_RESULT = exports.WITH_EXIT_CODE = exports.WAS_PREVENTED_FROM_RENAMING_A_MALICIOUS_FILE = exports.WAS_PREVENTED_FROM_MODIFYING_A_MALICIOUS_FILE = exports.WAS_PREVENTED_FROM_EXECUTING_A_MALICIOUS_PROCESS = exports.WAS_PREVENTED_FROM_CREATING_A_MALICIOUS_FILE = exports.WAS_DETECTED_RENAMING_A_MALICIOUS_FILE = exports.WAS_DETECTED_MODIFYING_A_MALICIOUS_FILE = exports.WAS_DETECTED_EXECUTING_A_MALICIOUS_PROCESS = exports.WAS_DETECTED_CREATING_A_MALICIOUS_FILE = exports.VIA_PARENT_PROCESS = exports.VIA = exports.USING = exports.USER_REMOVED = exports.USER_CHANGED = exports.USER_ADDED = exports.TERMINATED_PROCESS = exports.SOCKET_OPENED = exports.SOCKET_CLOSED = exports.RENAMED_FILE = exports.RANSOMWARE_WAS_PREVENTED_FROM_ENCRYPTING_FILES = exports.RANSOMWARE_WAS_DETECTED_ENCRYPTING_FILES = exports.PROCESS_STOPPED = exports.PROCESS_STARTED = exports.PROCESS_ERROR = exports.PACKAGE_UPDATED = exports.PACKAGE_REMOVED = exports.PACKAGE_INSTALLED = exports.OVERWROTE_FILE = exports.MODIFIED_REGISTRY_KEY = exports.MODIFIED_FILE = exports.MADE_A_HTTP_REQUEST_VIA = exports.LOGGED_OUT = exports.LOADED_LIBRARY = exports.INVALID = exports.HOST_CHANGED = exports.FORKED_PROCESS = exports.EXISTING_USER = exports.EXISTING_SOCKET = exports.EXISTING_PROCESS = exports.EXISTING_PACKAGE = exports.EXECUTED_PROCESS = exports.ERROR = exports.DISCONNECTED_VIA = exports.DELETED_FILE = exports.CREATED_FILE = exports.BOOT = exports.ATTEMPTED_LOGIN = exports.ACCEPTED_A_CONNECTION_VIA = exports.ACCEPTED = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// Note for translators and programmers
// Examples of these strings are all of the form
// Session {user.name}@{hostname} in {folder} was authorized to use {executable} with result {result.success/failure}
// E.x. Frank@server-1 in /root was authorized to use wget with result success

// However, the strings can be dropped depending on the circumstances of the variables. For example, with no data at all
// Example with just a user name and hostname
// Session 20 frank@server-1
// Example with user name, hostname, but no result
// Session 20 frank@server-1 started process curl

const WITH_RESULT = _i18n.i18n.translate('xpack.securitySolution.system.withResultDescription', {
  defaultMessage: 'with result'
});
exports.WITH_RESULT = WITH_RESULT;
const ACCEPTED_A_CONNECTION_VIA = _i18n.i18n.translate('xpack.securitySolution.system.acceptedAConnectionViaDescription', {
  defaultMessage: 'accepted a connection via'
});
exports.ACCEPTED_A_CONNECTION_VIA = ACCEPTED_A_CONNECTION_VIA;
const ATTEMPTED_LOGIN = _i18n.i18n.translate('xpack.securitySolution.system.attemptedLoginDescription', {
  defaultMessage: 'attempted a login via'
});
exports.ATTEMPTED_LOGIN = ATTEMPTED_LOGIN;
const DISCONNECTED_VIA = _i18n.i18n.translate('xpack.securitySolution.system.disconnectedViaDescription', {
  defaultMessage: 'disconnected via'
});
exports.DISCONNECTED_VIA = DISCONNECTED_VIA;
const LOGGED_OUT = _i18n.i18n.translate('xpack.securitySolution.system.loggedOutDescription', {
  defaultMessage: 'logged out via'
});
exports.LOGGED_OUT = LOGGED_OUT;
const USING = _i18n.i18n.translate('xpack.securitySolution.system.usingDescription', {
  defaultMessage: 'using'
});
exports.USING = USING;
const PROCESS_STARTED = _i18n.i18n.translate('xpack.securitySolution.system.processStartedDescription', {
  defaultMessage: 'started process'
});
exports.PROCESS_STARTED = PROCESS_STARTED;
const PROCESS_STOPPED = _i18n.i18n.translate('xpack.securitySolution.system.processStoppedDescription', {
  defaultMessage: 'stopped process'
});
exports.PROCESS_STOPPED = PROCESS_STOPPED;
const TERMINATED_PROCESS = _i18n.i18n.translate('xpack.securitySolution.system.terminatedProcessDescription', {
  defaultMessage: 'terminated process'
});
exports.TERMINATED_PROCESS = TERMINATED_PROCESS;
const CREATED_FILE = _i18n.i18n.translate('xpack.securitySolution.system.createdFileDescription', {
  defaultMessage: 'created a file'
});
exports.CREATED_FILE = CREATED_FILE;
const DELETED_FILE = _i18n.i18n.translate('xpack.securitySolution.system.deletedFileDescription', {
  defaultMessage: 'deleted a file'
});
exports.DELETED_FILE = DELETED_FILE;
const EXECUTED_PROCESS = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.executedProcessDescription', {
  defaultMessage: 'executed process'
});
exports.EXECUTED_PROCESS = EXECUTED_PROCESS;
const FORKED_PROCESS = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.forkedProcessDescription', {
  defaultMessage: 'forked process'
});
exports.FORKED_PROCESS = FORKED_PROCESS;
const LOADED_LIBRARY = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.loadedLibraryDescription', {
  defaultMessage: 'loaded library'
});
exports.LOADED_LIBRARY = LOADED_LIBRARY;
const MADE_A_HTTP_REQUEST_VIA = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.madeAHttpRequestViaDescription', {
  defaultMessage: 'made a http request via'
});
exports.MADE_A_HTTP_REQUEST_VIA = MADE_A_HTTP_REQUEST_VIA;
const MODIFIED_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.modifiedFileDescription', {
  defaultMessage: 'modified a file'
});
exports.MODIFIED_FILE = MODIFIED_FILE;
const MODIFIED_REGISTRY_KEY = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.modifiedRegistryKeyDescription', {
  defaultMessage: 'modified registry key'
});
exports.MODIFIED_REGISTRY_KEY = MODIFIED_REGISTRY_KEY;
const OVERWROTE_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.overwroteFileDescription', {
  defaultMessage: 'overwrote a file'
});
exports.OVERWROTE_FILE = OVERWROTE_FILE;
const RENAMED_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.renamedFileDescription', {
  defaultMessage: 'renamed a file'
});
exports.RENAMED_FILE = RENAMED_FILE;
const EXISTING_PROCESS = _i18n.i18n.translate('xpack.securitySolution.system.existingProcessDescription', {
  defaultMessage: 'is running process'
});
exports.EXISTING_PROCESS = EXISTING_PROCESS;
const SOCKET_OPENED = _i18n.i18n.translate('xpack.securitySolution.system.socketOpenedDescription', {
  defaultMessage: 'opened a socket with'
});
exports.SOCKET_OPENED = SOCKET_OPENED;
const SOCKET_CLOSED = _i18n.i18n.translate('xpack.securitySolution.system.socketClosedDescription', {
  defaultMessage: 'closed a socket with'
});
exports.SOCKET_CLOSED = SOCKET_CLOSED;
const EXISTING_USER = _i18n.i18n.translate('xpack.securitySolution.system.existingUserDescription', {
  defaultMessage: 'is an existing user'
});
exports.EXISTING_USER = EXISTING_USER;
const EXISTING_SOCKET = _i18n.i18n.translate('xpack.securitySolution.system.existingSocketDescription', {
  defaultMessage: 'is using an existing socket from'
});
exports.EXISTING_SOCKET = EXISTING_SOCKET;
const EXISTING_PACKAGE = _i18n.i18n.translate('xpack.securitySolution.system.existingPackageDescription', {
  defaultMessage: 'is using an existing package'
});
exports.EXISTING_PACKAGE = EXISTING_PACKAGE;
const INVALID = _i18n.i18n.translate('xpack.securitySolution.system.invalidDescription', {
  defaultMessage: 'attempted invalid usage of'
});
exports.INVALID = INVALID;
const USER_CHANGED = _i18n.i18n.translate('xpack.securitySolution.system.userChangedDescription', {
  defaultMessage: 'user has changed'
});
exports.USER_CHANGED = USER_CHANGED;
const HOST_CHANGED = _i18n.i18n.translate('xpack.securitySolution.system.hostDescription', {
  defaultMessage: 'host information'
});
exports.HOST_CHANGED = HOST_CHANGED;
const USER_ADDED = _i18n.i18n.translate('xpack.securitySolution.system.userAddedDescription', {
  defaultMessage: 'user was added'
});
exports.USER_ADDED = USER_ADDED;
const PROCESS_ERROR = _i18n.i18n.translate('xpack.securitySolution.system.processErrorDescription', {
  defaultMessage: 'encountered a process error with'
});
exports.PROCESS_ERROR = PROCESS_ERROR;
const ERROR = _i18n.i18n.translate('xpack.securitySolution.system.errorDescription', {
  defaultMessage: 'encountered an error with'
});
exports.ERROR = ERROR;
const PACKAGE_INSTALLED = _i18n.i18n.translate('xpack.securitySolution.system.packageInstalledDescription', {
  defaultMessage: 'installed package'
});
exports.PACKAGE_INSTALLED = PACKAGE_INSTALLED;
const BOOT = _i18n.i18n.translate('xpack.securitySolution.system.packageSystemStartedDescription', {
  defaultMessage: 'system started'
});
exports.BOOT = BOOT;
const ACCEPTED = _i18n.i18n.translate('xpack.securitySolution.system.acceptedDescription', {
  defaultMessage: 'accepted the user via'
});
exports.ACCEPTED = ACCEPTED;
const PACKAGE_UPDATED = _i18n.i18n.translate('xpack.securitySolution.system.packageUpdatedDescription', {
  defaultMessage: 'updated package'
});
exports.PACKAGE_UPDATED = PACKAGE_UPDATED;
const PACKAGE_REMOVED = _i18n.i18n.translate('xpack.securitySolution.system.packageRemovedDescription', {
  defaultMessage: 'removed package'
});
exports.PACKAGE_REMOVED = PACKAGE_REMOVED;
const USER_REMOVED = _i18n.i18n.translate('xpack.securitySolution.system.userRemovedDescription', {
  defaultMessage: 'was removed'
});
exports.USER_REMOVED = USER_REMOVED;
const VIA = _i18n.i18n.translate('xpack.securitySolution.system.viaDescription', {
  defaultMessage: 'via'
});
exports.VIA = VIA;
const VIA_PARENT_PROCESS = _i18n.i18n.translate('xpack.securitySolution.system.viaParentProcessDescription', {
  defaultMessage: 'via parent process'
});
exports.VIA_PARENT_PROCESS = VIA_PARENT_PROCESS;
const RANSOMWARE_WAS_PREVENTED_FROM_ENCRYPTING_FILES = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.ransomwareWasPreventedFromeEcryptingFilesDescription', {
  defaultMessage: 'ransomware was prevented from encrypting files'
});
exports.RANSOMWARE_WAS_PREVENTED_FROM_ENCRYPTING_FILES = RANSOMWARE_WAS_PREVENTED_FROM_ENCRYPTING_FILES;
const RANSOMWARE_WAS_DETECTED_ENCRYPTING_FILES = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.ransomwareWasDetectedEcryptingFilesDescription', {
  defaultMessage: 'ransomware was detected encrypting files'
});
exports.RANSOMWARE_WAS_DETECTED_ENCRYPTING_FILES = RANSOMWARE_WAS_DETECTED_ENCRYPTING_FILES;
const WAS_DETECTED_CREATING_A_MALICIOUS_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasDetectedCreatingAMaliciousFileDescription', {
  defaultMessage: 'was detected creating a malicious file'
});
exports.WAS_DETECTED_CREATING_A_MALICIOUS_FILE = WAS_DETECTED_CREATING_A_MALICIOUS_FILE;
const WAS_PREVENTED_FROM_CREATING_A_MALICIOUS_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasPreventedFromCreatingAMaliciousFileDescription', {
  defaultMessage: 'was prevented from creating a malicious file'
});
exports.WAS_PREVENTED_FROM_CREATING_A_MALICIOUS_FILE = WAS_PREVENTED_FROM_CREATING_A_MALICIOUS_FILE;
const WAS_DETECTED_MODIFYING_A_MALICIOUS_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasDetectedModifyingAMaliciousFileDescription', {
  defaultMessage: 'was detected modifying a malicious file'
});
exports.WAS_DETECTED_MODIFYING_A_MALICIOUS_FILE = WAS_DETECTED_MODIFYING_A_MALICIOUS_FILE;
const WAS_PREVENTED_FROM_MODIFYING_A_MALICIOUS_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasPreventedFromModifyingAMaliciousFileDescription', {
  defaultMessage: 'was prevented from modifying a malicious file'
});
exports.WAS_PREVENTED_FROM_MODIFYING_A_MALICIOUS_FILE = WAS_PREVENTED_FROM_MODIFYING_A_MALICIOUS_FILE;
const WAS_DETECTED_RENAMING_A_MALICIOUS_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasDetectedRenamingAMaliciousFileDescription', {
  defaultMessage: 'was detected renaming a malicious file'
});
exports.WAS_DETECTED_RENAMING_A_MALICIOUS_FILE = WAS_DETECTED_RENAMING_A_MALICIOUS_FILE;
const WAS_PREVENTED_FROM_RENAMING_A_MALICIOUS_FILE = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasPreventedFromRenamingAMaliciousFileDescription', {
  defaultMessage: 'was prevented from renaming a malicious file'
});
exports.WAS_PREVENTED_FROM_RENAMING_A_MALICIOUS_FILE = WAS_PREVENTED_FROM_RENAMING_A_MALICIOUS_FILE;
const WAS_DETECTED_EXECUTING_A_MALICIOUS_PROCESS = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasDetectedExecutingAMaliciousProcessDescription', {
  defaultMessage: 'was detected executing a malicious process'
});
exports.WAS_DETECTED_EXECUTING_A_MALICIOUS_PROCESS = WAS_DETECTED_EXECUTING_A_MALICIOUS_PROCESS;
const WAS_PREVENTED_FROM_EXECUTING_A_MALICIOUS_PROCESS = _i18n.i18n.translate('xpack.securitySolution.rowRenderer.wasPreventedFromExecutingAMaliciousProcessDescription', {
  defaultMessage: 'was prevented from executing a malicious process'
});
exports.WAS_PREVENTED_FROM_EXECUTING_A_MALICIOUS_PROCESS = WAS_PREVENTED_FROM_EXECUTING_A_MALICIOUS_PROCESS;
const WITH_EXIT_CODE = _i18n.i18n.translate('xpack.securitySolution.system.withExitCodeDescription', {
  defaultMessage: 'with exit code'
});
exports.WITH_EXIT_CODE = WITH_EXIT_CODE;