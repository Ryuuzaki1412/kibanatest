"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateFieldButton = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const StyledButton = (0, _styledComponents.default)(_eui.EuiButton)`
  margin-left: ${({
  theme
}) => theme.eui.euiSizeM};
`;
/**
 *
 * Returns a memoised 'CreateFieldButton' with only an 'onClick' property.
 */
const useCreateFieldButton = ({
  isAllowed,
  loading,
  openFieldEditor
}) => {
  const createFieldButton = (0, _react.useCallback)(({
    onHide
  }) => /*#__PURE__*/_react.default.createElement(StyledButton, {
    iconType: loading ? 'none' : 'plusInCircle',
    "aria-label": i18n.CREATE_FIELD,
    "data-test-subj": "create-field",
    onClick: () => {
      openFieldEditor();
      onHide();
    },
    isLoading: loading
  }, i18n.CREATE_FIELD), [loading, openFieldEditor]);
  return isAllowed ? createFieldButton : undefined;
};
exports.useCreateFieldButton = useCreateFieldButton;