"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDashboardViewPromptState = exports.DashboardViewPromptState = void 0;
var _react = _interopRequireDefault(require("react"));
var i18n = _interopRequireWildcard(require("../pages/details/translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
let DashboardViewPromptState;
exports.DashboardViewPromptState = DashboardViewPromptState;
(function (DashboardViewPromptState) {
  DashboardViewPromptState["NoReadPermission"] = "NoReadPermission";
})(DashboardViewPromptState || (exports.DashboardViewPromptState = DashboardViewPromptState = {}));
const dashboardViewPromptState = {
  [DashboardViewPromptState.NoReadPermission]: {
    color: 'danger',
    iconType: 'error',
    title: /*#__PURE__*/_react.default.createElement("h2", null, i18n.DASHBOARD_NO_READ_PERMISSION_TITLE),
    body: /*#__PURE__*/_react.default.createElement("p", null, i18n.DASHBOARD_NO_READ_PERMISSION_DESCRIPTION)
  }
};
const useDashboardViewPromptState = currentState => {
  return currentState ? dashboardViewPromptState[currentState] : null;
};
exports.useDashboardViewPromptState = useDashboardViewPromptState;