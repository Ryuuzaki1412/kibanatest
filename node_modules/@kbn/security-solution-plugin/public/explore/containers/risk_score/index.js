"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  UserRiskScoreQueryId: true,
  HostRiskScoreQueryId: true
};
exports.UserRiskScoreQueryId = exports.HostRiskScoreQueryId = void 0;
var _all = require("./all");
Object.keys(_all).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _all[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _all[key];
    }
  });
});
var _kpi = require("./kpi");
Object.keys(_kpi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _kpi[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _kpi[key];
    }
  });
});
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
let UserRiskScoreQueryId;
exports.UserRiskScoreQueryId = UserRiskScoreQueryId;
(function (UserRiskScoreQueryId) {
  UserRiskScoreQueryId["USERS_BY_RISK"] = "UsersByRisk";
  UserRiskScoreQueryId["USER_DETAILS_RISK_SCORE"] = "UserDetailsRiskScore";
})(UserRiskScoreQueryId || (exports.UserRiskScoreQueryId = UserRiskScoreQueryId = {}));
let HostRiskScoreQueryId;
exports.HostRiskScoreQueryId = HostRiskScoreQueryId;
(function (HostRiskScoreQueryId) {
  HostRiskScoreQueryId["DEFAULT"] = "HostRiskScore";
  HostRiskScoreQueryId["HOST_DETAILS_RISK_SCORE"] = "HostDetailsRiskScore";
  HostRiskScoreQueryId["OVERVIEW_RISKY_HOSTS"] = "OverviewRiskyHosts";
  HostRiskScoreQueryId["HOSTS_BY_RISK"] = "HostsByRisk";
})(HostRiskScoreQueryId || (exports.HostRiskScoreQueryId = HostRiskScoreQueryId = {}));