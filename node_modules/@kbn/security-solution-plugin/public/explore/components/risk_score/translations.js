"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRiskEntityTranslationText = exports.getRiskEntityTranslation = exports.USERS = exports.USER = exports.RISK_SCORE_TITLE = exports.HOSTS = exports.HOST = exports.ENTITY_RISK_LEVEL = exports.ENTITY = exports.ENTITIES = exports.ALERTS = void 0;
var _i18n = require("@kbn/i18n");
var _search_strategy = require("../../../../common/search_strategy");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const HOST = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.hostTitle', {
  defaultMessage: 'Host'
});
exports.HOST = HOST;
const HOSTS = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.hosts', {
  defaultMessage: 'Hosts'
});
exports.HOSTS = HOSTS;
const USER = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.userTitle', {
  defaultMessage: 'User'
});
exports.USER = USER;
const USERS = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.users', {
  defaultMessage: 'Users'
});
exports.USERS = USERS;
const ENTITY = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.entityTitle', {
  defaultMessage: 'Entity'
});
exports.ENTITY = ENTITY;
const ENTITIES = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.entities', {
  defaultMessage: 'Entities'
});
exports.ENTITIES = ENTITIES;
const RISK_SCORE_TITLE = riskEntity => _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.riskScoreTitle', {
  defaultMessage: '{riskEntity} Risk Score',
  values: {
    riskEntity: getRiskEntityTranslation(riskEntity)
  }
});
exports.RISK_SCORE_TITLE = RISK_SCORE_TITLE;
const ENTITY_RISK_LEVEL = riskEntity => _i18n.i18n.translate('xpack.securitySolution.entityAnalytics.riskDashboard.riskLevelTitle', {
  defaultMessage: '{riskEntity} risk level',
  values: {
    riskEntity: getRiskEntityTranslation(riskEntity)
  }
});
exports.ENTITY_RISK_LEVEL = ENTITY_RISK_LEVEL;
const getRiskEntityTranslation = (riskEntity, lowercase = false, plural = false) => {
  const text = getRiskEntityTranslationText(riskEntity, plural);
  return lowercase ? text.toLowerCase() : text;
};
exports.getRiskEntityTranslation = getRiskEntityTranslation;
const getRiskEntityTranslationText = (riskEntity, plural) => {
  switch (riskEntity) {
    case _search_strategy.RiskScoreEntity.host:
      return plural ? HOSTS : HOST;
    case _search_strategy.RiskScoreEntity.user:
      return plural ? USERS : USER;
    default:
      return plural ? ENTITIES : ENTITY;
  }
};
exports.getRiskEntityTranslationText = getRiskEntityTranslationText;
const ALERTS = _i18n.i18n.translate('xpack.securitySolution.riskScore.overview.alerts', {
  defaultMessage: 'Alerts'
});
exports.ALERTS = ALERTS;