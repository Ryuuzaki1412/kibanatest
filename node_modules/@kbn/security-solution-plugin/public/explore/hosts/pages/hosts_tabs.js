"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HostsTabs = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _sharedUxRouter = require("@kbn/shared-ux-router");
var _securitysolutionDataTable = require("@kbn/securitysolution-data-table");
var _model = require("../store/model");
var _anomalies_query_tab_body = require("../../../common/containers/anomalies/anomalies_query_tab_body");
var _anomalies_host_table = require("../../../common/components/ml/tables/anomalies_host_table");
var _events_tab = require("../../../common/components/events_tab");
var _constants = require("../../../../common/constants");
var _navigation = require("./navigation");
var _utils = require("../../../common/components/visualization_actions/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const HostsTabs = /*#__PURE__*/_react.default.memo(({
  deleteQuery,
  filterQuery,
  from,
  indexNames,
  isInitializing,
  setQuery,
  to,
  type
}) => {
  const tabProps = {
    deleteQuery,
    endDate: to,
    filterQuery,
    indexNames,
    skip: isInitializing || filterQuery === undefined,
    setQuery,
    startDate: from,
    type
  };
  const hostNameExistsFilter = (0, _react.useMemo)(() => (0, _utils.fieldNameExistsFilter)(_constants.SecurityPageName.hosts), []);
  return /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Routes, null, /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Route, {
    path: `${_constants.HOSTS_PATH}/:tabName(${_model.HostsTableType.hosts})`
  }, /*#__PURE__*/_react.default.createElement(_navigation.HostsQueryTabBody, tabProps)), /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Route, {
    path: `${_constants.HOSTS_PATH}/:tabName(${_model.HostsTableType.risk})`
  }, /*#__PURE__*/_react.default.createElement(_navigation.HostRiskScoreQueryTabBody, tabProps)), /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Route, {
    path: `${_constants.HOSTS_PATH}/:tabName(${_model.HostsTableType.uncommonProcesses})`
  }, /*#__PURE__*/_react.default.createElement(_navigation.UncommonProcessQueryTabBody, tabProps)), /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Route, {
    path: `${_constants.HOSTS_PATH}/:tabName(${_model.HostsTableType.anomalies})`
  }, /*#__PURE__*/_react.default.createElement(_anomalies_query_tab_body.AnomaliesQueryTabBody, (0, _extends2.default)({}, tabProps, {
    AnomaliesTableComponent: _anomalies_host_table.AnomaliesHostTable
  }))), /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Route, {
    path: `${_constants.HOSTS_PATH}/:tabName(${_model.HostsTableType.events})`
  }, /*#__PURE__*/_react.default.createElement(_events_tab.EventsQueryTabBody, (0, _extends2.default)({
    additionalFilters: hostNameExistsFilter,
    tableId: _securitysolutionDataTable.TableId.hostsPageEvents
  }, tabProps))), /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Route, {
    path: `${_constants.HOSTS_PATH}/:tabName(${_model.HostsTableType.sessions})`
  }, /*#__PURE__*/_react.default.createElement(_navigation.SessionsTabBody, tabProps)));
});
exports.HostsTabs = HostsTabs;
HostsTabs.displayName = 'HostsTabs';