"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapEmbeddableFactory = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _operators = require("rxjs/operators");
var _i18n = require("@kbn/i18n");
var _constants = require("../../common/constants");
var _embeddable = require("../../common/embeddable");
var _kibana_services = require("../kibana_services");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


class MapEmbeddableFactory {
  constructor() {
    (0, _defineProperty2.default)(this, "type", _constants.MAP_SAVED_OBJECT_TYPE);
    (0, _defineProperty2.default)(this, "savedObjectMetaData", {
      name: _i18n.i18n.translate('xpack.maps.mapSavedObjectLabel', {
        defaultMessage: 'Map'
      }),
      type: _constants.MAP_SAVED_OBJECT_TYPE,
      getIconForSavedObject: () => _constants.APP_ICON
    });
    (0, _defineProperty2.default)(this, "createFromSavedObject", async (savedObjectId, input, parent) => {
      if (!input.savedObjectId) {
        input.savedObjectId = savedObjectId;
      }
      return this.create(input, parent);
    });
    (0, _defineProperty2.default)(this, "create", async (input, parent) => {
      const {
        MapEmbeddable
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('./map_embeddable')));
      const usageCollection = (0, _kibana_services.getUsageCollection)();
      if (usageCollection) {
        // currentAppId$ is a BehaviorSubject exposed as an observable so subscription gets last value upon subscribe
        (0, _kibana_services.getApplication)().currentAppId$.pipe((0, _operators.first)()).subscribe(appId => {
          if (appId) usageCollection.reportUiCounter('map', 'loaded', `open_maps_vis_${appId}`);
        });
      }
      return new MapEmbeddable({
        editable: await this.isEditable()
      }, input, parent);
    });
    (0, _defineProperty2.default)(this, "inject", _embeddable.inject);
    (0, _defineProperty2.default)(this, "extract", _embeddable.extract);
  }
  async isEditable() {
    return (0, _kibana_services.getMapsCapabilities)().save;
  }

  // Not supported yet for maps types.
  canCreateNew() {
    return false;
  }
  getDisplayName() {
    return _constants.MAP_EMBEDDABLE_NAME;
  }
}
exports.MapEmbeddableFactory = MapEmbeddableFactory;