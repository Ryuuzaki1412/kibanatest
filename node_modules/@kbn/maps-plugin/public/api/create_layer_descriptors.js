"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLayerDescriptors = void 0;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const createLayerDescriptors = {
  async createSecurityLayerDescriptors(indexPatternId, indexPatternTitle) {
    const {
      createSecurityLayerDescriptors
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../classes/layers/wizards/solution_layers/security')));
    return createSecurityLayerDescriptors(indexPatternId, indexPatternTitle);
  },
  async createBasemapLayerDescriptor() {
    const {
      createBasemapLayerDescriptor
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../classes/layers/create_basemap_layer_descriptor')));
    return createBasemapLayerDescriptor();
  },
  async createESSearchSourceLayerDescriptor(params) {
    const {
      createLayerDescriptor
    } = await Promise.resolve().then(() => _interopRequireWildcard(require('../classes/sources/es_search_source')));
    return createLayerDescriptor(params);
  }
};
exports.createLayerDescriptors = createLayerDescriptors;