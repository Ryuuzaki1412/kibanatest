"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpatialJoinExpression = SpatialJoinExpression;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _spatial_join_popover_content = require("./spatial_join_popover_content");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function SpatialJoinExpression(props) {
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const {
    geoField
  } = props.sourceDescriptor;
  const expressionValue = geoField !== undefined ? _i18n.i18n.translate('xpack.maps.spatialJoinExpression.value', {
    defaultMessage: 'features from {geoField}',
    values: {
      geoField
    }
  }) : _i18n.i18n.translate('xpack.maps.spatialJoinExpression.emptyValue', {
    defaultMessage: '-- configure spatial join --'
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    id: props.sourceDescriptor.id,
    isOpen: isPopoverOpen,
    closePopover: () => {
      setIsPopoverOpen(false);
    },
    ownFocus: true,
    initialFocus: "body" /* avoid initialFocus on Combobox */,
    anchorPosition: "leftCenter",
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiExpression, {
      onClick: () => {
        setIsPopoverOpen(!isPopoverOpen);
      },
      description: _i18n.i18n.translate('xpack.maps.spatialJoinExpression.description', {
        defaultMessage: 'Join with'
      }),
      uppercase: false,
      value: expressionValue
    }),
    repositionOnScroll: true
  }, /*#__PURE__*/_react.default.createElement(_spatial_join_popover_content.SpatialJoinPopoverContent, {
    sourceDescriptor: props.sourceDescriptor,
    onSourceDescriptorChange: props.onSourceDescriptorChange
  }));
}