"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateConnectorConfiguration = void 0;
var _i18n = require("@kbn/i18n");
var _ = require("..");
var _fetch_connectors = require("./fetch_connectors");
var _connectors = require("../types/connectors");
var _is_category_entry = require("../utils/is_category_entry");
var _is_not_nullish = require("../utils/is_not_nullish");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const updateConnectorConfiguration = async (client, connectorId, configuration) => {
  const connectorResult = await (0, _fetch_connectors.fetchConnectorById)(client, connectorId);
  const connector = connectorResult === null || connectorResult === void 0 ? void 0 : connectorResult.value;
  if (connector) {
    const status = connector.status === _connectors.ConnectorStatus.NEEDS_CONFIGURATION || connector.status === _connectors.ConnectorStatus.CREATED ? _connectors.ConnectorStatus.CONFIGURED : connector.status;
    const updatedConfig = Object.keys(connector.configuration).map(key => {
      var _configuration$key;
      const configEntry = connector.configuration[key];
      return (0, _is_category_entry.isConfigEntry)(configEntry) ? {
        ...configEntry,
        // ugly but needed because typescript refuses to believe this is defined
        key,
        value: (_configuration$key = configuration[key]) !== null && _configuration$key !== void 0 ? _configuration$key : configEntry.value
      } : undefined;
    }).filter(_is_not_nullish.isNotNullish).reduce((prev, curr) => {
      const {
        key,
        ...config
      } = curr;
      return {
        ...prev,
        [curr.key]: config
      };
    }, {});
    await client.update({
      doc: {
        configuration: updatedConfig,
        status
      },
      id: connectorId,
      if_primary_term: connectorResult === null || connectorResult === void 0 ? void 0 : connectorResult.primaryTerm,
      if_seq_no: connectorResult === null || connectorResult === void 0 ? void 0 : connectorResult.seqNo,
      index: _.CONNECTORS_INDEX
    });
    return updatedConfig;
  } else {
    throw new Error(_i18n.i18n.translate('searchConnectors.server.connectors.configuration.error', {
      defaultMessage: 'Could not find connector'
    }));
  }
};
exports.updateConnectorConfiguration = updateConnectorConfiguration;