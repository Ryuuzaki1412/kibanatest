"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFieldSpecs = exports.SearchBar = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _esQuery = require("@kbn/es-query");
var _public = require("@kbn/unified-search-plugin/public");
var _i18n = require("@kbn/i18n");
var _hooks = require("../hooks");
var _constants = require("../constants");
var _constants2 = require("../../../../common/constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const NoWrapQueryStringInput = (0, _styledComponents.default)(_public.QueryStringInput)`
  .kbnQueryBar__textarea {
    white-space: nowrap;
  }
`;
const getMappings = indexPattern => {
  switch (indexPattern) {
    case `.${_constants.AGENTS_PREFIX}`:
      return _constants2.AGENT_MAPPINGS;
    case `.${_constants.AGENT_POLICY_SAVED_OBJECT_TYPE}`:
      return _constants2.AGENT_POLICY_MAPPINGS;
    case `.${_constants.PACKAGE_POLICY_SAVED_OBJECT_TYPE}`:
      return _constants2.PACKAGE_POLICIES_MAPPINGS;
    case `.${_constants.FLEET_ENROLLMENT_API_PREFIX}`:
      return _constants2.ENROLLMENT_API_KEY_MAPPINGS;
    default:
      return {};
  }
};
const getType = type => {
  switch (type) {
    case 'keyword':
      return 'string';
    case 'text':
      return 'string';
    case 'version':
      return 'string';
    case 'integer':
      return 'number';
    case 'double':
      return 'number';
    default:
      return type;
  }
};
const concatKeys = (obj, parentKey = '') => {
  let result = [];
  for (const key in obj) {
    if (typeof obj[key] === 'object') {
      result = result.concat(concatKeys(obj[key], `${parentKey}${key}.`));
    } else {
      result.push(`${parentKey}${key}:${obj[key]}`);
    }
  }
  return result;
};
/** Exported for testing only **/
const getFieldSpecs = indexPattern => {
  const mapping = getMappings(indexPattern);
  // @ts-ignore-next-line
  const rawFields = concatKeys(mapping === null || mapping === void 0 ? void 0 : mapping.properties) || [];
  const fields = rawFields.map(field => field.replaceAll(/.properties/g, '')).map(field => field.replace(/.type/g, '')).map(field => field.split(':'));
  const fieldSpecs = fields.map(field => {
    return {
      name: field[0],
      type: getType(field[1]),
      searchable: true,
      aggregatable: true,
      esTypes: [field[1]]
    };
  });
  return fieldSpecs;
};
exports.getFieldSpecs = getFieldSpecs;
const SearchBar = ({
  value,
  fieldPrefix,
  onChange,
  placeholder,
  indexPattern = _constants.INDEX_NAME,
  dataTestSubj
}) => {
  const {
    data,
    dataViews,
    unifiedSearch,
    storage,
    notifications,
    http,
    docLinks,
    uiSettings,
    usageCollection
  } = (0, _hooks.useStartServices)();
  const [dataView, setDataView] = (0, _react.useState)();
  const isQueryValid = (0, _react.useMemo)(() => {
    if (!value || value === '') {
      return true;
    }
    try {
      (0, _esQuery.fromKueryExpression)(value);
      return true;
    } catch (e) {
      return false;
    }
  }, [value]);
  (0, _react.useEffect)(() => {
    const fetchFields = async () => {
      try {
        const fieldSpecs = getFieldSpecs(indexPattern);
        const fieldsMap = data.dataViews.fieldArrayToMap(fieldSpecs);
        const newDataView = await data.dataViews.create({
          title: indexPattern,
          fields: fieldsMap
        }, true);
        setDataView(newDataView);
      } catch (err) {
        setDataView(undefined);
      }
    };
    fetchFields();
  }, [data.dataViews, fieldPrefix, indexPattern]);
  return /*#__PURE__*/_react.default.createElement(NoWrapQueryStringInput, (0, _extends2.default)({
    iconType: "search",
    disableLanguageSwitcher: true,
    indexPatterns: dataView ? [dataView] : [],
    query: {
      query: value,
      language: 'kuery'
    },
    isInvalid: !isQueryValid,
    disableAutoFocus: true,
    placeholder: placeholder,
    onChange: newQuery => {
      onChange(newQuery.query);
    },
    onSubmit: newQuery => {
      onChange(newQuery.query, true);
    },
    submitOnBlur: true,
    isClearable: true,
    autoSubmit: true,
    appName: _i18n.i18n.translate('xpack.fleet.appTitle', {
      defaultMessage: 'Fleet'
    }),
    deps: {
      unifiedSearch,
      notifications,
      http,
      docLinks,
      uiSettings,
      data,
      dataViews,
      storage,
      usageCollection
    }
  }, dataTestSubj && {
    dataTestSubj
  }));
};
exports.SearchBar = SearchBar;