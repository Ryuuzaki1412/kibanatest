"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DashboardsButtons = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _constants = require("../../../../../../../common/constants");
var _hooks = require("../../../../hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useDashboardExists = dashboardId => {
  const [dashboardExists, setDashboardExists] = _react.default.useState(false);
  const [loading, setLoading] = _react.default.useState(true);
  const {
    dashboard: dashboardPlugin
  } = (0, _hooks.useStartServices)();
  (0, _react.useEffect)(() => {
    const fetchDashboard = async () => {
      try {
        const findDashboardsService = await dashboardPlugin.findDashboardsService();
        const [dashboard] = await findDashboardsService.findByIds([dashboardId]);
        setLoading(false);
        setDashboardExists((dashboard === null || dashboard === void 0 ? void 0 : dashboard.status) === 'success');
      } catch (e) {
        setLoading(false);
        setDashboardExists(false);
      }
    };
    fetchDashboard();
  }, [dashboardId, dashboardPlugin]);
  return {
    dashboardExists,
    loading
  };
};
const DashboardsButtons = () => {
  const dashboardLocator = (0, _hooks.useDashboardLocator)();
  const getDashboardHref = dashboardId => {
    return (dashboardLocator === null || dashboardLocator === void 0 ? void 0 : dashboardLocator.getRedirectUrl({
      dashboardId
    })) || '';
  };
  const {
    dashboardExists,
    loading: dashboardLoading
  } = useDashboardExists(_constants.DASHBOARD_LOCATORS_IDS.ELASTIC_AGENT_OVERVIEW);
  if (dashboardLoading || !dashboardExists) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s",
    justifyContent: "flexStart"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    iconType: "dashboardApp",
    href: getDashboardHref(_constants.DASHBOARD_LOCATORS_IDS.ELASTIC_AGENT_OVERVIEW),
    "data-test-subj": "ingestOverviewLinkButton"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.agentList.ingestOverviewlinkButton",
    defaultMessage: "Ingest Overview Metrics"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    iconType: "dashboardApp",
    href: getDashboardHref(_constants.DASHBOARD_LOCATORS_IDS.ELASTIC_AGENT_AGENT_INFO),
    "data-test-subj": "agentInfoLinkButton"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.agentList.agentInfoLinkButton",
    defaultMessage: "Agent Info Metrics"
  })))));
};
exports.DashboardsButtons = DashboardsButtons;