"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SavedObjectNamesCombo = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactQuery = require("@tanstack/react-query");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _hooks = require("../../../hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const fetchSavedObjectNames = async type => {
  var _response$data;
  const path = `/.kibana/_search`;
  const body = {
    size: 0,
    query: {
      bool: {
        filter: {
          term: {
            type
          }
        }
      }
    },
    aggs: {
      names: {
        terms: {
          field: `${type}.name`,
          size: 500
        }
      }
    }
  };
  const response = await (0, _hooks.sendRequest)({
    method: 'post',
    path: `/api/console/proxy`,
    query: {
      path,
      method: 'GET'
    },
    body
  });
  if (response.error) {
    throw new Error(response.error.message);
  }
  return (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.aggregations.names.buckets;
};
const SavedObjectNamesCombo = /*#__PURE__*/(0, _react.forwardRef)(({
  name,
  setName,
  type,
  setNamesStatus
}, ref) => {
  const {
    data: savedObjectNames,
    refetch,
    status
  } = (0, _reactQuery.useQuery)(['debug-saved-object-names', type], () => fetchSavedObjectNames(type), {
    refetchOnWindowFocus: false
  });
  setNamesStatus === null || setNamesStatus === void 0 ? void 0 : setNamesStatus(status);
  (0, _react.useImperativeHandle)(ref, () => ({
    refetchNames: refetch
  }));
  const comboBoxOptions = (savedObjectNames !== null && savedObjectNames !== void 0 ? savedObjectNames : []).map(obj => ({
    label: obj.key,
    value: obj.key
  }));
  const selectedOption = comboBoxOptions.find(option => option.value === name);
  const selectedOptions = selectedOption ? [selectedOption] : [];
  return /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
    prepend: "Name",
    "aria-label": _i18n.i18n.translate('xpack.fleet.debug.savedObjectDebugger.selectedSavedObjectLabel', {
      defaultMessage: 'Select a Saved Object'
    }),
    placeholder: _i18n.i18n.translate('xpack.fleet.debug.savedObjectDebugger.selectedSavedObjectLabel', {
      defaultMessage: 'Select a Saved Object'
    }),
    fullWidth: true,
    options: comboBoxOptions,
    singleSelection: {
      asPlainText: true
    },
    selectedOptions: selectedOptions,
    isLoading: status === 'loading',
    onChange: newSelectedOptions => {
      if (!newSelectedOptions.length) {
        setName(undefined);
      } else {
        setName(newSelectedOptions[0].value);
      }
    }
  });
});
exports.SavedObjectNamesCombo = SavedObjectNamesCombo;