"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FleetIndexDebugger = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _reactQuery = require("@tanstack/react-query");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _hooks = require("../../../hooks");
var _code_block = require("./code_block");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const fetchIndex = async index => {
  if (!index) return;
  const path = `/${index}/_search`;
  const response = await (0, _hooks.sendRequest)({
    method: 'post',
    path: `/api/console/proxy`,
    query: {
      path,
      method: 'GET'
    }
  });
  return response;
};
const FleetIndexDebugger = () => {
  var _error$reason, _indexResult$error, _indexResult$error$er, _indexResult$data;
  const indices = [{
    label: '.fleet-agents',
    value: '.fleet-agents'
  }, {
    label: '.fleet-actions',
    value: '.fleet-actions'
  }, {
    label: '.fleet-servers',
    value: '.fleet-servers'
  }, {
    label: '.fleet-enrollment-api-keys',
    value: '.fleet-enrollment-api-keys'
  }];
  const [index, setIndex] = (0, _react.useState)();
  const {
    data: indexResult,
    status
  } = (0, _reactQuery.useQuery)(['debug-indices', index], () => fetchIndex(index), {
    retry: false
  });
  const selectedOptions = index ? [indices.find(option => option.value === index)] : [];
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.debug.fleetIndexDebugger.description",
    defaultMessage: "Search for the contents of Fleet indices. Use the code block below to diagnose any potential issues. "
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, null, /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
    prepend: "Index",
    "aria-label": _i18n.i18n.translate('xpack.fleet.debug.fleetIndexDebugger.selectLabel', {
      defaultMessage: 'Select an index'
    }),
    placeholder: _i18n.i18n.translate('xpack.fleet.debug.fleetIndexDebugger.selectLabel', {
      defaultMessage: 'Select an index'
    }),
    fullWidth: true,
    options: indices,
    singleSelection: {
      asPlainText: true
    },
    selectedOptions: selectedOptions,
    isLoading: status === 'loading',
    onChange: newSelectedOptions => {
      if (!newSelectedOptions.length) {
        setIndex(undefined);
      } else {
        setIndex(newSelectedOptions[0].value);
      }
    }
  })))), (indexResult === null || indexResult === void 0 ? void 0 : indexResult.error) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: "Error",
    color: "danger"
  }, (_error$reason = indexResult === null || indexResult === void 0 ? void 0 : (_indexResult$error = indexResult.error) === null || _indexResult$error === void 0 ? void 0 : (_indexResult$error$er = _indexResult$error.error) === null || _indexResult$error$er === void 0 ? void 0 : _indexResult$error$er.reason) !== null && _error$reason !== void 0 ? _error$reason : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.debug.fleetIndexDebugger.fetchError",
    defaultMessage: "Error fetching index data"
  }))), indexResult && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_code_block.CodeBlock, {
    value: JSON.stringify((_indexResult$data = indexResult.data) === null || _indexResult$data === void 0 ? void 0 : _indexResult$data.hits, null, 2)
  })));
};
exports.FleetIndexDebugger = FleetIndexDebugger;