"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Policy = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _edit_package_policy_page = require("../../../../../fleet/sections/agent_policy/edit_package_policy_page");
var _hooks = require("../../../../hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// TODO: Needs to be moved

const Policy = /*#__PURE__*/(0, _react.memo)(() => {
  var _packagePolicyData$it, _packagePolicyData$it2, _packagePolicyData$it3;
  const {
    params: {
      packagePolicyId
    }
  } = (0, _reactRouterDom.useRouteMatch)();
  const {
    search
  } = (0, _reactRouterDom.useLocation)();
  const {
    data: packagePolicyData
  } = (0, _hooks.useGetOnePackagePolicyQuery)(packagePolicyId);
  const extensionView = (0, _hooks.useUIExtension)((_packagePolicyData$it = packagePolicyData === null || packagePolicyData === void 0 ? void 0 : (_packagePolicyData$it2 = packagePolicyData.item) === null || _packagePolicyData$it2 === void 0 ? void 0 : (_packagePolicyData$it3 = _packagePolicyData$it2.package) === null || _packagePolicyData$it3 === void 0 ? void 0 : _packagePolicyData$it3.name) !== null && _packagePolicyData$it !== void 0 ? _packagePolicyData$it : '', 'package-policy-edit');
  const qs = new URLSearchParams(search);
  const fromQs = qs.get('from');
  let from;
  if (fromQs && fromQs === 'fleet-policy-list') {
    from = 'edit';
  } else {
    from = 'package-edit';
  }
  return /*#__PURE__*/_react.default.createElement(_edit_package_policy_page.EditPackagePolicyForm, {
    packagePolicyId: packagePolicyId,
    from: from,
    forceUpgrade: extensionView === null || extensionView === void 0 ? void 0 : extensionView.useLatestPackageVersion
  });
});
exports.Policy = Policy;