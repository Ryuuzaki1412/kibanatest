"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onResize = exports.DiscoverDocuments = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _react2 = require("@emotion/react");
var _cellActions = require("@kbn/cell-actions");
var _searchResponseWarnings = require("@kbn/search-response-warnings");
var _unifiedDataTable = require("@kbn/unified-data-table");
var _discoverUtils = require("@kbn/discover-utils");
var _useObservable = _interopRequireDefault(require("react-use/lib/useObservable"));
var _discover_grid = require("../../../../components/discover_grid");
var _constants = require("../../../../../common/constants");
var _discover_internal_state_container = require("../../services/discover_internal_state_container");
var _discover_app_state_container = require("../../services/discover_app_state_container");
var _use_discover_services = require("../../../../hooks/use_discover_services");
var _types = require("../../../types");
var _discover_data_state_container = require("../../services/discover_data_state_container");
var _use_data_state = require("../../hooks/use_data_state");
var _doc_table_infinite = require("../../../../components/doc_table/doc_table_infinite");
var _document_explorer_callout = require("../document_explorer_callout");
var _document_explorer_update_callout = require("../document_explorer_callout/document_explorer_update_callout");
var _discover_tour = require("../../../../components/discover_tour");
var _get_raw_record_type = require("../../utils/get_raw_record_type");
var _get_allowed_sample_size = require("../../../../utils/get_allowed_sample_size");
var _discover_grid_flyout = require("../../../../components/discover_grid_flyout");
var _render_custom_toolbar = require("../../../../components/discover_grid/render_custom_toolbar");
var _discover_state_provider = require("../../services/discover_state_provider");
var _use_fetch_more_records = require("./use_fetch_more_records");
var _selected_vs_available_callout = require("./selected_vs_available_callout");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const containerStyles = (0, _react2.css)`
  position: relative;
`;
const progressStyle = (0, _react2.css)`
  z-index: 2;
`;
const TOUR_STEPS = {
  expandButton: _discover_tour.DISCOVER_TOUR_STEP_ANCHOR_IDS.expandDocument
};
const DocTableInfiniteMemoized = /*#__PURE__*/_react.default.memo(_doc_table_infinite.DocTableInfinite);
const DiscoverGridMemoized = /*#__PURE__*/_react.default.memo(_discover_grid.DiscoverGrid);

// export needs for testing
const onResize = (colSettings, stateContainer) => {
  const state = stateContainer.appState.getState();
  const grid = {
    ...(state.grid || {})
  };
  const newColumns = {
    ...(grid.columns || {})
  };
  newColumns[colSettings.columnId] = {
    width: Math.round(colSettings.width)
  };
  const newGrid = {
    ...grid,
    columns: newColumns
  };
  stateContainer.appState.update({
    grid: newGrid
  });
};
exports.onResize = onResize;
function DiscoverDocumentsComponent({
  viewModeToggle,
  dataView,
  onAddFilter,
  stateContainer,
  onFieldEdited
}) {
  const services = (0, _use_discover_services.useDiscoverServices)();
  const documents$ = stateContainer.dataState.data$.documents$;
  const savedSearch = (0, _discover_state_provider.useSavedSearchInitial)();
  const {
    dataViews,
    capabilities,
    uiSettings,
    uiActions
  } = services;
  const [query, sort, rowHeight, rowsPerPage, grid, columns, index, sampleSizeState] = (0, _discover_app_state_container.useAppStateSelector)(state => {
    return [state.query, state.sort, state.rowHeight, state.rowsPerPage, state.grid, state.columns, state.index, state.sampleSize];
  });
  const setExpandedDoc = (0, _react.useCallback)(doc => {
    stateContainer.internalState.transitions.setExpandedDoc(doc);
  }, [stateContainer]);
  const expandedDoc = (0, _discover_internal_state_container.useInternalStateSelector)(state => state.expandedDoc);
  const useNewFieldsApi = (0, _react.useMemo)(() => !uiSettings.get(_discoverUtils.SEARCH_FIELDS_FROM_SOURCE), [uiSettings]);
  const hideAnnouncements = (0, _react.useMemo)(() => uiSettings.get(_discoverUtils.HIDE_ANNOUNCEMENTS), [uiSettings]);
  const isLegacy = (0, _react.useMemo)(() => uiSettings.get(_discoverUtils.DOC_TABLE_LEGACY), [uiSettings]);
  const documentState = (0, _use_data_state.useDataState)(documents$);
  const isDataLoading = documentState.fetchStatus === _types.FetchStatus.LOADING || documentState.fetchStatus === _types.FetchStatus.PARTIAL;
  const isTextBasedQuery = (0, _react.useMemo)(() => (0, _get_raw_record_type.getRawRecordType)(query) === _discover_data_state_container.RecordRawType.PLAIN, [query]);
  // This is needed to prevent EuiDataGrid pushing onSort because the data view has been switched.
  // It's just necessary for non-text-based query lang requests since they don't have a partial result state, that's
  // considered as loading state in the Component.
  // 1. When switching the data view, the sorting in the URL is reset to the default sorting of the selected data view.
  // 2. The new sort param is already available in this component and propagated to the EuiDataGrid.
  // 3. currentColumns are still referring to the old state
  // 4. since the new sort by field isn't available in currentColumns EuiDataGrid is emitting a 'onSort', which is unsorting the grid
  // 5. this is propagated to Discover's URL and causes an unwanted change of state to an unsorted state
  // This solution switches to the loading state in this component when the URL index doesn't match the dataView.id
  const isDataViewLoading = !isTextBasedQuery && dataView.id && index !== dataView.id;
  const isEmptyDataResult = isTextBasedQuery || !documentState.result || documentState.result.length === 0;
  const rows = (0, _react.useMemo)(() => documentState.result || [], [documentState.result]);
  const {
    isMoreDataLoading,
    totalHits,
    onFetchMoreRecords
  } = (0, _use_fetch_more_records.useFetchMoreRecords)({
    isTextBasedQuery,
    stateContainer
  });
  const {
    columns: currentColumns,
    onAddColumn,
    onRemoveColumn,
    onMoveColumn,
    onSetColumns
  } = (0, _unifiedDataTable.useColumns)({
    capabilities,
    defaultOrder: uiSettings.get(_discoverUtils.SORT_DEFAULT_ORDER_SETTING),
    dataView,
    dataViews,
    setAppState: stateContainer.appState.update,
    useNewFieldsApi,
    columns,
    sort
  });
  const onResizeDataGrid = (0, _react.useCallback)(colSettings => onResize(colSettings, stateContainer), [stateContainer]);
  const onUpdateRowsPerPage = (0, _react.useCallback)(nextRowsPerPage => {
    stateContainer.appState.update({
      rowsPerPage: nextRowsPerPage
    });
  }, [stateContainer]);
  const onUpdateSampleSize = (0, _react.useCallback)(newSampleSize => {
    stateContainer.appState.update({
      sampleSize: newSampleSize
    });
  }, [stateContainer]);
  const onSort = (0, _react.useCallback)(nextSort => {
    stateContainer.appState.update({
      sort: nextSort
    });
  }, [stateContainer]);
  const onUpdateRowHeight = (0, _react.useCallback)(newRowHeight => {
    stateContainer.appState.update({
      rowHeight: newRowHeight
    });
  }, [stateContainer]);
  const showTimeCol = (0, _react.useMemo)(() =>
  // for ES|QL we want to show the time column only when is on Document view
  (!isTextBasedQuery || !(columns !== null && columns !== void 0 && columns.length)) && !uiSettings.get(_discoverUtils.DOC_HIDE_TIME_COLUMN_SETTING, false) && !!dataView.timeFieldName, [isTextBasedQuery, columns, uiSettings, dataView.timeFieldName]);
  const columnTypes = (0, _react.useMemo)(() => documentState.textBasedQueryColumns ? (0, _unifiedDataTable.getTextBasedColumnTypes)(documentState.textBasedQueryColumns) : undefined, [documentState.textBasedQueryColumns]);
  const renderDocumentView = (0, _react.useCallback)((hit, displayedRows, displayedColumns, customColumnTypes) => /*#__PURE__*/_react.default.createElement(_discover_grid_flyout.DiscoverGridFlyout, {
    dataView: dataView,
    hit: hit,
    hits: displayedRows
    // if default columns are used, dont make them part of the URL - the context state handling will take care to restore them
    ,
    columns: displayedColumns,
    columnTypes: customColumnTypes,
    savedSearchId: savedSearch.id,
    onFilter: onAddFilter,
    onRemoveColumn: onRemoveColumn,
    onAddColumn: onAddColumn,
    onClose: () => setExpandedDoc(undefined),
    setExpandedDoc: setExpandedDoc,
    query: query
  }), [dataView, onAddColumn, onAddFilter, onRemoveColumn, query, savedSearch.id, setExpandedDoc]);
  const documents = (0, _useObservable.default)(stateContainer.dataState.data$.documents$);
  const callouts = (0, _react.useMemo)(() => {
    var _documentState$interc;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_selected_vs_available_callout.SelectedVSAvailableCallout, {
      isPlainRecord: isTextBasedQuery,
      textBasedQueryColumns: documents === null || documents === void 0 ? void 0 : documents.textBasedQueryColumns,
      selectedColumns: currentColumns
    }), /*#__PURE__*/_react.default.createElement(_searchResponseWarnings.SearchResponseWarningsCallout, {
      warnings: (_documentState$interc = documentState.interceptedWarnings) !== null && _documentState$interc !== void 0 ? _documentState$interc : []
    }));
  }, [isTextBasedQuery, currentColumns, documents === null || documents === void 0 ? void 0 : documents.textBasedQueryColumns, documentState.interceptedWarnings]);
  const gridAnnouncementCallout = (0, _react.useMemo)(() => {
    if (hideAnnouncements || isLegacy) {
      return null;
    }
    return !isTextBasedQuery ? /*#__PURE__*/_react.default.createElement(_discover_tour.DiscoverTourProvider, {
      isPlainRecord: isTextBasedQuery
    }, /*#__PURE__*/_react.default.createElement(_document_explorer_update_callout.DocumentExplorerUpdateCallout, null)) : null;
  }, [hideAnnouncements, isLegacy, isTextBasedQuery]);
  const loadingIndicator = (0, _react.useMemo)(() => isDataLoading ? /*#__PURE__*/_react.default.createElement(_eui.EuiProgress, {
    "data-test-subj": "discoverDataGridUpdating",
    size: "xs",
    color: "accent",
    position: "absolute",
    css: progressStyle
  }) : null, [isDataLoading]);
  const renderCustomToolbar = (0, _react.useMemo)(() => (0, _render_custom_toolbar.getRenderCustomToolbarWithElements)({
    leftSide: viewModeToggle,
    bottomSection: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, callouts, gridAnnouncementCallout, loadingIndicator)
  }), [viewModeToggle, callouts, gridAnnouncementCallout, loadingIndicator]);
  if (isDataViewLoading || isEmptyDataResult && isDataLoading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "dscDocuments__loading"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
      size: "xs",
      color: "subdued"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
      size: "s"
    }), /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "discover.loadingDocuments",
      defaultMessage: "Loading documents"
    })));
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isLegacy && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, viewModeToggle), callouts), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    className: "dscTable",
    "aria-labelledby": "documentsAriaLabel",
    css: containerStyles
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiScreenReaderOnly, null, /*#__PURE__*/_react.default.createElement("h2", {
    id: "documentsAriaLabel"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "discover.documentsAriaLabel",
    defaultMessage: "Documents"
  }))), isLegacy && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, rows && rows.length > 0 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !hideAnnouncements && /*#__PURE__*/_react.default.createElement(_document_explorer_callout.DocumentExplorerCallout, null), /*#__PURE__*/_react.default.createElement(DocTableInfiniteMemoized, {
    columns: currentColumns,
    dataView: dataView,
    rows: rows,
    sort: sort || [],
    isLoading: isDataLoading,
    searchDescription: savedSearch.description,
    sharedItemTitle: savedSearch.title,
    isPlainRecord: isTextBasedQuery,
    onAddColumn: onAddColumn,
    onFilter: onAddFilter,
    onMoveColumn: onMoveColumn,
    onRemoveColumn: onRemoveColumn,
    onSort: !isTextBasedQuery ? onSort : undefined,
    useNewFieldsApi: useNewFieldsApi,
    dataTestSubj: "discoverDocTable"
  })), loadingIndicator), !isLegacy && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "unifiedDataTable"
  }, /*#__PURE__*/_react.default.createElement(_cellActions.CellActionsProvider, {
    getTriggerCompatibleActions: uiActions.getTriggerCompatibleActions
  }, /*#__PURE__*/_react.default.createElement(DiscoverGridMemoized, {
    ariaLabelledBy: "documentsAriaLabel",
    columns: currentColumns,
    columnTypes: columnTypes,
    expandedDoc: expandedDoc,
    dataView: dataView,
    loadingState: isDataLoading ? _unifiedDataTable.DataLoadingState.loading : isMoreDataLoading ? _unifiedDataTable.DataLoadingState.loadingMore : _unifiedDataTable.DataLoadingState.loaded,
    rows: rows,
    sort: sort || [],
    searchDescription: savedSearch.description,
    searchTitle: savedSearch.title,
    setExpandedDoc: setExpandedDoc,
    showTimeCol: showTimeCol,
    settings: grid,
    onFilter: onAddFilter,
    onSetColumns: onSetColumns,
    onSort: !isTextBasedQuery ? onSort : undefined,
    onResize: onResizeDataGrid,
    useNewFieldsApi: useNewFieldsApi,
    rowHeightState: rowHeight,
    onUpdateRowHeight: onUpdateRowHeight,
    isSortEnabled: isTextBasedQuery ? Boolean(currentColumns.length) : true,
    isPlainRecord: isTextBasedQuery,
    rowsPerPageState: rowsPerPage !== null && rowsPerPage !== void 0 ? rowsPerPage : (0, _constants.getDefaultRowsPerPage)(services.uiSettings),
    onUpdateRowsPerPage: onUpdateRowsPerPage,
    maxAllowedSampleSize: (0, _get_allowed_sample_size.getMaxAllowedSampleSize)(services.uiSettings),
    sampleSizeState: (0, _get_allowed_sample_size.getAllowedSampleSize)(sampleSizeState, services.uiSettings),
    onUpdateSampleSize: !isTextBasedQuery ? onUpdateSampleSize : undefined,
    onFieldEdited: onFieldEdited,
    configRowHeight: uiSettings.get(_discoverUtils.ROW_HEIGHT_OPTION),
    showMultiFields: uiSettings.get(_discoverUtils.SHOW_MULTIFIELDS),
    maxDocFieldsDisplayed: uiSettings.get(_discoverUtils.MAX_DOC_FIELDS_DISPLAYED),
    renderDocumentView: renderDocumentView,
    renderCustomToolbar: renderCustomToolbar,
    services: services,
    totalHits: totalHits,
    onFetchMoreRecords: onFetchMoreRecords,
    componentsTourSteps: TOUR_STEPS
  }))))));
}
const DiscoverDocuments = /*#__PURE__*/(0, _react.memo)(DiscoverDocumentsComponent);
exports.DiscoverDocuments = DiscoverDocuments;