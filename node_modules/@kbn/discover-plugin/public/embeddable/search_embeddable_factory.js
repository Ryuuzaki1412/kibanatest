"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchEmbeddableFactory = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/embeddable-plugin/public");
var _constants = require("./constants");
var _embeddable = require("../../common/embeddable");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
and the Server Side Public License, v 1; you may not use this file except
in compliance with, at your election, the Elastic License 2.0 or the Server
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Side Public License, v 1.

class SearchEmbeddableFactory {
  constructor(getStartServices, getDiscoverServices) {
    (0, _defineProperty2.default)(this, "type", _constants.SEARCH_EMBEDDABLE_TYPE);
    (0, _defineProperty2.default)(this, "savedObjectMetaData", {
      name: _i18n.i18n.translate('discover.savedSearch.savedObjectName', {
        defaultMessage: 'Saved search'
      }),
      type: 'search',
      getIconForSavedObject: () => 'discoverApp'
    });
    (0, _defineProperty2.default)(this, "inject", _embeddable.inject);
    (0, _defineProperty2.default)(this, "extract", _embeddable.extract);
    (0, _defineProperty2.default)(this, "isEditable", async () => {
      return (await this.getStartServices()).isEditable();
    });
    (0, _defineProperty2.default)(this, "createFromSavedObject", async (savedObjectId, input, parent) => {
      if (!input.savedObjectId) {
        input.savedObjectId = savedObjectId;
      }
      return this.create(input, parent);
    });
    this.getStartServices = getStartServices;
    this.getDiscoverServices = getDiscoverServices;
  }
  canCreateNew() {
    return false;
  }
  getDisplayName() {
    return _i18n.i18n.translate('discover.embeddable.search.displayName', {
      defaultMessage: 'search'
    });
  }
  async create(input, parent) {
    try {
      const services = await this.getDiscoverServices();
      const {
        executeTriggerActions
      } = await this.getStartServices();
      const {
        SavedSearchEmbeddable: SavedSearchEmbeddableClass
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('./saved_search_embeddable')));
      return new SavedSearchEmbeddableClass({
        editable: Boolean(services.capabilities.discover.save),
        services,
        executeTriggerActions
      }, input, parent);
    } catch (e) {
      console.error(e); // eslint-disable-line no-console
      return new _public.ErrorEmbeddable(e, input, parent);
    }
  }
}
exports.SearchEmbeddableFactory = SearchEmbeddableFactory;