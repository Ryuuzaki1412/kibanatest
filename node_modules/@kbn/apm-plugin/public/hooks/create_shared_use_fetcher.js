"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSharedUseFetcher = createSharedUseFetcher;
var _react = _interopRequireWildcard(require("react"));
var _use_fetcher = require("./use_fetcher");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function createSharedUseFetcher(endpoint) {
  const Context = /*#__PURE__*/(0, _react.createContext)(undefined);
  const returnValue = {
    useFetcherResult: () => {
      const context = (0, _react.useContext)(Context);
      if (!context) {
        throw new Error('Context was not found');
      }
      const params = context.params;
      const result = (0, _use_fetcher.useFetcher)(callApmApi => {
        return callApmApi(...[endpoint, {
          params
        }]);
      }, [params]);
      return result;
    },
    Provider: props => {
      const {
        children
      } = props;
      const params = props.params;
      const memoizedParams = (0, _react.useMemo)(() => {
        return {
          params
        };
      }, [params]);
      return /*#__PURE__*/_react.default.createElement(Context.Provider, {
        value: memoizedParams
      }, children);
    }
  };
  return returnValue;
}