"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.settingsRoute = void 0;
var _i18n = require("@kbn/i18n");
var _typedReactRouterConfig = require("@kbn/typed-react-router-config");
var t = _interopRequireWildcard(require("io-ts"));
var _react = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
var _constants = require("../../../../common/agent_configuration/constants");
var _environment_rt = require("../../../../common/environment_rt");
var _breadcrumb = require("../../app/breadcrumb");
var _agent_configurations = require("../../app/settings/agent_configurations");
var _agent_explorer = require("../../app/settings/agent_explorer");
var _agent_keys = require("../../app/settings/agent_keys");
var _anomaly_detection = require("../../app/settings/anomaly_detection");
var _apm_indices = require("../../app/settings/apm_indices");
var _custom_link = require("../../app/settings/custom_link");
var _general_settings = require("../../app/settings/general_settings");
var _schema = require("../../app/settings/schema");
var _settings_template = require("../templates/settings_template");
var _create_agent_configuration_route_view = require("./create_agent_configuration_route_view");
var _edit_agent_configuration_route_view = require("./edit_agent_configuration_route_view");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function page({
  title,
  tab,
  element
}) {
  return {
    element: /*#__PURE__*/_react.default.createElement(_breadcrumb.Breadcrumb, {
      title: title,
      href: `/settings/${tab}`
    }, /*#__PURE__*/_react.default.createElement(_settings_template.SettingsTemplate, {
      selectedTab: tab
    }, element))
  };
}
const settingsRoute = {
  '/settings': {
    element: /*#__PURE__*/_react.default.createElement(_breadcrumb.Breadcrumb, {
      href: "/settings",
      title: _i18n.i18n.translate('xpack.apm.views.listSettings.title', {
        defaultMessage: 'Settings'
      })
    }, /*#__PURE__*/_react.default.createElement(_typedReactRouterConfig.Outlet, null)),
    children: {
      '/settings/general-settings': page({
        title: _i18n.i18n.translate('xpack.apm.views.settings.generalSettings.title', {
          defaultMessage: 'General settings'
        }),
        element: /*#__PURE__*/_react.default.createElement(_general_settings.GeneralSettings, null),
        tab: 'general-settings'
      }),
      '/settings/agent-configuration': page({
        tab: 'agent-configuration',
        title: _i18n.i18n.translate('xpack.apm.views.settings.agentConfiguration.title', {
          defaultMessage: 'Agent Configuration'
        }),
        element: /*#__PURE__*/_react.default.createElement(_agent_configurations.AgentConfigurations, null)
      }),
      '/settings/agent-configuration/create': {
        ...page({
          title: _i18n.i18n.translate('xpack.apm.views.settings.createAgentConfiguration.title', {
            defaultMessage: 'Create Agent Configuration'
          }),
          tab: 'agent-configuration',
          element: /*#__PURE__*/_react.default.createElement(_create_agent_configuration_route_view.CreateAgentConfigurationRouteView, null)
        }),
        params: t.partial({
          query: t.partial({
            pageStep: _constants.agentConfigurationPageStepRt
          })
        })
      },
      '/settings/agent-configuration/edit': {
        ...page({
          title: _i18n.i18n.translate('xpack.apm.views.settings.editAgentConfiguration.title', {
            defaultMessage: 'Edit Agent Configuration'
          }),
          tab: 'agent-configuration',
          element: /*#__PURE__*/_react.default.createElement(_edit_agent_configuration_route_view.EditAgentConfigurationRouteView, null)
        }),
        params: t.partial({
          query: t.partial({
            environment: t.string,
            name: t.string,
            pageStep: _constants.agentConfigurationPageStepRt
          })
        })
      },
      '/settings/apm-indices': page({
        title: _i18n.i18n.translate('xpack.apm.views.settings.indices.title', {
          defaultMessage: 'Indices'
        }),
        tab: 'apm-indices',
        element: /*#__PURE__*/_react.default.createElement(_apm_indices.ApmIndices, null)
      }),
      '/settings/custom-links': page({
        title: _i18n.i18n.translate('xpack.apm.views.settings.customLink.title', {
          defaultMessage: 'Custom Links'
        }),
        tab: 'custom-links',
        element: /*#__PURE__*/_react.default.createElement(_custom_link.CustomLinkOverview, null)
      }),
      '/settings/schema': page({
        title: _i18n.i18n.translate('xpack.apm.views.settings.schema.title', {
          defaultMessage: 'Schema'
        }),
        element: /*#__PURE__*/_react.default.createElement(_schema.Schema, null),
        tab: 'schema'
      }),
      '/settings/anomaly-detection': page({
        title: _i18n.i18n.translate('xpack.apm.views.settings.anomalyDetection.title', {
          defaultMessage: 'Anomaly detection'
        }),
        element: /*#__PURE__*/_react.default.createElement(_anomaly_detection.AnomalyDetection, null),
        tab: 'anomaly-detection'
      }),
      '/settings/agent-keys': page({
        title: _i18n.i18n.translate('xpack.apm.views.settings.agentKeys.title', {
          defaultMessage: 'Agent keys'
        }),
        element: /*#__PURE__*/_react.default.createElement(_agent_keys.AgentKeys, null),
        tab: 'agent-keys'
      }),
      '/settings/agent-explorer': {
        ...page({
          title: _i18n.i18n.translate('xpack.apm.views.settings.agentExplorer.title', {
            defaultMessage: 'Agent explorer'
          }),
          element: /*#__PURE__*/_react.default.createElement(_agent_explorer.AgentExplorer, null),
          tab: 'agent-explorer'
        }),
        params: t.type({
          query: t.intersection([_environment_rt.environmentRt, t.type({
            kuery: t.string,
            agentLanguage: t.string,
            serviceName: t.string
          })])
        })
      },
      '/settings': {
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: "/settings/general-settings"
        })
      }
    }
  }
};
exports.settingsRoute = settingsRoute;