"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolicyJsonFlyout = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _shared_imports = require("../../../../shared_imports");
var _i18n_texts = require("../i18n_texts");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Ensure that the JSON we get from the from has phases in the correct order.
 */
const prettifyFormJson = policy => {
  return {
    phases: {
      hot: policy.phases.hot,
      warm: policy.phases.warm,
      cold: policy.phases.cold,
      frozen: policy.phases.frozen,
      delete: policy.phases.delete
    },
    _meta: policy._meta
  };
};
const PolicyJsonFlyout = ({
  policyName,
  close
}) => {
  /**
   * policy === undefined: we are checking validity
   * policy === null: we have determined the policy is invalid
   * policy === {@link PolicyJson} we have determined the policy is valid
   */
  const [policyJson, setPolicyJson] = (0, _react.useState)(undefined);
  const {
    validate: validateForm,
    getErrors
  } = (0, _shared_imports.useFormContext)();
  const [, getFormData] = (0, _shared_imports.useFormData)();
  const updatePolicy = (0, _react.useCallback)(async () => {
    setPolicyJson(undefined);
    const isFormValid = await validateForm();
    const errorMessages = getErrors();
    const isOnlyMissingPolicyName = errorMessages.length === 1 && errorMessages[0] === _i18n_texts.i18nTexts.editPolicy.errors.policyNameRequiredMessage;
    if (isFormValid || isOnlyMissingPolicyName) {
      setPolicyJson(prettifyFormJson(getFormData()));
    } else {
      setPolicyJson(null);
    }
  }, [setPolicyJson, getFormData, validateForm, getErrors]);
  (0, _react.useEffect)(() => {
    updatePolicy();
  }, [updatePolicy]);
  let content;
  switch (policyJson) {
    case undefined:
      content = /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null);
      break;
    case null:
      content = /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
        "data-test-subj": "policyRequestInvalidAlert",
        iconType: "warning",
        color: "danger",
        title: _i18n.i18n.translate('xpack.indexLifecycleMgmt.policyJsonFlyout.validationErrorCallout.title', {
          defaultMessage: 'Invalid policy'
        })
      }, _i18n.i18n.translate('xpack.indexLifecycleMgmt.policyJsonFlyout.validationErrorCallout.body', {
        defaultMessage: 'To view the JSON for this policy address all validation errors.'
      }));
      break;
    default:
      const json = JSON.stringify({
        policy: {
          ...policyJson
        }
      }, null, 2);
      const endpoint = `PUT _ilm/policy/${policyName || '<policyName>'}`;
      const request = `${endpoint}\n${json}`;
      content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.indexLifecycleMgmt.policyJsonFlyout.descriptionText",
        defaultMessage: "This Elasticsearch request will create or update this index lifecycle policy."
      }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
        language: "json",
        isCopyable: true,
        "data-test-subj": "policyRequestJson"
      }, request));
      break;
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlyout, {
    maxWidth: 480,
    onClose: close
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlyoutHeader, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, null, /*#__PURE__*/_react.default.createElement("h2", null, policyName ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.indexLifecycleMgmt.policyJsonFlyout.namedTitle",
    defaultMessage: "Request for '{policyName}'",
    values: {
      policyName
    }
  }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.indexLifecycleMgmt.policyJsonFlyout.unnamedTitle",
    defaultMessage: "Request"
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlyoutBody, null, content), /*#__PURE__*/_react.default.createElement(_eui.EuiFlyoutFooter, null, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    iconType: "cross",
    onClick: close,
    flush: "left",
    "data-test-subj": "policyRequestClose"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.indexLifecycleMgmt.policyJsonFlyout.closeButtonLabel",
    defaultMessage: "Close"
  }))));
};
exports.PolicyJsonFlyout = PolicyJsonFlyout;