"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.esql_parser = exports.WhereCommandContext = exports.WhereBooleanExpressionContext = exports.ValueExpressionContext = exports.UserVariableContext = exports.SubqueryExpressionContext = exports.StringContext = exports.StatsCommandContext = exports.SourceIdentifierContext = exports.SourceCommandContext = exports.SortCommandContext = exports.SingleStatementContext = exports.SingleCommandQueryContext = exports.ShowCommandContext = exports.RowCommandContext = exports.RenameVariableContext = exports.RenameCommandContext = exports.RenameClauseContext = exports.RegexBooleanExpressionContext = exports.QueryContext = exports.QualifiedNamesContext = exports.QualifiedNameContext = exports.ProjectCommandContext = exports.ProcessingCommandContext = exports.PrimaryExpressionContext = exports.OrderExpressionContext = exports.OperatorExpressionContext = exports.NumericValueContext = exports.NumberContext = exports.MvExpandCommandContext = exports.MetadataContext = exports.MathFunctionIdentifierContext = exports.MathFunctionExpressionArgumentContext = exports.MathFnContext = exports.MathEvalFnContext = exports.LimitCommandContext = exports.KeepCommandContext = exports.IntegerValueContext = exports.IntegerLiteralContext = exports.IdentifierContext = exports.GrokCommandContext = exports.FunctionIdentifierContext = exports.FunctionExpressionArgumentContext = exports.FromCommandContext = exports.FieldsContext = exports.FieldContext = exports.ExplainCommandContext = exports.EvalCommandContext = exports.EnrichWithClauseContext = exports.EnrichIdentifierContext = exports.EnrichFieldIdentifierContext = exports.EnrichCommandContext = exports.DropCommandContext = exports.DissectCommandContext = exports.DecimalValueContext = exports.DecimalLiteralContext = exports.DateExpressionContext = exports.ConstantContext = exports.CompositeQueryContext = exports.ComparisonOperatorContext = exports.ComparisonContext = exports.CommandOptionsContext = exports.CommandOptionContext = exports.BooleanValueContext = exports.BooleanExpressionContext = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ATN = require("antlr4ts/atn/ATN");
var _ATNDeserializer = require("antlr4ts/atn/ATNDeserializer");
var _FailedPredicateException = require("antlr4ts/FailedPredicateException");
var _NoViableAltException = require("antlr4ts/NoViableAltException");
var _Parser = require("antlr4ts/Parser");
var _ParserRuleContext = require("antlr4ts/ParserRuleContext");
var _ParserATNSimulator = require("antlr4ts/atn/ParserATNSimulator");
var _RecognitionException = require("antlr4ts/RecognitionException");
var _Token = require("antlr4ts/Token");
var _VocabularyImpl = require("antlr4ts/VocabularyImpl");
var Utils = _interopRequireWildcard(require("antlr4ts/misc/Utils"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// @ts-nocheck
// Generated from src/esql/antlr/esql_parser.g4 by ANTLR 4.7.3-SNAPSHOT

//import { RuleVersion } from "antlr4ts/RuleVersion";

class esql_parser extends _Parser.Parser {
  // tslint:disable:no-trailing-whitespace

  // @Override
  // @NotNull
  get vocabulary() {
    return esql_parser.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  // @Override
  get grammarFileName() {
    return "esql_parser.g4";
  }

  // @Override
  get ruleNames() {
    return esql_parser.ruleNames;
  }

  // @Override
  get serializedATN() {
    return esql_parser._serializedATN;
  }
  constructor(input) {
    super(input);
    this._interp = new _ParserATNSimulator.ParserATNSimulator(esql_parser._ATN, this);
  }
  // @RuleVersion(0)
  singleStatement() {
    let _localctx = new SingleStatementContext(this._ctx, this.state);
    this.enterRule(_localctx, 0, esql_parser.RULE_singleStatement);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 120;
        this.query(0);
        this.state = 121;
        this.match(esql_parser.EOF);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  query(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let _localctx = new QueryContext(this._ctx, _parentState);
    let _prevctx = _localctx;
    let _startState = 2;
    this.enterRecursionRule(_localctx, 2, esql_parser.RULE_query, _p);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        {
          _localctx = new SingleCommandQueryContext(_localctx);
          this._ctx = _localctx;
          _prevctx = _localctx;
          this.state = 124;
          this.sourceCommand();
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 131;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              {
                _localctx = new CompositeQueryContext(new QueryContext(_parentctx, _parentState));
                this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_query);
                this.state = 126;
                if (!this.precpred(this._ctx, 1)) {
                  throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 127;
                this.match(esql_parser.PIPE);
                this.state = 128;
                this.processingCommand();
              }
            }
          }
          this.state = 133;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  sourceCommand() {
    let _localctx = new SourceCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 4, esql_parser.RULE_sourceCommand);
    try {
      this.state = 138;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case esql_parser.EXPLAIN:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 134;
            this.explainCommand();
          }
          break;
        case esql_parser.FROM:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 135;
            this.fromCommand();
          }
          break;
        case esql_parser.ROW:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 136;
            this.rowCommand();
          }
          break;
        case esql_parser.SHOW:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 137;
            this.showCommand();
          }
          break;
        default:
          throw new _NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  processingCommand() {
    let _localctx = new ProcessingCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 6, esql_parser.RULE_processingCommand);
    try {
      this.state = 153;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case esql_parser.EVAL:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 140;
            this.evalCommand();
          }
          break;
        case esql_parser.LIMIT:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 141;
            this.limitCommand();
          }
          break;
        case esql_parser.PROJECT:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 142;
            this.projectCommand();
          }
          break;
        case esql_parser.KEEP:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 143;
            this.keepCommand();
          }
          break;
        case esql_parser.RENAME:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 144;
            this.renameCommand();
          }
          break;
        case esql_parser.DROP:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 145;
            this.dropCommand();
          }
          break;
        case esql_parser.DISSECT:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 146;
            this.dissectCommand();
          }
          break;
        case esql_parser.GROK:
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 147;
            this.grokCommand();
          }
          break;
        case esql_parser.SORT:
          this.enterOuterAlt(_localctx, 9);
          {
            this.state = 148;
            this.sortCommand();
          }
          break;
        case esql_parser.STATS:
          this.enterOuterAlt(_localctx, 10);
          {
            this.state = 149;
            this.statsCommand();
          }
          break;
        case esql_parser.WHERE:
          this.enterOuterAlt(_localctx, 11);
          {
            this.state = 150;
            this.whereCommand();
          }
          break;
        case esql_parser.MV_EXPAND:
          this.enterOuterAlt(_localctx, 12);
          {
            this.state = 151;
            this.mvExpandCommand();
          }
          break;
        case esql_parser.ENRICH:
          this.enterOuterAlt(_localctx, 13);
          {
            this.state = 152;
            this.enrichCommand();
          }
          break;
        default:
          throw new _NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  enrichCommand() {
    let _localctx = new EnrichCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 8, esql_parser.RULE_enrichCommand);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 155;
        this.match(esql_parser.ENRICH);
        this.state = 156;
        _localctx._policyName = this.enrichIdentifier();
        this.state = 159;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
          case 1:
            {
              this.state = 157;
              this.match(esql_parser.ON);
              this.state = 158;
              _localctx._matchField = this.enrichFieldIdentifier();
            }
            break;
        }
        this.state = 170;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
          case 1:
            {
              this.state = 161;
              this.match(esql_parser.WITH);
              this.state = 162;
              this.enrichWithClause();
              this.state = 167;
              this._errHandler.sync(this);
              _alt = this.interpreter.adaptivePredict(this._input, 4, this._ctx);
              while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 163;
                      this.match(esql_parser.COMMA);
                      this.state = 164;
                      this.enrichWithClause();
                    }
                  }
                }
                this.state = 169;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 4, this._ctx);
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  enrichWithClause() {
    let _localctx = new EnrichWithClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 10, esql_parser.RULE_enrichWithClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 175;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
          case 1:
            {
              this.state = 172;
              _localctx._newName = this.enrichFieldIdentifier();
              this.state = 173;
              this.match(esql_parser.ASSIGN);
            }
            break;
        }
        this.state = 177;
        _localctx._enrichField = this.enrichFieldIdentifier();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  mvExpandCommand() {
    let _localctx = new MvExpandCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 12, esql_parser.RULE_mvExpandCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 179;
        this.match(esql_parser.MV_EXPAND);
        this.state = 180;
        this.qualifiedNames();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  whereCommand() {
    let _localctx = new WhereCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 14, esql_parser.RULE_whereCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 182;
        this.match(esql_parser.WHERE);
        this.state = 183;
        this.whereBooleanExpression(0);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  whereBooleanExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let _localctx = new WhereBooleanExpressionContext(this._ctx, _parentState);
    let _prevctx = _localctx;
    let _startState = 16;
    this.enterRecursionRule(_localctx, 16, esql_parser.RULE_whereBooleanExpression, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 230;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {
          case 1:
            {
              this.state = 186;
              this.match(esql_parser.NOT);
              this.state = 187;
              this.whereBooleanExpression(8);
            }
            break;
          case 2:
            {
              this.state = 188;
              this.valueExpression();
            }
            break;
          case 3:
            {
              this.state = 189;
              this.regexBooleanExpression();
            }
            break;
          case 4:
            {
              this.state = 190;
              this.valueExpression();
              this.state = 192;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === esql_parser.NOT) {
                {
                  this.state = 191;
                  this.match(esql_parser.NOT);
                }
              }
              this.state = 194;
              this.match(esql_parser.IN);
              this.state = 195;
              this.match(esql_parser.LP);
              this.state = 196;
              this.valueExpression();
              this.state = 201;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === esql_parser.COMMA) {
                {
                  {
                    this.state = 197;
                    this.match(esql_parser.COMMA);
                    this.state = 198;
                    this.valueExpression();
                  }
                }
                this.state = 203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 204;
              this.match(esql_parser.RP);
            }
            break;
          case 5:
            {
              this.state = 207;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === esql_parser.NOT) {
                {
                  this.state = 206;
                  this.match(esql_parser.NOT);
                }
              }
              this.state = 209;
              this.match(esql_parser.WHERE_FUNCTIONS);
              this.state = 210;
              this.match(esql_parser.LP);
              this.state = 211;
              this.qualifiedName();
              this.state = 219;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                case 1:
                  {
                    this.state = 216;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === esql_parser.COMMA) {
                      {
                        {
                          this.state = 212;
                          this.match(esql_parser.COMMA);
                          this.state = 213;
                          this.functionExpressionArgument();
                        }
                      }
                      this.state = 218;
                      this._errHandler.sync(this);
                      _la = this._input.LA(1);
                    }
                  }
                  break;
              }
              this.state = 221;
              this.match(esql_parser.RP);
            }
            break;
          case 6:
            {
              this.state = 223;
              this.valueExpression();
              this.state = 224;
              this.match(esql_parser.IS);
              this.state = 226;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === esql_parser.NOT) {
                {
                  this.state = 225;
                  this.match(esql_parser.NOT);
                }
              }
              this.state = 228;
              this.match(esql_parser.NULL);
            }
            break;
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 240;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 238;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 14, this._ctx)) {
                case 1:
                  {
                    _localctx = new WhereBooleanExpressionContext(_parentctx, _parentState);
                    _localctx._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_whereBooleanExpression);
                    this.state = 232;
                    if (!this.precpred(this._ctx, 5)) {
                      throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 233;
                    _localctx._operator = this.match(esql_parser.AND);
                    this.state = 234;
                    _localctx._right = this.whereBooleanExpression(6);
                  }
                  break;
                case 2:
                  {
                    _localctx = new WhereBooleanExpressionContext(_parentctx, _parentState);
                    _localctx._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_whereBooleanExpression);
                    this.state = 235;
                    if (!this.precpred(this._ctx, 4)) {
                      throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 236;
                    _localctx._operator = this.match(esql_parser.OR);
                    this.state = 237;
                    _localctx._right = this.whereBooleanExpression(5);
                  }
                  break;
              }
            }
          }
          this.state = 242;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  booleanExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let _localctx = new BooleanExpressionContext(this._ctx, _parentState);
    let _prevctx = _localctx;
    let _startState = 18;
    this.enterRecursionRule(_localctx, 18, esql_parser.RULE_booleanExpression, _p);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 247;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case esql_parser.NOT:
            {
              this.state = 244;
              this.match(esql_parser.NOT);
              this.state = 245;
              this.booleanExpression(4);
            }
            break;
          case esql_parser.STRING:
          case esql_parser.INTEGER_LITERAL:
          case esql_parser.DECIMAL_LITERAL:
          case esql_parser.LP:
          case esql_parser.OPENING_BRACKET:
          case esql_parser.NULL:
          case esql_parser.BOOLEAN_VALUE:
          case esql_parser.PLUS:
          case esql_parser.MINUS:
          case esql_parser.ASTERISK:
          case esql_parser.MATH_FUNCTION:
          case esql_parser.UNARY_FUNCTION:
          case esql_parser.UNQUOTED_IDENTIFIER:
          case esql_parser.QUOTED_IDENTIFIER:
            {
              this.state = 246;
              this.valueExpression();
            }
            break;
          default:
            throw new _NoViableAltException.NoViableAltException(this);
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 257;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 255;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 17, this._ctx)) {
                case 1:
                  {
                    _localctx = new BooleanExpressionContext(_parentctx, _parentState);
                    _localctx._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_booleanExpression);
                    this.state = 249;
                    if (!this.precpred(this._ctx, 2)) {
                      throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 250;
                    _localctx._operator = this.match(esql_parser.AND);
                    this.state = 251;
                    _localctx._right = this.booleanExpression(3);
                  }
                  break;
                case 2:
                  {
                    _localctx = new BooleanExpressionContext(_parentctx, _parentState);
                    _localctx._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_booleanExpression);
                    this.state = 252;
                    if (!this.precpred(this._ctx, 1)) {
                      throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 253;
                    _localctx._operator = this.match(esql_parser.OR);
                    this.state = 254;
                    _localctx._right = this.booleanExpression(2);
                  }
                  break;
              }
            }
          }
          this.state = 259;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  regexBooleanExpression() {
    let _localctx = new RegexBooleanExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 20, esql_parser.RULE_regexBooleanExpression);
    let _la;
    try {
      this.state = 274;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 21, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 260;
            this.valueExpression();
            this.state = 262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === esql_parser.NOT) {
              {
                this.state = 261;
                this.match(esql_parser.NOT);
              }
            }
            this.state = 264;
            _localctx._kind = this.match(esql_parser.LIKE);
            this.state = 265;
            _localctx._pattern = this.string();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 267;
            this.valueExpression();
            this.state = 269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === esql_parser.NOT) {
              {
                this.state = 268;
                this.match(esql_parser.NOT);
              }
            }
            this.state = 271;
            _localctx._kind = this.match(esql_parser.RLIKE);
            this.state = 272;
            _localctx._pattern = this.string();
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  valueExpression() {
    let _localctx = new ValueExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 22, esql_parser.RULE_valueExpression);
    try {
      this.state = 278;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 276;
            this.operatorExpression(0);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 277;
            this.comparison();
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  comparison() {
    let _localctx = new ComparisonContext(this._ctx, this.state);
    this.enterRule(_localctx, 24, esql_parser.RULE_comparison);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 280;
        _localctx._left = this.operatorExpression(0);
        this.state = 281;
        this.comparisonOperator();
        this.state = 282;
        _localctx._right = this.operatorExpression(0);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  mathFn() {
    let _localctx = new MathFnContext(this._ctx, this.state);
    this.enterRule(_localctx, 26, esql_parser.RULE_mathFn);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 284;
        this.functionIdentifier();
        this.state = 285;
        this.match(esql_parser.LP);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1F) === 0 && (1 << _la & (1 << esql_parser.STRING | 1 << esql_parser.INTEGER_LITERAL | 1 << esql_parser.DECIMAL_LITERAL)) !== 0 || (_la - 53 & ~0x1F) === 0 && (1 << _la - 53 & (1 << esql_parser.ASTERISK - 53 | 1 << esql_parser.UNQUOTED_IDENTIFIER - 53 | 1 << esql_parser.QUOTED_IDENTIFIER - 53)) !== 0) {
          {
            this.state = 286;
            this.functionExpressionArgument();
            this.state = 291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === esql_parser.COMMA) {
              {
                {
                  this.state = 287;
                  this.match(esql_parser.COMMA);
                  this.state = 288;
                  this.functionExpressionArgument();
                }
              }
              this.state = 293;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 296;
        this.match(esql_parser.RP);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  mathEvalFn() {
    let _localctx = new MathEvalFnContext(this._ctx, this.state);
    this.enterRule(_localctx, 28, esql_parser.RULE_mathEvalFn);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 298;
        this.mathFunctionIdentifier();
        this.state = 299;
        this.match(esql_parser.LP);
        this.state = 308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1F) === 0 && (1 << _la & (1 << esql_parser.STRING | 1 << esql_parser.INTEGER_LITERAL | 1 << esql_parser.DECIMAL_LITERAL)) !== 0 || (_la - 34 & ~0x1F) === 0 && (1 << _la - 34 & (1 << esql_parser.LP - 34 | 1 << esql_parser.OPENING_BRACKET - 34 | 1 << esql_parser.NULL - 34 | 1 << esql_parser.BOOLEAN_VALUE - 34 | 1 << esql_parser.PLUS - 34 | 1 << esql_parser.MINUS - 34 | 1 << esql_parser.ASTERISK - 34 | 1 << esql_parser.MATH_FUNCTION - 34 | 1 << esql_parser.UNARY_FUNCTION - 34 | 1 << esql_parser.UNQUOTED_IDENTIFIER - 34 | 1 << esql_parser.QUOTED_IDENTIFIER - 34)) !== 0) {
          {
            this.state = 300;
            this.mathFunctionExpressionArgument();
            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === esql_parser.COMMA) {
              {
                {
                  this.state = 301;
                  this.match(esql_parser.COMMA);
                  this.state = 302;
                  this.mathFunctionExpressionArgument();
                }
              }
              this.state = 307;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 310;
        this.match(esql_parser.RP);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  dateExpression() {
    let _localctx = new DateExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 30, esql_parser.RULE_dateExpression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 312;
        _localctx._quantifier = this.number();
        this.state = 313;
        this.match(esql_parser.DATE_LITERAL);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  operatorExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let _localctx = new OperatorExpressionContext(this._ctx, _parentState);
    let _prevctx = _localctx;
    let _startState = 32;
    this.enterRecursionRule(_localctx, 32, esql_parser.RULE_operatorExpression, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 321;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case esql_parser.STRING:
          case esql_parser.INTEGER_LITERAL:
          case esql_parser.DECIMAL_LITERAL:
          case esql_parser.LP:
          case esql_parser.OPENING_BRACKET:
          case esql_parser.NULL:
          case esql_parser.BOOLEAN_VALUE:
          case esql_parser.ASTERISK:
          case esql_parser.UNQUOTED_IDENTIFIER:
          case esql_parser.QUOTED_IDENTIFIER:
            {
              this.state = 316;
              this.primaryExpression();
            }
            break;
          case esql_parser.UNARY_FUNCTION:
            {
              this.state = 317;
              this.mathFn();
            }
            break;
          case esql_parser.MATH_FUNCTION:
            {
              this.state = 318;
              this.mathEvalFn();
            }
            break;
          case esql_parser.PLUS:
          case esql_parser.MINUS:
            {
              this.state = 319;
              _localctx._operator = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === esql_parser.PLUS || _la === esql_parser.MINUS)) {
                _localctx._operator = this._errHandler.recoverInline(this);
              } else {
                if (this._input.LA(1) === _Token.Token.EOF) {
                  this.matchedEOF = true;
                }
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 320;
              this.operatorExpression(3);
            }
            break;
          default:
            throw new _NoViableAltException.NoViableAltException(this);
        }
        this._ctx._stop = this._input.tryLT(-1);
        this.state = 331;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = _localctx;
            {
              this.state = 329;
              this._errHandler.sync(this);
              switch (this.interpreter.adaptivePredict(this._input, 28, this._ctx)) {
                case 1:
                  {
                    _localctx = new OperatorExpressionContext(_parentctx, _parentState);
                    _localctx._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_operatorExpression);
                    this.state = 323;
                    if (!this.precpred(this._ctx, 2)) {
                      throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 324;
                    _localctx._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!((_la - 53 & ~0x1F) === 0 && (1 << _la - 53 & (1 << esql_parser.ASTERISK - 53 | 1 << esql_parser.SLASH - 53 | 1 << esql_parser.PERCENT - 53)) !== 0)) {
                      _localctx._operator = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === _Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 325;
                    _localctx._right = this.operatorExpression(3);
                  }
                  break;
                case 2:
                  {
                    _localctx = new OperatorExpressionContext(_parentctx, _parentState);
                    _localctx._left = _prevctx;
                    this.pushNewRecursionContext(_localctx, _startState, esql_parser.RULE_operatorExpression);
                    this.state = 326;
                    if (!this.precpred(this._ctx, 1)) {
                      throw new _FailedPredicateException.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 327;
                    _localctx._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === esql_parser.PLUS || _la === esql_parser.MINUS)) {
                      _localctx._operator = this._errHandler.recoverInline(this);
                    } else {
                      if (this._input.LA(1) === _Token.Token.EOF) {
                        this.matchedEOF = true;
                      }
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 328;
                    _localctx._right = this.operatorExpression(2);
                  }
                  break;
              }
            }
          }
          this.state = 333;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return _localctx;
  }
  // @RuleVersion(0)
  primaryExpression() {
    let _localctx = new PrimaryExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 34, esql_parser.RULE_primaryExpression);
    let _la;
    try {
      this.state = 355;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 32, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 334;
            this.constant();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 335;
            this.qualifiedName();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 336;
            this.dateExpression();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 337;
            this.match(esql_parser.LP);
            this.state = 338;
            this.booleanExpression(0);
            this.state = 339;
            this.match(esql_parser.RP);
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 341;
            this.identifier();
            this.state = 342;
            this.match(esql_parser.LP);
            this.state = 351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la & ~0x1F) === 0 && (1 << _la & (1 << esql_parser.STRING | 1 << esql_parser.INTEGER_LITERAL | 1 << esql_parser.DECIMAL_LITERAL)) !== 0 || (_la - 34 & ~0x1F) === 0 && (1 << _la - 34 & (1 << esql_parser.LP - 34 | 1 << esql_parser.OPENING_BRACKET - 34 | 1 << esql_parser.NOT - 34 | 1 << esql_parser.NULL - 34 | 1 << esql_parser.BOOLEAN_VALUE - 34 | 1 << esql_parser.PLUS - 34 | 1 << esql_parser.MINUS - 34 | 1 << esql_parser.ASTERISK - 34 | 1 << esql_parser.MATH_FUNCTION - 34 | 1 << esql_parser.UNARY_FUNCTION - 34 | 1 << esql_parser.UNQUOTED_IDENTIFIER - 34 | 1 << esql_parser.QUOTED_IDENTIFIER - 34)) !== 0) {
              {
                this.state = 343;
                this.booleanExpression(0);
                this.state = 348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === esql_parser.COMMA) {
                  {
                    {
                      this.state = 344;
                      this.match(esql_parser.COMMA);
                      this.state = 345;
                      this.booleanExpression(0);
                    }
                  }
                  this.state = 350;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                }
              }
            }
            this.state = 353;
            this.match(esql_parser.RP);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  rowCommand() {
    let _localctx = new RowCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 36, esql_parser.RULE_rowCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 357;
        this.match(esql_parser.ROW);
        this.state = 358;
        this.fields();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  fields() {
    let _localctx = new FieldsContext(this._ctx, this.state);
    this.enterRule(_localctx, 38, esql_parser.RULE_fields);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 360;
        this.field();
        this.state = 365;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 361;
                this.match(esql_parser.COMMA);
                this.state = 362;
                this.field();
              }
            }
          }
          this.state = 367;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  field() {
    let _localctx = new FieldContext(this._ctx, this.state);
    this.enterRule(_localctx, 40, esql_parser.RULE_field);
    try {
      this.state = 373;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 368;
            this.booleanExpression(0);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 369;
            this.userVariable();
            this.state = 370;
            this.match(esql_parser.ASSIGN);
            this.state = 371;
            this.booleanExpression(0);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  enrichFieldIdentifier() {
    let _localctx = new EnrichFieldIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 42, esql_parser.RULE_enrichFieldIdentifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 375;
        _la = this._input.LA(1);
        if (!(_la === esql_parser.ENR_UNQUOTED_IDENTIFIER || _la === esql_parser.ENR_QUOTED_IDENTIFIER)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === _Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  userVariable() {
    let _localctx = new UserVariableContext(this._ctx, this.state);
    this.enterRule(_localctx, 44, esql_parser.RULE_userVariable);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 377;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  fromCommand() {
    let _localctx = new FromCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 46, esql_parser.RULE_fromCommand);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 379;
        this.match(esql_parser.FROM);
        this.state = 380;
        this.sourceIdentifier();
        this.state = 385;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 381;
                this.match(esql_parser.COMMA);
                this.state = 382;
                this.sourceIdentifier();
              }
            }
          }
          this.state = 387;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 35, this._ctx);
        }
        this.state = 389;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
          case 1:
            {
              this.state = 388;
              this.metadata();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  metadata() {
    let _localctx = new MetadataContext(this._ctx, this.state);
    this.enterRule(_localctx, 48, esql_parser.RULE_metadata);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 391;
        this.match(esql_parser.OPENING_BRACKET);
        this.state = 392;
        this.match(esql_parser.METADATA);
        this.state = 393;
        this.sourceIdentifier();
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === esql_parser.COMMA) {
          {
            {
              this.state = 394;
              this.match(esql_parser.COMMA);
              this.state = 395;
              this.sourceIdentifier();
            }
          }
          this.state = 400;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 401;
        this.match(esql_parser.CLOSING_BRACKET);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  evalCommand() {
    let _localctx = new EvalCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 50, esql_parser.RULE_evalCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 403;
        this.match(esql_parser.EVAL);
        this.state = 404;
        this.fields();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  statsCommand() {
    let _localctx = new StatsCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 52, esql_parser.RULE_statsCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 406;
        this.match(esql_parser.STATS);
        this.state = 408;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
          case 1:
            {
              this.state = 407;
              this.fields();
            }
            break;
        }
        this.state = 412;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {
          case 1:
            {
              this.state = 410;
              this.match(esql_parser.BY);
              this.state = 411;
              this.qualifiedNames();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  sourceIdentifier() {
    let _localctx = new SourceIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 54, esql_parser.RULE_sourceIdentifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 414;
        _la = this._input.LA(1);
        if (!(_la === esql_parser.SRC_UNQUOTED_IDENTIFIER || _la === esql_parser.SRC_QUOTED_IDENTIFIER)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === _Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  enrichIdentifier() {
    let _localctx = new EnrichIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 56, esql_parser.RULE_enrichIdentifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 416;
        _la = this._input.LA(1);
        if (!(_la === esql_parser.ENR_UNQUOTED_IDENTIFIER || _la === esql_parser.ENR_QUOTED_IDENTIFIER)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === _Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  functionExpressionArgument() {
    let _localctx = new FunctionExpressionArgumentContext(this._ctx, this.state);
    this.enterRule(_localctx, 58, esql_parser.RULE_functionExpressionArgument);
    try {
      this.state = 421;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case esql_parser.ASTERISK:
        case esql_parser.UNQUOTED_IDENTIFIER:
        case esql_parser.QUOTED_IDENTIFIER:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 418;
            this.qualifiedName();
          }
          break;
        case esql_parser.STRING:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 419;
            this.string();
          }
          break;
        case esql_parser.INTEGER_LITERAL:
        case esql_parser.DECIMAL_LITERAL:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 420;
            this.number();
          }
          break;
        default:
          throw new _NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  mathFunctionExpressionArgument() {
    let _localctx = new MathFunctionExpressionArgumentContext(this._ctx, this.state);
    this.enterRule(_localctx, 60, esql_parser.RULE_mathFunctionExpressionArgument);
    try {
      this.state = 429;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 41, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 423;
            this.qualifiedName();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 424;
            this.string();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 425;
            this.number();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 426;
            this.operatorExpression(0);
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 427;
            this.dateExpression();
          }
          break;
        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 428;
            this.comparison();
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  qualifiedName() {
    let _localctx = new QualifiedNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 62, esql_parser.RULE_qualifiedName);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 431;
        this.identifier();
        this.state = 436;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 432;
                this.match(esql_parser.DOT);
                this.state = 433;
                this.identifier();
              }
            }
          }
          this.state = 438;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  qualifiedNames() {
    let _localctx = new QualifiedNamesContext(this._ctx, this.state);
    this.enterRule(_localctx, 64, esql_parser.RULE_qualifiedNames);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 439;
        this.qualifiedName();
        this.state = 444;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 440;
                this.match(esql_parser.COMMA);
                this.state = 441;
                this.qualifiedName();
              }
            }
          }
          this.state = 446;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  identifier() {
    let _localctx = new IdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 66, esql_parser.RULE_identifier);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 447;
        _la = this._input.LA(1);
        if (!((_la - 53 & ~0x1F) === 0 && (1 << _la - 53 & (1 << esql_parser.ASTERISK - 53 | 1 << esql_parser.UNQUOTED_IDENTIFIER - 53 | 1 << esql_parser.QUOTED_IDENTIFIER - 53)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === _Token.Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  mathFunctionIdentifier() {
    let _localctx = new MathFunctionIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 68, esql_parser.RULE_mathFunctionIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 449;
        this.match(esql_parser.MATH_FUNCTION);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  functionIdentifier() {
    let _localctx = new FunctionIdentifierContext(this._ctx, this.state);
    this.enterRule(_localctx, 70, esql_parser.RULE_functionIdentifier);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 451;
        this.match(esql_parser.UNARY_FUNCTION);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  constant() {
    let _localctx = new ConstantContext(this._ctx, this.state);
    this.enterRule(_localctx, 72, esql_parser.RULE_constant);
    let _la;
    try {
      this.state = 490;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 453;
            this.match(esql_parser.NULL);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 454;
            this.numericValue();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 455;
            this.booleanValue();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 456;
            this.string();
          }
          break;
        case 5:
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 457;
            this.match(esql_parser.OPENING_BRACKET);
            this.state = 458;
            this.numericValue();
            this.state = 463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === esql_parser.COMMA) {
              {
                {
                  this.state = 459;
                  this.match(esql_parser.COMMA);
                  this.state = 460;
                  this.numericValue();
                }
              }
              this.state = 465;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 466;
            this.match(esql_parser.CLOSING_BRACKET);
          }
          break;
        case 6:
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 468;
            this.match(esql_parser.OPENING_BRACKET);
            this.state = 469;
            this.booleanValue();
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === esql_parser.COMMA) {
              {
                {
                  this.state = 470;
                  this.match(esql_parser.COMMA);
                  this.state = 471;
                  this.booleanValue();
                }
              }
              this.state = 476;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 477;
            this.match(esql_parser.CLOSING_BRACKET);
          }
          break;
        case 7:
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 479;
            this.match(esql_parser.OPENING_BRACKET);
            this.state = 480;
            this.string();
            this.state = 485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === esql_parser.COMMA) {
              {
                {
                  this.state = 481;
                  this.match(esql_parser.COMMA);
                  this.state = 482;
                  this.string();
                }
              }
              this.state = 487;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 488;
            this.match(esql_parser.CLOSING_BRACKET);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  numericValue() {
    let _localctx = new NumericValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 74, esql_parser.RULE_numericValue);
    try {
      this.state = 494;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case esql_parser.DECIMAL_LITERAL:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 492;
            this.decimalValue();
          }
          break;
        case esql_parser.INTEGER_LITERAL:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 493;
            this.integerValue();
          }
          break;
        default:
          throw new _NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  limitCommand() {
    let _localctx = new LimitCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 76, esql_parser.RULE_limitCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 496;
        this.match(esql_parser.LIMIT);
        this.state = 497;
        this.match(esql_parser.INTEGER_LITERAL);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  sortCommand() {
    let _localctx = new SortCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 78, esql_parser.RULE_sortCommand);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 499;
        this.match(esql_parser.SORT);
        this.state = 500;
        this.orderExpression();
        this.state = 505;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 501;
                this.match(esql_parser.COMMA);
                this.state = 502;
                this.orderExpression();
              }
            }
          }
          this.state = 507;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  orderExpression() {
    let _localctx = new OrderExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 80, esql_parser.RULE_orderExpression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 508;
        this.booleanExpression(0);
        this.state = 510;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 50, this._ctx)) {
          case 1:
            {
              this.state = 509;
              this.match(esql_parser.ORDERING);
            }
            break;
        }
        this.state = 514;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
          case 1:
            {
              this.state = 512;
              this.match(esql_parser.NULLS_ORDERING);
              {
                this.state = 513;
                this.match(esql_parser.NULLS_ORDERING_DIRECTION);
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  projectCommand() {
    let _localctx = new ProjectCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 82, esql_parser.RULE_projectCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 516;
        this.match(esql_parser.PROJECT);
        this.state = 517;
        this.qualifiedNames();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  keepCommand() {
    let _localctx = new KeepCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 84, esql_parser.RULE_keepCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 519;
        this.match(esql_parser.KEEP);
        this.state = 520;
        this.qualifiedNames();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  dropCommand() {
    let _localctx = new DropCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 86, esql_parser.RULE_dropCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 522;
        this.match(esql_parser.DROP);
        this.state = 523;
        this.qualifiedNames();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  renameVariable() {
    let _localctx = new RenameVariableContext(this._ctx, this.state);
    this.enterRule(_localctx, 88, esql_parser.RULE_renameVariable);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 525;
        this.identifier();
        this.state = 530;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 526;
                this.match(esql_parser.DOT);
                this.state = 527;
                this.identifier();
              }
            }
          }
          this.state = 532;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 52, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  renameCommand() {
    let _localctx = new RenameCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 90, esql_parser.RULE_renameCommand);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 533;
        this.match(esql_parser.RENAME);
        this.state = 534;
        this.renameClause();
        this.state = 539;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 535;
                this.match(esql_parser.COMMA);
                this.state = 536;
                this.renameClause();
              }
            }
          }
          this.state = 541;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  renameClause() {
    let _localctx = new RenameClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 92, esql_parser.RULE_renameClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 542;
        this.qualifiedName();
        this.state = 543;
        this.match(esql_parser.AS);
        this.state = 544;
        this.renameVariable();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  dissectCommand() {
    let _localctx = new DissectCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 94, esql_parser.RULE_dissectCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 546;
        this.match(esql_parser.DISSECT);
        this.state = 547;
        this.qualifiedNames();
        this.state = 548;
        this.string();
        this.state = 550;
        this._errHandler.sync(this);
        switch (this.interpreter.adaptivePredict(this._input, 54, this._ctx)) {
          case 1:
            {
              this.state = 549;
              this.commandOptions();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  grokCommand() {
    let _localctx = new GrokCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 96, esql_parser.RULE_grokCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 552;
        this.match(esql_parser.GROK);
        this.state = 553;
        this.qualifiedNames();
        this.state = 554;
        this.string();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  commandOptions() {
    let _localctx = new CommandOptionsContext(this._ctx, this.state);
    this.enterRule(_localctx, 98, esql_parser.RULE_commandOptions);
    try {
      let _alt;
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 556;
        this.commandOption();
        this.state = 561;
        this._errHandler.sync(this);
        _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
        while (_alt !== 2 && _alt !== _ATN.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 557;
                this.match(esql_parser.COMMA);
                this.state = 558;
                this.commandOption();
              }
            }
          }
          this.state = 563;
          this._errHandler.sync(this);
          _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  commandOption() {
    let _localctx = new CommandOptionContext(this._ctx, this.state);
    this.enterRule(_localctx, 100, esql_parser.RULE_commandOption);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 564;
        this.identifier();
        this.state = 565;
        this.match(esql_parser.ASSIGN);
        this.state = 566;
        this.constant();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  booleanValue() {
    let _localctx = new BooleanValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 102, esql_parser.RULE_booleanValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 568;
        this.match(esql_parser.BOOLEAN_VALUE);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  number() {
    let _localctx = new NumberContext(this._ctx, this.state);
    this.enterRule(_localctx, 104, esql_parser.RULE_number);
    try {
      this.state = 572;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case esql_parser.DECIMAL_LITERAL:
          _localctx = new DecimalLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 570;
            this.match(esql_parser.DECIMAL_LITERAL);
          }
          break;
        case esql_parser.INTEGER_LITERAL:
          _localctx = new IntegerLiteralContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 571;
            this.match(esql_parser.INTEGER_LITERAL);
          }
          break;
        default:
          throw new _NoViableAltException.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  decimalValue() {
    let _localctx = new DecimalValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 106, esql_parser.RULE_decimalValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 574;
        this.match(esql_parser.DECIMAL_LITERAL);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  integerValue() {
    let _localctx = new IntegerValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 108, esql_parser.RULE_integerValue);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 576;
        this.match(esql_parser.INTEGER_LITERAL);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  string() {
    let _localctx = new StringContext(this._ctx, this.state);
    this.enterRule(_localctx, 110, esql_parser.RULE_string);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 578;
        this.match(esql_parser.STRING);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  comparisonOperator() {
    let _localctx = new ComparisonOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 112, esql_parser.RULE_comparisonOperator);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 580;
        this.match(esql_parser.COMPARISON_OPERATOR);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  explainCommand() {
    let _localctx = new ExplainCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 114, esql_parser.RULE_explainCommand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 582;
        this.match(esql_parser.EXPLAIN);
        this.state = 583;
        this.subqueryExpression();
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  subqueryExpression() {
    let _localctx = new SubqueryExpressionContext(this._ctx, this.state);
    this.enterRule(_localctx, 116, esql_parser.RULE_subqueryExpression);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 585;
        this.match(esql_parser.OPENING_BRACKET);
        this.state = 586;
        this.query(0);
        this.state = 587;
        this.match(esql_parser.CLOSING_BRACKET);
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  showCommand() {
    let _localctx = new ShowCommandContext(this._ctx, this.state);
    this.enterRule(_localctx, 118, esql_parser.RULE_showCommand);
    try {
      this.state = 593;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 589;
            this.match(esql_parser.SHOW);
            this.state = 590;
            this.match(esql_parser.INFO);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 591;
            this.match(esql_parser.SHOW);
            this.state = 592;
            this.match(esql_parser.FUNCTIONS);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _RecognitionException.RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  sempred(_localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 1:
        return this.query_sempred(_localctx, predIndex);
      case 8:
        return this.whereBooleanExpression_sempred(_localctx, predIndex);
      case 9:
        return this.booleanExpression_sempred(_localctx, predIndex);
      case 16:
        return this.operatorExpression_sempred(_localctx, predIndex);
    }
    return true;
  }
  query_sempred(_localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  whereBooleanExpression_sempred(_localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.precpred(this._ctx, 5);
      case 2:
        return this.precpred(this._ctx, 4);
    }
    return true;
  }
  booleanExpression_sempred(_localctx, predIndex) {
    switch (predIndex) {
      case 3:
        return this.precpred(this._ctx, 2);
      case 4:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  operatorExpression_sempred(_localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.precpred(this._ctx, 2);
      case 6:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  static get _ATN() {
    if (!esql_parser.__ATN) {
      esql_parser.__ATN = new _ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(esql_parser._serializedATN));
    }
    return esql_parser.__ATN;
  }
}
exports.esql_parser = esql_parser;
(0, _defineProperty2.default)(esql_parser, "DISSECT", 1);
(0, _defineProperty2.default)(esql_parser, "GROK", 2);
(0, _defineProperty2.default)(esql_parser, "EVAL", 3);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN", 4);
(0, _defineProperty2.default)(esql_parser, "FROM", 5);
(0, _defineProperty2.default)(esql_parser, "ROW", 6);
(0, _defineProperty2.default)(esql_parser, "STATS", 7);
(0, _defineProperty2.default)(esql_parser, "WHERE", 8);
(0, _defineProperty2.default)(esql_parser, "SORT", 9);
(0, _defineProperty2.default)(esql_parser, "MV_EXPAND", 10);
(0, _defineProperty2.default)(esql_parser, "LIMIT", 11);
(0, _defineProperty2.default)(esql_parser, "PROJECT", 12);
(0, _defineProperty2.default)(esql_parser, "DROP", 13);
(0, _defineProperty2.default)(esql_parser, "RENAME", 14);
(0, _defineProperty2.default)(esql_parser, "SHOW", 15);
(0, _defineProperty2.default)(esql_parser, "ENRICH", 16);
(0, _defineProperty2.default)(esql_parser, "KEEP", 17);
(0, _defineProperty2.default)(esql_parser, "LINE_COMMENT", 18);
(0, _defineProperty2.default)(esql_parser, "MULTILINE_COMMENT", 19);
(0, _defineProperty2.default)(esql_parser, "WS", 20);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_WS", 21);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_LINE_COMMENT", 22);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_MULTILINE_COMMENT", 23);
(0, _defineProperty2.default)(esql_parser, "PIPE", 24);
(0, _defineProperty2.default)(esql_parser, "STRING", 25);
(0, _defineProperty2.default)(esql_parser, "INTEGER_LITERAL", 26);
(0, _defineProperty2.default)(esql_parser, "DECIMAL_LITERAL", 27);
(0, _defineProperty2.default)(esql_parser, "BY", 28);
(0, _defineProperty2.default)(esql_parser, "DATE_LITERAL", 29);
(0, _defineProperty2.default)(esql_parser, "AND", 30);
(0, _defineProperty2.default)(esql_parser, "ASSIGN", 31);
(0, _defineProperty2.default)(esql_parser, "COMMA", 32);
(0, _defineProperty2.default)(esql_parser, "DOT", 33);
(0, _defineProperty2.default)(esql_parser, "LP", 34);
(0, _defineProperty2.default)(esql_parser, "OPENING_BRACKET", 35);
(0, _defineProperty2.default)(esql_parser, "CLOSING_BRACKET", 36);
(0, _defineProperty2.default)(esql_parser, "NOT", 37);
(0, _defineProperty2.default)(esql_parser, "LIKE", 38);
(0, _defineProperty2.default)(esql_parser, "RLIKE", 39);
(0, _defineProperty2.default)(esql_parser, "IN", 40);
(0, _defineProperty2.default)(esql_parser, "IS", 41);
(0, _defineProperty2.default)(esql_parser, "AS", 42);
(0, _defineProperty2.default)(esql_parser, "NULL", 43);
(0, _defineProperty2.default)(esql_parser, "OR", 44);
(0, _defineProperty2.default)(esql_parser, "RP", 45);
(0, _defineProperty2.default)(esql_parser, "UNDERSCORE", 46);
(0, _defineProperty2.default)(esql_parser, "INFO", 47);
(0, _defineProperty2.default)(esql_parser, "FUNCTIONS", 48);
(0, _defineProperty2.default)(esql_parser, "BOOLEAN_VALUE", 49);
(0, _defineProperty2.default)(esql_parser, "COMPARISON_OPERATOR", 50);
(0, _defineProperty2.default)(esql_parser, "PLUS", 51);
(0, _defineProperty2.default)(esql_parser, "MINUS", 52);
(0, _defineProperty2.default)(esql_parser, "ASTERISK", 53);
(0, _defineProperty2.default)(esql_parser, "SLASH", 54);
(0, _defineProperty2.default)(esql_parser, "PERCENT", 55);
(0, _defineProperty2.default)(esql_parser, "TEN", 56);
(0, _defineProperty2.default)(esql_parser, "ORDERING", 57);
(0, _defineProperty2.default)(esql_parser, "NULLS_ORDERING", 58);
(0, _defineProperty2.default)(esql_parser, "NULLS_ORDERING_DIRECTION", 59);
(0, _defineProperty2.default)(esql_parser, "MATH_FUNCTION", 60);
(0, _defineProperty2.default)(esql_parser, "UNARY_FUNCTION", 61);
(0, _defineProperty2.default)(esql_parser, "WHERE_FUNCTIONS", 62);
(0, _defineProperty2.default)(esql_parser, "UNQUOTED_IDENTIFIER", 63);
(0, _defineProperty2.default)(esql_parser, "QUOTED_IDENTIFIER", 64);
(0, _defineProperty2.default)(esql_parser, "EXPR_LINE_COMMENT", 65);
(0, _defineProperty2.default)(esql_parser, "EXPR_MULTILINE_COMMENT", 66);
(0, _defineProperty2.default)(esql_parser, "EXPR_WS", 67);
(0, _defineProperty2.default)(esql_parser, "METADATA", 68);
(0, _defineProperty2.default)(esql_parser, "SRC_UNQUOTED_IDENTIFIER", 69);
(0, _defineProperty2.default)(esql_parser, "SRC_QUOTED_IDENTIFIER", 70);
(0, _defineProperty2.default)(esql_parser, "SRC_LINE_COMMENT", 71);
(0, _defineProperty2.default)(esql_parser, "SRC_MULTILINE_COMMENT", 72);
(0, _defineProperty2.default)(esql_parser, "SRC_WS", 73);
(0, _defineProperty2.default)(esql_parser, "ON", 74);
(0, _defineProperty2.default)(esql_parser, "WITH", 75);
(0, _defineProperty2.default)(esql_parser, "ENR_UNQUOTED_IDENTIFIER", 76);
(0, _defineProperty2.default)(esql_parser, "ENR_QUOTED_IDENTIFIER", 77);
(0, _defineProperty2.default)(esql_parser, "ENR_LINE_COMMENT", 78);
(0, _defineProperty2.default)(esql_parser, "ENR_MULTILINE_COMMENT", 79);
(0, _defineProperty2.default)(esql_parser, "ENR_WS", 80);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_PIPE", 81);
(0, _defineProperty2.default)(esql_parser, "RULE_singleStatement", 0);
(0, _defineProperty2.default)(esql_parser, "RULE_query", 1);
(0, _defineProperty2.default)(esql_parser, "RULE_sourceCommand", 2);
(0, _defineProperty2.default)(esql_parser, "RULE_processingCommand", 3);
(0, _defineProperty2.default)(esql_parser, "RULE_enrichCommand", 4);
(0, _defineProperty2.default)(esql_parser, "RULE_enrichWithClause", 5);
(0, _defineProperty2.default)(esql_parser, "RULE_mvExpandCommand", 6);
(0, _defineProperty2.default)(esql_parser, "RULE_whereCommand", 7);
(0, _defineProperty2.default)(esql_parser, "RULE_whereBooleanExpression", 8);
(0, _defineProperty2.default)(esql_parser, "RULE_booleanExpression", 9);
(0, _defineProperty2.default)(esql_parser, "RULE_regexBooleanExpression", 10);
(0, _defineProperty2.default)(esql_parser, "RULE_valueExpression", 11);
(0, _defineProperty2.default)(esql_parser, "RULE_comparison", 12);
(0, _defineProperty2.default)(esql_parser, "RULE_mathFn", 13);
(0, _defineProperty2.default)(esql_parser, "RULE_mathEvalFn", 14);
(0, _defineProperty2.default)(esql_parser, "RULE_dateExpression", 15);
(0, _defineProperty2.default)(esql_parser, "RULE_operatorExpression", 16);
(0, _defineProperty2.default)(esql_parser, "RULE_primaryExpression", 17);
(0, _defineProperty2.default)(esql_parser, "RULE_rowCommand", 18);
(0, _defineProperty2.default)(esql_parser, "RULE_fields", 19);
(0, _defineProperty2.default)(esql_parser, "RULE_field", 20);
(0, _defineProperty2.default)(esql_parser, "RULE_enrichFieldIdentifier", 21);
(0, _defineProperty2.default)(esql_parser, "RULE_userVariable", 22);
(0, _defineProperty2.default)(esql_parser, "RULE_fromCommand", 23);
(0, _defineProperty2.default)(esql_parser, "RULE_metadata", 24);
(0, _defineProperty2.default)(esql_parser, "RULE_evalCommand", 25);
(0, _defineProperty2.default)(esql_parser, "RULE_statsCommand", 26);
(0, _defineProperty2.default)(esql_parser, "RULE_sourceIdentifier", 27);
(0, _defineProperty2.default)(esql_parser, "RULE_enrichIdentifier", 28);
(0, _defineProperty2.default)(esql_parser, "RULE_functionExpressionArgument", 29);
(0, _defineProperty2.default)(esql_parser, "RULE_mathFunctionExpressionArgument", 30);
(0, _defineProperty2.default)(esql_parser, "RULE_qualifiedName", 31);
(0, _defineProperty2.default)(esql_parser, "RULE_qualifiedNames", 32);
(0, _defineProperty2.default)(esql_parser, "RULE_identifier", 33);
(0, _defineProperty2.default)(esql_parser, "RULE_mathFunctionIdentifier", 34);
(0, _defineProperty2.default)(esql_parser, "RULE_functionIdentifier", 35);
(0, _defineProperty2.default)(esql_parser, "RULE_constant", 36);
(0, _defineProperty2.default)(esql_parser, "RULE_numericValue", 37);
(0, _defineProperty2.default)(esql_parser, "RULE_limitCommand", 38);
(0, _defineProperty2.default)(esql_parser, "RULE_sortCommand", 39);
(0, _defineProperty2.default)(esql_parser, "RULE_orderExpression", 40);
(0, _defineProperty2.default)(esql_parser, "RULE_projectCommand", 41);
(0, _defineProperty2.default)(esql_parser, "RULE_keepCommand", 42);
(0, _defineProperty2.default)(esql_parser, "RULE_dropCommand", 43);
(0, _defineProperty2.default)(esql_parser, "RULE_renameVariable", 44);
(0, _defineProperty2.default)(esql_parser, "RULE_renameCommand", 45);
(0, _defineProperty2.default)(esql_parser, "RULE_renameClause", 46);
(0, _defineProperty2.default)(esql_parser, "RULE_dissectCommand", 47);
(0, _defineProperty2.default)(esql_parser, "RULE_grokCommand", 48);
(0, _defineProperty2.default)(esql_parser, "RULE_commandOptions", 49);
(0, _defineProperty2.default)(esql_parser, "RULE_commandOption", 50);
(0, _defineProperty2.default)(esql_parser, "RULE_booleanValue", 51);
(0, _defineProperty2.default)(esql_parser, "RULE_number", 52);
(0, _defineProperty2.default)(esql_parser, "RULE_decimalValue", 53);
(0, _defineProperty2.default)(esql_parser, "RULE_integerValue", 54);
(0, _defineProperty2.default)(esql_parser, "RULE_string", 55);
(0, _defineProperty2.default)(esql_parser, "RULE_comparisonOperator", 56);
(0, _defineProperty2.default)(esql_parser, "RULE_explainCommand", 57);
(0, _defineProperty2.default)(esql_parser, "RULE_subqueryExpression", 58);
(0, _defineProperty2.default)(esql_parser, "RULE_showCommand", 59);
(0, _defineProperty2.default)(esql_parser, "ruleNames", ["singleStatement", "query", "sourceCommand", "processingCommand", "enrichCommand", "enrichWithClause", "mvExpandCommand", "whereCommand", "whereBooleanExpression", "booleanExpression", "regexBooleanExpression", "valueExpression", "comparison", "mathFn", "mathEvalFn", "dateExpression", "operatorExpression", "primaryExpression", "rowCommand", "fields", "field", "enrichFieldIdentifier", "userVariable", "fromCommand", "metadata", "evalCommand", "statsCommand", "sourceIdentifier", "enrichIdentifier", "functionExpressionArgument", "mathFunctionExpressionArgument", "qualifiedName", "qualifiedNames", "identifier", "mathFunctionIdentifier", "functionIdentifier", "constant", "numericValue", "limitCommand", "sortCommand", "orderExpression", "projectCommand", "keepCommand", "dropCommand", "renameVariable", "renameCommand", "renameClause", "dissectCommand", "grokCommand", "commandOptions", "commandOption", "booleanValue", "number", "decimalValue", "integerValue", "string", "comparisonOperator", "explainCommand", "subqueryExpression", "showCommand"]);
(0, _defineProperty2.default)(esql_parser, "_LITERAL_NAMES", [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "'by'", undefined, "'and'", undefined, undefined, "'.'", "'('", undefined, "']'", undefined, undefined, undefined, undefined, undefined, undefined, undefined, "'or'", "')'", "'_'", "'info'", "'functions'", undefined, undefined, "'+'", "'-'", "'*'", "'/'", "'%'", "'10'", undefined, "'nulls'"]);
(0, _defineProperty2.default)(esql_parser, "_SYMBOLIC_NAMES", [undefined, "DISSECT", "GROK", "EVAL", "EXPLAIN", "FROM", "ROW", "STATS", "WHERE", "SORT", "MV_EXPAND", "LIMIT", "PROJECT", "DROP", "RENAME", "SHOW", "ENRICH", "KEEP", "LINE_COMMENT", "MULTILINE_COMMENT", "WS", "EXPLAIN_WS", "EXPLAIN_LINE_COMMENT", "EXPLAIN_MULTILINE_COMMENT", "PIPE", "STRING", "INTEGER_LITERAL", "DECIMAL_LITERAL", "BY", "DATE_LITERAL", "AND", "ASSIGN", "COMMA", "DOT", "LP", "OPENING_BRACKET", "CLOSING_BRACKET", "NOT", "LIKE", "RLIKE", "IN", "IS", "AS", "NULL", "OR", "RP", "UNDERSCORE", "INFO", "FUNCTIONS", "BOOLEAN_VALUE", "COMPARISON_OPERATOR", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TEN", "ORDERING", "NULLS_ORDERING", "NULLS_ORDERING_DIRECTION", "MATH_FUNCTION", "UNARY_FUNCTION", "WHERE_FUNCTIONS", "UNQUOTED_IDENTIFIER", "QUOTED_IDENTIFIER", "EXPR_LINE_COMMENT", "EXPR_MULTILINE_COMMENT", "EXPR_WS", "METADATA", "SRC_UNQUOTED_IDENTIFIER", "SRC_QUOTED_IDENTIFIER", "SRC_LINE_COMMENT", "SRC_MULTILINE_COMMENT", "SRC_WS", "ON", "WITH", "ENR_UNQUOTED_IDENTIFIER", "ENR_QUOTED_IDENTIFIER", "ENR_LINE_COMMENT", "ENR_MULTILINE_COMMENT", "ENR_WS", "EXPLAIN_PIPE"]);
(0, _defineProperty2.default)(esql_parser, "VOCABULARY", new _VocabularyImpl.VocabularyImpl(esql_parser._LITERAL_NAMES, esql_parser._SYMBOLIC_NAMES, []));
(0, _defineProperty2.default)(esql_parser, "_serializedATNSegments", 2);
(0, _defineProperty2.default)(esql_parser, "_serializedATNSegment0", "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03S\u0256\x04\x02" + "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" + "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" + "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" + "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" + "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04" + "\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#" + "\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+" + "\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044" + "\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" + "=\t=\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" + "\x03\x07\x03\x84\n\x03\f\x03\x0E\x03\x87\v\x03\x03\x04\x03\x04\x03\x04" + "\x03\x04\x05\x04\x8D\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" + "\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\x9C" + "\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\xA2\n\x06\x03\x06\x03\x06" + "\x03\x06\x03\x06\x07\x06\xA8\n\x06\f\x06\x0E\x06\xAB\v\x06\x05\x06\xAD" + "\n\x06\x03\x07\x03\x07\x03\x07\x05\x07\xB2\n\x07\x03\x07\x03\x07\x03\b" + "\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" + "\n\x05\n\xC3\n\n\x03\n\x03\n\x03\n\x03\n\x03\n\x07\n\xCA\n\n\f\n\x0E\n" + "\xCD\v\n\x03\n\x03\n\x03\n\x05\n\xD2\n\n\x03\n\x03\n\x03\n\x03\n\x03\n" + "\x07\n\xD9\n\n\f\n\x0E\n\xDC\v\n\x05\n\xDE\n\n\x03\n\x03\n\x03\n\x03\n" + "\x03\n\x05\n\xE5\n\n\x03\n\x03\n\x05\n\xE9\n\n\x03\n\x03\n\x03\n\x03\n" + "\x03\n\x03\n\x07\n\xF1\n\n\f\n\x0E\n\xF4\v\n\x03\v\x03\v\x03\v\x03\v\x05" + "\v\xFA\n\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x07\v\u0102\n\v\f\v\x0E" + "\v\u0105\v\v\x03\f\x03\f\x05\f\u0109\n\f\x03\f\x03\f\x03\f\x03\f\x03\f" + "\x05\f\u0110\n\f\x03\f\x03\f\x03\f\x05\f\u0115\n\f\x03\r\x03\r\x05\r\u0119" + "\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" + "\x0F\x07\x0F\u0124\n\x0F\f\x0F\x0E\x0F\u0127\v\x0F\x05\x0F\u0129\n\x0F" + "\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\u0132" + "\n\x10\f\x10\x0E\x10\u0135\v\x10\x05\x10\u0137\n\x10\x03\x10\x03\x10\x03" + "\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05" + "\x12\u0144\n\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12" + "\u014C\n\x12\f\x12\x0E\x12\u014F\v\x12\x03\x13\x03\x13\x03\x13\x03\x13" + "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13" + "\u015D\n\x13\f\x13\x0E\x13\u0160\v\x13\x05\x13\u0162\n\x13\x03\x13\x03" + "\x13\x05\x13\u0166\n\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15" + "\x07\x15\u016E\n\x15\f\x15\x0E\x15\u0171\v\x15\x03\x16\x03\x16\x03\x16" + "\x03\x16\x03\x16\x05\x16\u0178\n\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03" + "\x19\x03\x19\x03\x19\x03\x19\x07\x19\u0182\n\x19\f\x19\x0E\x19\u0185\v" + "\x19\x03\x19\x05\x19\u0188\n\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" + "\x07\x1A\u018F\n\x1A\f\x1A\x0E\x1A\u0192\v\x1A\x03\x1A\x03\x1A\x03\x1B" + "\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x05\x1C\u019B\n\x1C\x03\x1C\x03\x1C\x05" + "\x1C\u019F\n\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F" + "\x05\x1F\u01A8\n\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x05 \u01B0\n \x03!" + "\x03!\x03!\x07!\u01B5\n!\f!\x0E!\u01B8\v!\x03\"\x03\"\x03\"\x07\"\u01BD" + "\n\"\f\"\x0E\"\u01C0\v\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03&" + "\x03&\x03&\x03&\x03&\x03&\x07&\u01D0\n&\f&\x0E&\u01D3\v&\x03&\x03&\x03" + "&\x03&\x03&\x03&\x07&\u01DB\n&\f&\x0E&\u01DE\v&\x03&\x03&\x03&\x03&\x03" + "&\x03&\x07&\u01E6\n&\f&\x0E&\u01E9\v&\x03&\x03&\x05&\u01ED\n&\x03\'\x03" + "\'\x05\'\u01F1\n\'\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x07)\u01FA\n)\f" + ")\x0E)\u01FD\v)\x03*\x03*\x05*\u0201\n*\x03*\x03*\x05*\u0205\n*\x03+\x03" + "+\x03+\x03,\x03,\x03,\x03-\x03-\x03-\x03.\x03.\x03.\x07.\u0213\n.\f.\x0E" + ".\u0216\v.\x03/\x03/\x03/\x03/\x07/\u021C\n/\f/\x0E/\u021F\v/\x030\x03" + "0\x030\x030\x031\x031\x031\x031\x051\u0229\n1\x032\x032\x032\x032\x03" + "3\x033\x033\x073\u0232\n3\f3\x0E3\u0235\v3\x034\x034\x034\x034\x035\x03" + "5\x036\x036\x056\u023F\n6\x037\x037\x038\x038\x039\x039\x03:\x03:\x03" + ";\x03;\x03;\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x03=\x05=\u0254\n=\x03" + "=\x02\x02\x06\x04\x12\x14\">\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02" + "\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02" + " \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02" + "<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" + "X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" + "t\x02v\x02x\x02\x02\x07\x03\x0256\x03\x0279\x03\x02NO\x03\x02GH\x04\x02" + "77AB\x02\u0273\x02z\x03\x02\x02\x02\x04}\x03\x02\x02\x02\x06\x8C\x03\x02" + "\x02\x02\b\x9B\x03\x02\x02\x02\n\x9D\x03\x02\x02\x02\f\xB1\x03\x02\x02" + "\x02\x0E\xB5\x03\x02\x02\x02\x10\xB8\x03\x02\x02\x02\x12\xE8\x03\x02\x02" + "\x02\x14\xF9\x03\x02\x02\x02\x16\u0114\x03\x02\x02\x02\x18\u0118\x03\x02" + "\x02\x02\x1A\u011A\x03\x02\x02\x02\x1C\u011E\x03\x02\x02\x02\x1E\u012C" + "\x03\x02\x02\x02 \u013A\x03\x02\x02\x02\"\u0143\x03\x02\x02\x02$\u0165" + "\x03\x02\x02\x02&\u0167\x03\x02\x02\x02(\u016A\x03\x02\x02\x02*\u0177" + "\x03\x02\x02\x02,\u0179\x03\x02\x02\x02.\u017B\x03\x02\x02\x020\u017D" + "\x03\x02\x02\x022\u0189\x03\x02\x02\x024\u0195\x03\x02\x02\x026\u0198" + "\x03\x02\x02\x028\u01A0\x03\x02\x02\x02:\u01A2\x03\x02\x02\x02<\u01A7" + "\x03\x02\x02\x02>\u01AF\x03\x02\x02\x02@\u01B1\x03\x02\x02\x02B\u01B9" + "\x03\x02\x02\x02D\u01C1\x03\x02\x02\x02F\u01C3\x03\x02\x02\x02H\u01C5" + "\x03\x02\x02\x02J\u01EC\x03\x02\x02\x02L\u01F0\x03\x02\x02\x02N\u01F2" + "\x03\x02\x02\x02P\u01F5\x03\x02\x02\x02R\u01FE\x03\x02\x02\x02T\u0206" + "\x03\x02\x02\x02V\u0209\x03\x02\x02\x02X\u020C\x03\x02\x02\x02Z\u020F" + "\x03\x02\x02\x02\\\u0217\x03\x02\x02\x02^\u0220\x03\x02\x02\x02`\u0224" + "\x03\x02\x02\x02b\u022A\x03\x02\x02\x02d\u022E\x03\x02\x02\x02f\u0236" + "\x03\x02\x02\x02h\u023A\x03\x02\x02\x02j\u023E\x03\x02\x02\x02l\u0240" + "\x03\x02\x02\x02n\u0242\x03\x02\x02\x02p\u0244\x03\x02\x02\x02r\u0246" + "\x03\x02\x02\x02t\u0248\x03\x02\x02\x02v\u024B\x03\x02\x02\x02x\u0253" + "\x03\x02\x02\x02z{\x05\x04\x03\x02{|\x07\x02\x02\x03|\x03\x03\x02\x02" + "\x02}~\b\x03\x01\x02~\x7F\x05\x06\x04\x02\x7F\x85\x03\x02\x02\x02\x80" + "\x81\f\x03\x02\x02\x81\x82\x07\x1A\x02\x02\x82\x84\x05\b\x05\x02\x83\x80" + "\x03\x02\x02\x02\x84\x87\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86" + "\x03\x02\x02\x02\x86\x05\x03\x02\x02\x02\x87\x85\x03\x02\x02\x02\x88\x8D" + "\x05t;\x02\x89\x8D\x050\x19\x02\x8A\x8D\x05&\x14\x02\x8B\x8D\x05x=\x02" + "\x8C\x88\x03\x02\x02\x02\x8C\x89\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02" + "\x8C\x8B\x03\x02\x02\x02\x8D\x07\x03\x02\x02\x02\x8E\x9C\x054\x1B\x02" + "\x8F\x9C\x05N(\x02\x90\x9C\x05T+\x02\x91\x9C\x05V,\x02\x92\x9C\x05\\/" + "\x02\x93\x9C\x05X-\x02\x94\x9C\x05`1\x02\x95\x9C\x05b2\x02\x96\x9C\x05" + "P)\x02\x97\x9C\x056\x1C\x02\x98\x9C\x05\x10\t\x02\x99\x9C\x05\x0E\b\x02" + "\x9A\x9C\x05\n\x06\x02\x9B\x8E\x03\x02\x02\x02\x9B\x8F\x03\x02\x02\x02" + "\x9B\x90\x03\x02\x02\x02\x9B\x91\x03\x02\x02\x02\x9B\x92\x03\x02\x02\x02" + "\x9B\x93\x03\x02\x02\x02\x9B\x94\x03\x02\x02\x02\x9B\x95\x03\x02\x02\x02" + "\x9B\x96\x03\x02\x02\x02\x9B\x97\x03\x02\x02\x02\x9B\x98\x03\x02\x02\x02" + "\x9B\x99\x03\x02\x02\x02\x9B\x9A\x03\x02\x02\x02\x9C\t\x03\x02\x02\x02" + "\x9D\x9E\x07\x12\x02\x02\x9E\xA1\x05:\x1E\x02\x9F\xA0\x07L\x02\x02\xA0" + "\xA2\x05,\x17\x02\xA1\x9F\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2" + "\xAC\x03\x02\x02\x02\xA3\xA4\x07M\x02\x02\xA4\xA9\x05\f\x07\x02\xA5\xA6" + "\x07\"\x02\x02\xA6\xA8\x05\f\x07\x02\xA7\xA5\x03\x02\x02\x02\xA8\xAB\x03" + "\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA\xAD\x03" + "\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAC\xA3\x03\x02\x02\x02\xAC\xAD\x03" + "\x02\x02\x02\xAD\v\x03\x02\x02\x02\xAE\xAF\x05,\x17\x02\xAF\xB0\x07!\x02" + "\x02\xB0\xB2\x03\x02\x02\x02\xB1\xAE\x03\x02\x02\x02\xB1\xB2\x03\x02\x02" + "\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB4\x05,\x17\x02\xB4\r\x03\x02\x02\x02" + "\xB5\xB6\x07\f\x02\x02\xB6\xB7\x05B\"\x02\xB7\x0F\x03\x02\x02\x02\xB8" + "\xB9\x07\n\x02\x02\xB9\xBA\x05\x12\n\x02\xBA\x11\x03\x02\x02\x02\xBB\xBC" + "\b\n\x01\x02\xBC\xBD\x07\'\x02\x02\xBD\xE9\x05\x12\n\n\xBE\xE9\x05\x18" + "\r\x02\xBF\xE9\x05\x16\f\x02\xC0\xC2\x05\x18\r\x02\xC1\xC3\x07\'\x02\x02" + "\xC2\xC1\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC4\x03\x02\x02\x02" + "\xC4\xC5\x07*\x02\x02\xC5\xC6\x07$\x02\x02\xC6\xCB\x05\x18\r\x02\xC7\xC8" + "\x07\"\x02\x02\xC8\xCA\x05\x18\r\x02\xC9\xC7\x03\x02\x02\x02\xCA\xCD\x03" + "\x02\x02\x02\xCB\xC9\x03\x02\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCE\x03" + "\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCE\xCF\x07/\x02\x02\xCF\xE9\x03" + "\x02\x02\x02\xD0\xD2\x07\'\x02\x02\xD1\xD0\x03\x02\x02\x02\xD1\xD2\x03" + "\x02\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD4\x07@\x02\x02\xD4\xD5\x07" + "$\x02\x02\xD5\xDD\x05@!\x02\xD6\xD7\x07\"\x02\x02\xD7\xD9\x05<\x1F\x02" + "\xD8\xD6\x03\x02\x02\x02\xD9\xDC\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02" + "\xDA\xDB\x03\x02\x02\x02\xDB\xDE\x03\x02\x02\x02\xDC\xDA\x03\x02\x02\x02" + "\xDD\xDA\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xDF\x03\x02\x02\x02" + "\xDF\xE0\x07/\x02\x02\xE0\xE9\x03\x02\x02\x02\xE1\xE2\x05\x18\r\x02\xE2" + "\xE4\x07+\x02\x02\xE3\xE5\x07\'\x02\x02\xE4\xE3\x03\x02\x02\x02\xE4\xE5" + "\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE7\x07-\x02\x02\xE7\xE9" + "\x03\x02\x02\x02\xE8\xBB\x03\x02\x02\x02\xE8\xBE\x03\x02\x02\x02\xE8\xBF" + "\x03\x02\x02\x02\xE8\xC0\x03\x02\x02\x02\xE8\xD1\x03\x02\x02\x02\xE8\xE1" + "\x03\x02\x02\x02\xE9\xF2\x03\x02\x02\x02\xEA\xEB\f\x07\x02\x02\xEB\xEC" + "\x07 \x02\x02\xEC\xF1\x05\x12\n\b\xED\xEE\f\x06\x02\x02\xEE\xEF\x07.\x02" + "\x02\xEF\xF1\x05\x12\n\x07\xF0\xEA\x03\x02\x02\x02\xF0\xED\x03\x02\x02" + "\x02\xF1\xF4\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02\xF2\xF3\x03\x02\x02" + "\x02\xF3\x13\x03\x02\x02\x02\xF4\xF2\x03\x02\x02\x02\xF5\xF6\b\v\x01\x02" + "\xF6\xF7\x07\'\x02\x02\xF7\xFA\x05\x14\v\x06\xF8\xFA\x05\x18\r\x02\xF9" + "\xF5\x03\x02\x02\x02\xF9\xF8\x03\x02\x02\x02\xFA\u0103\x03\x02\x02\x02" + "\xFB\xFC\f\x04\x02\x02\xFC\xFD\x07 \x02\x02\xFD\u0102\x05\x14\v\x05\xFE" + "\xFF\f\x03\x02\x02\xFF\u0100\x07.\x02\x02\u0100\u0102\x05\x14\v\x04\u0101" + "\xFB\x03\x02\x02\x02\u0101\xFE\x03\x02\x02\x02\u0102\u0105\x03\x02\x02" + "\x02\u0103\u0101\x03\x02\x02\x02\u0103\u0104\x03\x02\x02\x02\u0104\x15" + "\x03\x02\x02\x02\u0105\u0103\x03\x02\x02\x02\u0106\u0108\x05\x18\r\x02" + "\u0107\u0109\x07\'\x02\x02\u0108\u0107\x03\x02\x02\x02\u0108\u0109\x03" + "\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A\u010B\x07(\x02\x02\u010B" + "\u010C\x05p9\x02\u010C\u0115\x03\x02\x02\x02\u010D\u010F\x05\x18\r\x02" + "\u010E\u0110\x07\'\x02\x02\u010F\u010E\x03\x02\x02\x02\u010F\u0110\x03" + "\x02\x02\x02\u0110\u0111\x03\x02\x02\x02\u0111\u0112\x07)\x02\x02\u0112" + "\u0113\x05p9\x02\u0113\u0115\x03\x02\x02\x02\u0114\u0106\x03\x02\x02\x02" + "\u0114\u010D\x03\x02\x02\x02\u0115\x17\x03\x02\x02\x02\u0116\u0119\x05" + "\"\x12\x02\u0117\u0119\x05\x1A\x0E\x02\u0118\u0116\x03\x02\x02\x02\u0118" + "\u0117\x03\x02\x02\x02\u0119\x19\x03\x02\x02\x02\u011A\u011B\x05\"\x12" + "\x02\u011B\u011C\x05r:\x02\u011C\u011D\x05\"\x12\x02\u011D\x1B\x03\x02" + "\x02\x02\u011E\u011F\x05H%\x02\u011F\u0128\x07$\x02\x02\u0120\u0125\x05" + "<\x1F\x02\u0121\u0122\x07\"\x02\x02\u0122\u0124\x05<\x1F\x02\u0123\u0121" + "\x03\x02\x02\x02\u0124\u0127\x03\x02\x02\x02\u0125\u0123\x03\x02\x02\x02" + "\u0125\u0126\x03\x02\x02\x02\u0126\u0129\x03\x02\x02\x02\u0127\u0125\x03" + "\x02\x02\x02\u0128\u0120\x03\x02\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129" + "\u012A\x03\x02\x02\x02\u012A\u012B\x07/\x02\x02\u012B\x1D\x03\x02\x02" + "\x02\u012C\u012D\x05F$\x02\u012D\u0136\x07$\x02\x02\u012E\u0133\x05> " + "\x02\u012F\u0130\x07\"\x02\x02\u0130\u0132\x05> \x02\u0131\u012F\x03\x02" + "\x02\x02\u0132\u0135\x03\x02\x02\x02\u0133\u0131\x03\x02\x02\x02\u0133" + "\u0134\x03\x02\x02\x02\u0134\u0137\x03\x02\x02\x02\u0135\u0133\x03\x02" + "\x02\x02\u0136\u012E\x03\x02\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137" + "\u0138\x03\x02\x02\x02\u0138\u0139\x07/\x02\x02\u0139\x1F\x03\x02\x02" + "\x02\u013A\u013B\x05j6\x02\u013B\u013C\x07\x1F\x02\x02\u013C!\x03\x02" + "\x02\x02\u013D\u013E\b\x12\x01\x02\u013E\u0144\x05$\x13\x02\u013F\u0144" + "\x05\x1C\x0F\x02\u0140\u0144\x05\x1E\x10\x02\u0141\u0142\t\x02\x02\x02" + "\u0142\u0144\x05\"\x12\x05\u0143\u013D\x03\x02\x02\x02\u0143\u013F\x03" + "\x02\x02\x02\u0143\u0140\x03\x02\x02\x02\u0143\u0141\x03\x02\x02\x02\u0144" + "\u014D\x03\x02\x02\x02\u0145\u0146\f\x04\x02\x02\u0146\u0147\t\x03\x02" + "\x02\u0147\u014C\x05\"\x12\x05\u0148\u0149\f\x03\x02\x02\u0149\u014A\t" + "\x02\x02\x02\u014A\u014C\x05\"\x12\x04\u014B\u0145\x03\x02\x02\x02\u014B" + "\u0148\x03\x02\x02\x02\u014C\u014F\x03\x02\x02\x02\u014D\u014B\x03\x02" + "\x02\x02\u014D\u014E\x03\x02\x02\x02\u014E#\x03\x02\x02\x02\u014F\u014D" + "\x03\x02\x02\x02\u0150\u0166\x05J&\x02\u0151\u0166\x05@!\x02\u0152\u0166" + "\x05 \x11\x02\u0153\u0154\x07$\x02\x02\u0154\u0155\x05\x14\v\x02\u0155" + "\u0156\x07/\x02\x02\u0156\u0166\x03\x02\x02\x02\u0157\u0158\x05D#\x02" + "\u0158\u0161\x07$\x02\x02\u0159\u015E\x05\x14\v\x02\u015A\u015B\x07\"" + "\x02\x02\u015B\u015D\x05\x14\v\x02\u015C\u015A\x03\x02\x02\x02\u015D\u0160" + "\x03\x02\x02\x02\u015E\u015C\x03\x02\x02\x02\u015E\u015F\x03\x02\x02\x02" + "\u015F\u0162\x03\x02\x02\x02\u0160\u015E\x03\x02\x02\x02\u0161\u0159\x03" + "\x02\x02\x02\u0161\u0162\x03\x02\x02\x02\u0162\u0163\x03\x02\x02\x02\u0163" + "\u0164\x07/\x02\x02\u0164\u0166\x03\x02\x02\x02\u0165\u0150\x03\x02\x02" + "\x02\u0165\u0151\x03\x02\x02\x02\u0165\u0152\x03\x02\x02\x02\u0165\u0153" + "\x03\x02\x02\x02\u0165\u0157\x03\x02\x02\x02\u0166%\x03\x02\x02\x02\u0167" + "\u0168\x07\b\x02\x02\u0168\u0169\x05(\x15\x02\u0169\'\x03\x02\x02\x02" + "\u016A\u016F\x05*\x16\x02\u016B\u016C\x07\"\x02\x02\u016C\u016E\x05*\x16" + "\x02\u016D\u016B\x03\x02\x02\x02\u016E\u0171\x03\x02\x02\x02\u016F\u016D" + "\x03\x02\x02\x02\u016F\u0170\x03\x02\x02\x02\u0170)\x03\x02\x02\x02\u0171" + "\u016F\x03\x02\x02\x02\u0172\u0178\x05\x14\v\x02\u0173\u0174\x05.\x18" + "\x02\u0174\u0175\x07!\x02\x02\u0175\u0176\x05\x14\v\x02\u0176\u0178\x03" + "\x02\x02\x02\u0177\u0172\x03\x02\x02\x02\u0177\u0173\x03\x02\x02\x02\u0178" + "+\x03\x02\x02\x02\u0179\u017A\t\x04\x02\x02\u017A-\x03\x02\x02\x02\u017B" + "\u017C\x05D#\x02\u017C/\x03\x02\x02\x02\u017D\u017E\x07\x07\x02\x02\u017E" + "\u0183\x058\x1D\x02\u017F\u0180\x07\"\x02\x02\u0180\u0182\x058\x1D\x02" + "\u0181\u017F\x03\x02\x02\x02\u0182\u0185\x03\x02\x02\x02\u0183\u0181\x03" + "\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u0187\x03\x02\x02\x02\u0185" + "\u0183\x03\x02\x02\x02\u0186\u0188\x052\x1A\x02\u0187\u0186\x03\x02\x02" + "\x02\u0187\u0188\x03\x02\x02\x02\u01881\x03\x02\x02\x02\u0189\u018A\x07" + "%\x02\x02\u018A\u018B\x07F\x02\x02\u018B\u0190\x058\x1D\x02\u018C\u018D" + "\x07\"\x02\x02\u018D\u018F\x058\x1D\x02\u018E\u018C\x03\x02\x02\x02\u018F" + "\u0192\x03\x02\x02\x02\u0190\u018E\x03\x02\x02\x02\u0190\u0191\x03\x02" + "\x02\x02\u0191\u0193\x03\x02\x02\x02\u0192\u0190\x03\x02\x02\x02\u0193" + "\u0194\x07&\x02\x02\u01943\x03\x02\x02\x02\u0195\u0196\x07\x05\x02\x02" + "\u0196\u0197\x05(\x15\x02\u01975\x03\x02\x02\x02\u0198\u019A\x07\t\x02" + "\x02\u0199\u019B\x05(\x15\x02\u019A\u0199\x03\x02\x02\x02\u019A\u019B" + "\x03\x02\x02\x02\u019B\u019E\x03\x02\x02\x02\u019C\u019D\x07\x1E\x02\x02" + "\u019D\u019F\x05B\"\x02\u019E\u019C\x03\x02\x02\x02\u019E\u019F\x03\x02" + "\x02\x02\u019F7\x03\x02\x02\x02\u01A0\u01A1\t\x05\x02\x02\u01A19\x03\x02" + "\x02\x02\u01A2\u01A3\t\x04\x02\x02\u01A3;\x03\x02\x02\x02\u01A4\u01A8" + "\x05@!\x02\u01A5\u01A8\x05p9\x02\u01A6\u01A8\x05j6\x02\u01A7\u01A4\x03" + "\x02\x02\x02\u01A7\u01A5\x03\x02\x02\x02\u01A7\u01A6\x03\x02\x02\x02\u01A8" + "=\x03\x02\x02\x02\u01A9\u01B0\x05@!\x02\u01AA\u01B0\x05p9\x02\u01AB\u01B0" + "\x05j6\x02\u01AC\u01B0\x05\"\x12\x02\u01AD\u01B0\x05 \x11\x02\u01AE\u01B0" + "\x05\x1A\x0E\x02\u01AF\u01A9\x03\x02\x02\x02\u01AF\u01AA\x03\x02\x02\x02" + "\u01AF\u01AB\x03\x02\x02\x02\u01AF\u01AC\x03\x02\x02\x02\u01AF\u01AD\x03" + "\x02\x02\x02\u01AF\u01AE\x03\x02\x02\x02\u01B0?\x03\x02\x02\x02\u01B1" + "\u01B6\x05D#\x02\u01B2\u01B3\x07#\x02\x02\u01B3\u01B5\x05D#\x02\u01B4" + "\u01B2\x03\x02\x02\x02\u01B5\u01B8\x03\x02\x02\x02\u01B6\u01B4\x03\x02" + "\x02\x02\u01B6\u01B7\x03\x02\x02\x02\u01B7A\x03\x02\x02\x02\u01B8\u01B6" + "\x03\x02\x02\x02\u01B9\u01BE\x05@!\x02\u01BA\u01BB\x07\"\x02\x02\u01BB" + "\u01BD\x05@!\x02\u01BC\u01BA\x03\x02\x02\x02\u01BD\u01C0\x03\x02\x02\x02" + "\u01BE\u01BC\x03\x02\x02\x02\u01BE\u01BF\x03\x02\x02\x02\u01BFC\x03\x02" + "\x02\x02\u01C0\u01BE\x03\x02\x02\x02\u01C1\u01C2\t\x06\x02\x02\u01C2E" + "\x03\x02\x02\x02\u01C3\u01C4\x07>\x02\x02\u01C4G\x03\x02\x02\x02\u01C5" + "\u01C6\x07?\x02\x02\u01C6I\x03\x02\x02\x02\u01C7\u01ED\x07-\x02\x02\u01C8" + "\u01ED\x05L\'\x02\u01C9\u01ED\x05h5\x02\u01CA\u01ED\x05p9\x02\u01CB\u01CC" + "\x07%\x02\x02\u01CC\u01D1\x05L\'\x02\u01CD\u01CE\x07\"\x02\x02\u01CE\u01D0" + "\x05L\'\x02\u01CF\u01CD\x03\x02\x02\x02\u01D0\u01D3\x03\x02\x02\x02\u01D1" + "\u01CF\x03\x02\x02\x02\u01D1\u01D2\x03\x02\x02\x02\u01D2\u01D4\x03\x02" + "\x02\x02\u01D3\u01D1\x03\x02\x02\x02\u01D4\u01D5\x07&\x02\x02\u01D5\u01ED" + "\x03\x02\x02\x02\u01D6\u01D7\x07%\x02\x02\u01D7\u01DC\x05h5\x02\u01D8" + "\u01D9\x07\"\x02\x02\u01D9\u01DB\x05h5\x02\u01DA\u01D8\x03\x02\x02\x02" + "\u01DB\u01DE\x03\x02\x02\x02\u01DC\u01DA\x03\x02\x02\x02\u01DC\u01DD\x03" + "\x02\x02\x02\u01DD\u01DF\x03\x02\x02\x02\u01DE\u01DC\x03\x02\x02\x02\u01DF" + "\u01E0\x07&\x02\x02\u01E0\u01ED\x03\x02\x02\x02\u01E1\u01E2\x07%\x02\x02" + "\u01E2\u01E7\x05p9\x02\u01E3\u01E4\x07\"\x02\x02\u01E4\u01E6\x05p9\x02" + "\u01E5\u01E3\x03\x02\x02\x02\u01E6\u01E9\x03\x02\x02\x02\u01E7\u01E5\x03" + "\x02\x02\x02\u01E7\u01E8\x03\x02\x02\x02\u01E8\u01EA\x03\x02\x02\x02\u01E9" + "\u01E7\x03\x02\x02\x02\u01EA\u01EB\x07&\x02\x02\u01EB\u01ED\x03\x02\x02" + "\x02\u01EC\u01C7\x03\x02\x02\x02\u01EC\u01C8\x03\x02\x02\x02\u01EC\u01C9" + "\x03\x02\x02\x02\u01EC\u01CA\x03\x02\x02\x02\u01EC\u01CB\x03\x02\x02\x02" + "\u01EC\u01D6\x03\x02\x02\x02\u01EC\u01E1\x03\x02\x02\x02\u01EDK\x03\x02" + "\x02\x02\u01EE\u01F1\x05l7\x02\u01EF\u01F1\x05n8\x02\u01F0\u01EE\x03\x02" + "\x02\x02\u01F0\u01EF\x03\x02\x02\x02\u01F1M\x03\x02\x02\x02\u01F2\u01F3" + "\x07\r\x02\x02\u01F3\u01F4\x07\x1C\x02\x02\u01F4O\x03\x02\x02\x02\u01F5" + "\u01F6\x07\v\x02\x02\u01F6\u01FB\x05R*\x02\u01F7\u01F8\x07\"\x02\x02\u01F8" + "\u01FA\x05R*\x02\u01F9\u01F7\x03\x02\x02\x02\u01FA\u01FD\x03\x02\x02\x02" + "\u01FB\u01F9\x03\x02\x02\x02\u01FB\u01FC\x03\x02\x02\x02\u01FCQ\x03\x02" + "\x02\x02\u01FD\u01FB\x03\x02\x02\x02\u01FE\u0200\x05\x14\v\x02\u01FF\u0201" + "\x07;\x02\x02\u0200\u01FF\x03\x02\x02\x02\u0200\u0201\x03\x02\x02\x02" + "\u0201\u0204\x03\x02\x02\x02\u0202\u0203\x07<\x02\x02\u0203\u0205\x07" + "=\x02\x02\u0204\u0202\x03\x02\x02\x02\u0204\u0205\x03\x02\x02\x02\u0205" + "S\x03\x02\x02\x02\u0206\u0207\x07\x0E\x02\x02\u0207\u0208\x05B\"\x02\u0208" + "U\x03\x02\x02\x02\u0209\u020A\x07\x13\x02\x02\u020A\u020B\x05B\"\x02\u020B" + "W\x03\x02\x02\x02\u020C\u020D\x07\x0F\x02\x02\u020D\u020E\x05B\"\x02\u020E" + "Y\x03\x02\x02\x02\u020F\u0214\x05D#\x02\u0210\u0211\x07#\x02\x02\u0211" + "\u0213\x05D#\x02\u0212\u0210\x03\x02\x02\x02\u0213\u0216\x03\x02\x02\x02" + "\u0214\u0212\x03\x02\x02\x02\u0214\u0215\x03\x02\x02\x02\u0215[\x03\x02" + "\x02\x02\u0216\u0214\x03\x02\x02\x02\u0217\u0218\x07\x10\x02\x02\u0218" + "\u021D\x05^0\x02\u0219\u021A\x07\"\x02\x02\u021A\u021C\x05^0\x02\u021B" + "\u0219\x03\x02\x02\x02\u021C\u021F\x03\x02\x02\x02\u021D\u021B\x03\x02" + "\x02\x02\u021D\u021E\x03\x02\x02\x02\u021E]\x03\x02\x02\x02\u021F\u021D" + "\x03\x02\x02\x02\u0220\u0221\x05@!\x02\u0221\u0222\x07,\x02\x02\u0222" + "\u0223\x05Z.\x02\u0223_\x03\x02\x02\x02\u0224\u0225\x07\x03\x02\x02\u0225" + "\u0226\x05B\"\x02\u0226\u0228\x05p9\x02\u0227\u0229\x05d3\x02\u0228\u0227" + "\x03\x02\x02\x02\u0228\u0229\x03\x02\x02\x02\u0229a\x03\x02\x02\x02\u022A" + "\u022B\x07\x04\x02\x02\u022B\u022C\x05B\"\x02\u022C\u022D\x05p9\x02\u022D" + "c\x03\x02\x02\x02\u022E\u0233\x05f4\x02\u022F\u0230\x07\"\x02\x02\u0230" + "\u0232\x05f4\x02\u0231\u022F\x03\x02\x02\x02\u0232\u0235\x03\x02\x02\x02" + "\u0233\u0231\x03\x02\x02\x02\u0233\u0234\x03\x02\x02\x02\u0234e\x03\x02" + "\x02\x02\u0235\u0233\x03\x02\x02\x02\u0236\u0237\x05D#\x02\u0237\u0238" + "\x07!\x02\x02\u0238");
(0, _defineProperty2.default)(esql_parser, "_serializedATNSegment1", "\u0239\x05J&\x02\u0239g\x03\x02\x02\x02\u023A\u023B\x073\x02\x02\u023B" + "i\x03\x02\x02\x02\u023C\u023F\x07\x1D\x02\x02\u023D\u023F\x07\x1C\x02" + "\x02\u023E\u023C\x03\x02\x02\x02\u023E\u023D\x03\x02\x02\x02\u023Fk\x03" + "\x02\x02\x02\u0240\u0241\x07\x1D\x02\x02\u0241m\x03\x02\x02\x02\u0242" + "\u0243\x07\x1C\x02\x02\u0243o\x03\x02\x02\x02\u0244\u0245\x07\x1B\x02" + "\x02\u0245q\x03\x02\x02\x02\u0246\u0247\x074\x02\x02\u0247s\x03\x02\x02" + "\x02\u0248\u0249\x07\x06\x02\x02\u0249\u024A\x05v<\x02\u024Au\x03\x02" + "\x02\x02\u024B\u024C\x07%\x02\x02\u024C\u024D\x05\x04\x03\x02\u024D\u024E" + "\x07&\x02\x02\u024Ew\x03\x02\x02\x02\u024F\u0250\x07\x11\x02\x02\u0250" + "\u0254\x071\x02\x02\u0251\u0252\x07\x11\x02\x02\u0252\u0254\x072\x02\x02" + "\u0253\u024F\x03\x02\x02\x02\u0253\u0251\x03\x02\x02\x02\u0254y\x03\x02" + "\x02\x02<\x85\x8C\x9B\xA1\xA9\xAC\xB1\xC2\xCB\xD1\xDA\xDD\xE4\xE8\xF0" + "\xF2\xF9\u0101\u0103\u0108\u010F\u0114\u0118\u0125\u0128\u0133\u0136\u0143" + "\u014B\u014D\u015E\u0161\u0165\u016F\u0177\u0183\u0187\u0190\u019A\u019E" + "\u01A7\u01AF\u01B6\u01BE\u01D1\u01DC\u01E7\u01EC\u01F0\u01FB\u0200\u0204" + "\u0214\u021D\u0228\u0233\u023E\u0253");
(0, _defineProperty2.default)(esql_parser, "_serializedATN", Utils.join([esql_parser._serializedATNSegment0, esql_parser._serializedATNSegment1], ""));
(0, _defineProperty2.default)(esql_parser, "__ATN", void 0);
class SingleStatementContext extends _ParserRuleContext.ParserRuleContext {
  query() {
    return this.getRuleContext(0, QueryContext);
  }
  EOF() {
    return this.getToken(esql_parser.EOF, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_singleStatement;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterSingleStatement) {
      listener.enterSingleStatement(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitSingleStatement) {
      listener.exitSingleStatement(this);
    }
  }
}
exports.SingleStatementContext = SingleStatementContext;
class QueryContext extends _ParserRuleContext.ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_query;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.QueryContext = QueryContext;
class SingleCommandQueryContext extends QueryContext {
  sourceCommand() {
    return this.getRuleContext(0, SourceCommandContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterSingleCommandQuery) {
      listener.enterSingleCommandQuery(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitSingleCommandQuery) {
      listener.exitSingleCommandQuery(this);
    }
  }
}
exports.SingleCommandQueryContext = SingleCommandQueryContext;
class CompositeQueryContext extends QueryContext {
  query() {
    return this.getRuleContext(0, QueryContext);
  }
  PIPE() {
    return this.getToken(esql_parser.PIPE, 0);
  }
  processingCommand() {
    return this.getRuleContext(0, ProcessingCommandContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterCompositeQuery) {
      listener.enterCompositeQuery(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitCompositeQuery) {
      listener.exitCompositeQuery(this);
    }
  }
}
exports.CompositeQueryContext = CompositeQueryContext;
class SourceCommandContext extends _ParserRuleContext.ParserRuleContext {
  explainCommand() {
    return this.tryGetRuleContext(0, ExplainCommandContext);
  }
  fromCommand() {
    return this.tryGetRuleContext(0, FromCommandContext);
  }
  rowCommand() {
    return this.tryGetRuleContext(0, RowCommandContext);
  }
  showCommand() {
    return this.tryGetRuleContext(0, ShowCommandContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_sourceCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterSourceCommand) {
      listener.enterSourceCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitSourceCommand) {
      listener.exitSourceCommand(this);
    }
  }
}
exports.SourceCommandContext = SourceCommandContext;
class ProcessingCommandContext extends _ParserRuleContext.ParserRuleContext {
  evalCommand() {
    return this.tryGetRuleContext(0, EvalCommandContext);
  }
  limitCommand() {
    return this.tryGetRuleContext(0, LimitCommandContext);
  }
  projectCommand() {
    return this.tryGetRuleContext(0, ProjectCommandContext);
  }
  keepCommand() {
    return this.tryGetRuleContext(0, KeepCommandContext);
  }
  renameCommand() {
    return this.tryGetRuleContext(0, RenameCommandContext);
  }
  dropCommand() {
    return this.tryGetRuleContext(0, DropCommandContext);
  }
  dissectCommand() {
    return this.tryGetRuleContext(0, DissectCommandContext);
  }
  grokCommand() {
    return this.tryGetRuleContext(0, GrokCommandContext);
  }
  sortCommand() {
    return this.tryGetRuleContext(0, SortCommandContext);
  }
  statsCommand() {
    return this.tryGetRuleContext(0, StatsCommandContext);
  }
  whereCommand() {
    return this.tryGetRuleContext(0, WhereCommandContext);
  }
  mvExpandCommand() {
    return this.tryGetRuleContext(0, MvExpandCommandContext);
  }
  enrichCommand() {
    return this.tryGetRuleContext(0, EnrichCommandContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_processingCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterProcessingCommand) {
      listener.enterProcessingCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitProcessingCommand) {
      listener.exitProcessingCommand(this);
    }
  }
}
exports.ProcessingCommandContext = ProcessingCommandContext;
class EnrichCommandContext extends _ParserRuleContext.ParserRuleContext {
  ENRICH() {
    return this.getToken(esql_parser.ENRICH, 0);
  }
  enrichIdentifier() {
    return this.getRuleContext(0, EnrichIdentifierContext);
  }
  ON() {
    return this.tryGetToken(esql_parser.ON, 0);
  }
  WITH() {
    return this.tryGetToken(esql_parser.WITH, 0);
  }
  enrichWithClause(i) {
    if (i === undefined) {
      return this.getRuleContexts(EnrichWithClauseContext);
    } else {
      return this.getRuleContext(i, EnrichWithClauseContext);
    }
  }
  enrichFieldIdentifier() {
    return this.tryGetRuleContext(0, EnrichFieldIdentifierContext);
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_policyName", void 0);
    (0, _defineProperty2.default)(this, "_matchField", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_enrichCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterEnrichCommand) {
      listener.enterEnrichCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitEnrichCommand) {
      listener.exitEnrichCommand(this);
    }
  }
}
exports.EnrichCommandContext = EnrichCommandContext;
class EnrichWithClauseContext extends _ParserRuleContext.ParserRuleContext {
  enrichFieldIdentifier(i) {
    if (i === undefined) {
      return this.getRuleContexts(EnrichFieldIdentifierContext);
    } else {
      return this.getRuleContext(i, EnrichFieldIdentifierContext);
    }
  }
  ASSIGN() {
    return this.tryGetToken(esql_parser.ASSIGN, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_newName", void 0);
    (0, _defineProperty2.default)(this, "_enrichField", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_enrichWithClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterEnrichWithClause) {
      listener.enterEnrichWithClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitEnrichWithClause) {
      listener.exitEnrichWithClause(this);
    }
  }
}
exports.EnrichWithClauseContext = EnrichWithClauseContext;
class MvExpandCommandContext extends _ParserRuleContext.ParserRuleContext {
  MV_EXPAND() {
    return this.getToken(esql_parser.MV_EXPAND, 0);
  }
  qualifiedNames() {
    return this.getRuleContext(0, QualifiedNamesContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_mvExpandCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterMvExpandCommand) {
      listener.enterMvExpandCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitMvExpandCommand) {
      listener.exitMvExpandCommand(this);
    }
  }
}
exports.MvExpandCommandContext = MvExpandCommandContext;
class WhereCommandContext extends _ParserRuleContext.ParserRuleContext {
  WHERE() {
    return this.getToken(esql_parser.WHERE, 0);
  }
  whereBooleanExpression() {
    return this.getRuleContext(0, WhereBooleanExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_whereCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterWhereCommand) {
      listener.enterWhereCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitWhereCommand) {
      listener.exitWhereCommand(this);
    }
  }
}
exports.WhereCommandContext = WhereCommandContext;
class WhereBooleanExpressionContext extends _ParserRuleContext.ParserRuleContext {
  NOT() {
    return this.tryGetToken(esql_parser.NOT, 0);
  }
  whereBooleanExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(WhereBooleanExpressionContext);
    } else {
      return this.getRuleContext(i, WhereBooleanExpressionContext);
    }
  }
  valueExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(ValueExpressionContext);
    } else {
      return this.getRuleContext(i, ValueExpressionContext);
    }
  }
  regexBooleanExpression() {
    return this.tryGetRuleContext(0, RegexBooleanExpressionContext);
  }
  AND() {
    return this.tryGetToken(esql_parser.AND, 0);
  }
  OR() {
    return this.tryGetToken(esql_parser.OR, 0);
  }
  IN() {
    return this.tryGetToken(esql_parser.IN, 0);
  }
  LP() {
    return this.tryGetToken(esql_parser.LP, 0);
  }
  RP() {
    return this.tryGetToken(esql_parser.RP, 0);
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  WHERE_FUNCTIONS() {
    return this.tryGetToken(esql_parser.WHERE_FUNCTIONS, 0);
  }
  qualifiedName() {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  functionExpressionArgument(i) {
    if (i === undefined) {
      return this.getRuleContexts(FunctionExpressionArgumentContext);
    } else {
      return this.getRuleContext(i, FunctionExpressionArgumentContext);
    }
  }
  IS() {
    return this.tryGetToken(esql_parser.IS, 0);
  }
  NULL() {
    return this.tryGetToken(esql_parser.NULL, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_operator", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_whereBooleanExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterWhereBooleanExpression) {
      listener.enterWhereBooleanExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitWhereBooleanExpression) {
      listener.exitWhereBooleanExpression(this);
    }
  }
}
exports.WhereBooleanExpressionContext = WhereBooleanExpressionContext;
class BooleanExpressionContext extends _ParserRuleContext.ParserRuleContext {
  NOT() {
    return this.tryGetToken(esql_parser.NOT, 0);
  }
  booleanExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(BooleanExpressionContext);
    } else {
      return this.getRuleContext(i, BooleanExpressionContext);
    }
  }
  valueExpression() {
    return this.tryGetRuleContext(0, ValueExpressionContext);
  }
  AND() {
    return this.tryGetToken(esql_parser.AND, 0);
  }
  OR() {
    return this.tryGetToken(esql_parser.OR, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_operator", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_booleanExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterBooleanExpression) {
      listener.enterBooleanExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitBooleanExpression) {
      listener.exitBooleanExpression(this);
    }
  }
}
exports.BooleanExpressionContext = BooleanExpressionContext;
class RegexBooleanExpressionContext extends _ParserRuleContext.ParserRuleContext {
  valueExpression() {
    return this.getRuleContext(0, ValueExpressionContext);
  }
  LIKE() {
    return this.tryGetToken(esql_parser.LIKE, 0);
  }
  string() {
    return this.getRuleContext(0, StringContext);
  }
  NOT() {
    return this.tryGetToken(esql_parser.NOT, 0);
  }
  RLIKE() {
    return this.tryGetToken(esql_parser.RLIKE, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_kind", void 0);
    (0, _defineProperty2.default)(this, "_pattern", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_regexBooleanExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterRegexBooleanExpression) {
      listener.enterRegexBooleanExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitRegexBooleanExpression) {
      listener.exitRegexBooleanExpression(this);
    }
  }
}
exports.RegexBooleanExpressionContext = RegexBooleanExpressionContext;
class ValueExpressionContext extends _ParserRuleContext.ParserRuleContext {
  operatorExpression() {
    return this.tryGetRuleContext(0, OperatorExpressionContext);
  }
  comparison() {
    return this.tryGetRuleContext(0, ComparisonContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_valueExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterValueExpression) {
      listener.enterValueExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitValueExpression) {
      listener.exitValueExpression(this);
    }
  }
}
exports.ValueExpressionContext = ValueExpressionContext;
class ComparisonContext extends _ParserRuleContext.ParserRuleContext {
  comparisonOperator() {
    return this.getRuleContext(0, ComparisonOperatorContext);
  }
  operatorExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(OperatorExpressionContext);
    } else {
      return this.getRuleContext(i, OperatorExpressionContext);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_comparison;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterComparison) {
      listener.enterComparison(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitComparison) {
      listener.exitComparison(this);
    }
  }
}
exports.ComparisonContext = ComparisonContext;
class MathFnContext extends _ParserRuleContext.ParserRuleContext {
  functionIdentifier() {
    return this.getRuleContext(0, FunctionIdentifierContext);
  }
  LP() {
    return this.getToken(esql_parser.LP, 0);
  }
  RP() {
    return this.getToken(esql_parser.RP, 0);
  }
  functionExpressionArgument(i) {
    if (i === undefined) {
      return this.getRuleContexts(FunctionExpressionArgumentContext);
    } else {
      return this.getRuleContext(i, FunctionExpressionArgumentContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_mathFn;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterMathFn) {
      listener.enterMathFn(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitMathFn) {
      listener.exitMathFn(this);
    }
  }
}
exports.MathFnContext = MathFnContext;
class MathEvalFnContext extends _ParserRuleContext.ParserRuleContext {
  mathFunctionIdentifier() {
    return this.getRuleContext(0, MathFunctionIdentifierContext);
  }
  LP() {
    return this.getToken(esql_parser.LP, 0);
  }
  RP() {
    return this.getToken(esql_parser.RP, 0);
  }
  mathFunctionExpressionArgument(i) {
    if (i === undefined) {
      return this.getRuleContexts(MathFunctionExpressionArgumentContext);
    } else {
      return this.getRuleContext(i, MathFunctionExpressionArgumentContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_mathEvalFn;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterMathEvalFn) {
      listener.enterMathEvalFn(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitMathEvalFn) {
      listener.exitMathEvalFn(this);
    }
  }
}
exports.MathEvalFnContext = MathEvalFnContext;
class DateExpressionContext extends _ParserRuleContext.ParserRuleContext {
  DATE_LITERAL() {
    return this.getToken(esql_parser.DATE_LITERAL, 0);
  }
  number() {
    return this.getRuleContext(0, NumberContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_quantifier", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_dateExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterDateExpression) {
      listener.enterDateExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitDateExpression) {
      listener.exitDateExpression(this);
    }
  }
}
exports.DateExpressionContext = DateExpressionContext;
class OperatorExpressionContext extends _ParserRuleContext.ParserRuleContext {
  primaryExpression() {
    return this.tryGetRuleContext(0, PrimaryExpressionContext);
  }
  mathFn() {
    return this.tryGetRuleContext(0, MathFnContext);
  }
  mathEvalFn() {
    return this.tryGetRuleContext(0, MathEvalFnContext);
  }
  operatorExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(OperatorExpressionContext);
    } else {
      return this.getRuleContext(i, OperatorExpressionContext);
    }
  }
  MINUS() {
    return this.tryGetToken(esql_parser.MINUS, 0);
  }
  PLUS() {
    return this.tryGetToken(esql_parser.PLUS, 0);
  }
  ASTERISK() {
    return this.tryGetToken(esql_parser.ASTERISK, 0);
  }
  SLASH() {
    return this.tryGetToken(esql_parser.SLASH, 0);
  }
  PERCENT() {
    return this.tryGetToken(esql_parser.PERCENT, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_operator", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_operatorExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterOperatorExpression) {
      listener.enterOperatorExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitOperatorExpression) {
      listener.exitOperatorExpression(this);
    }
  }
}
exports.OperatorExpressionContext = OperatorExpressionContext;
class PrimaryExpressionContext extends _ParserRuleContext.ParserRuleContext {
  constant() {
    return this.tryGetRuleContext(0, ConstantContext);
  }
  qualifiedName() {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  dateExpression() {
    return this.tryGetRuleContext(0, DateExpressionContext);
  }
  LP() {
    return this.tryGetToken(esql_parser.LP, 0);
  }
  booleanExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(BooleanExpressionContext);
    } else {
      return this.getRuleContext(i, BooleanExpressionContext);
    }
  }
  RP() {
    return this.tryGetToken(esql_parser.RP, 0);
  }
  identifier() {
    return this.tryGetRuleContext(0, IdentifierContext);
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_primaryExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterPrimaryExpression) {
      listener.enterPrimaryExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitPrimaryExpression) {
      listener.exitPrimaryExpression(this);
    }
  }
}
exports.PrimaryExpressionContext = PrimaryExpressionContext;
class RowCommandContext extends _ParserRuleContext.ParserRuleContext {
  ROW() {
    return this.getToken(esql_parser.ROW, 0);
  }
  fields() {
    return this.getRuleContext(0, FieldsContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_rowCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterRowCommand) {
      listener.enterRowCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitRowCommand) {
      listener.exitRowCommand(this);
    }
  }
}
exports.RowCommandContext = RowCommandContext;
class FieldsContext extends _ParserRuleContext.ParserRuleContext {
  field(i) {
    if (i === undefined) {
      return this.getRuleContexts(FieldContext);
    } else {
      return this.getRuleContext(i, FieldContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_fields;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterFields) {
      listener.enterFields(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitFields) {
      listener.exitFields(this);
    }
  }
}
exports.FieldsContext = FieldsContext;
class FieldContext extends _ParserRuleContext.ParserRuleContext {
  booleanExpression() {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  userVariable() {
    return this.tryGetRuleContext(0, UserVariableContext);
  }
  ASSIGN() {
    return this.tryGetToken(esql_parser.ASSIGN, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_field;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterField) {
      listener.enterField(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitField) {
      listener.exitField(this);
    }
  }
}
exports.FieldContext = FieldContext;
class EnrichFieldIdentifierContext extends _ParserRuleContext.ParserRuleContext {
  ENR_UNQUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.ENR_UNQUOTED_IDENTIFIER, 0);
  }
  ENR_QUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.ENR_QUOTED_IDENTIFIER, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_enrichFieldIdentifier;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterEnrichFieldIdentifier) {
      listener.enterEnrichFieldIdentifier(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitEnrichFieldIdentifier) {
      listener.exitEnrichFieldIdentifier(this);
    }
  }
}
exports.EnrichFieldIdentifierContext = EnrichFieldIdentifierContext;
class UserVariableContext extends _ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_userVariable;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterUserVariable) {
      listener.enterUserVariable(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitUserVariable) {
      listener.exitUserVariable(this);
    }
  }
}
exports.UserVariableContext = UserVariableContext;
class FromCommandContext extends _ParserRuleContext.ParserRuleContext {
  FROM() {
    return this.getToken(esql_parser.FROM, 0);
  }
  sourceIdentifier(i) {
    if (i === undefined) {
      return this.getRuleContexts(SourceIdentifierContext);
    } else {
      return this.getRuleContext(i, SourceIdentifierContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  metadata() {
    return this.tryGetRuleContext(0, MetadataContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_fromCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterFromCommand) {
      listener.enterFromCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitFromCommand) {
      listener.exitFromCommand(this);
    }
  }
}
exports.FromCommandContext = FromCommandContext;
class MetadataContext extends _ParserRuleContext.ParserRuleContext {
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  METADATA() {
    return this.getToken(esql_parser.METADATA, 0);
  }
  sourceIdentifier(i) {
    if (i === undefined) {
      return this.getRuleContexts(SourceIdentifierContext);
    } else {
      return this.getRuleContext(i, SourceIdentifierContext);
    }
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_metadata;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterMetadata) {
      listener.enterMetadata(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitMetadata) {
      listener.exitMetadata(this);
    }
  }
}
exports.MetadataContext = MetadataContext;
class EvalCommandContext extends _ParserRuleContext.ParserRuleContext {
  EVAL() {
    return this.getToken(esql_parser.EVAL, 0);
  }
  fields() {
    return this.getRuleContext(0, FieldsContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_evalCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterEvalCommand) {
      listener.enterEvalCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitEvalCommand) {
      listener.exitEvalCommand(this);
    }
  }
}
exports.EvalCommandContext = EvalCommandContext;
class StatsCommandContext extends _ParserRuleContext.ParserRuleContext {
  STATS() {
    return this.getToken(esql_parser.STATS, 0);
  }
  fields() {
    return this.tryGetRuleContext(0, FieldsContext);
  }
  BY() {
    return this.tryGetToken(esql_parser.BY, 0);
  }
  qualifiedNames() {
    return this.tryGetRuleContext(0, QualifiedNamesContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_statsCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterStatsCommand) {
      listener.enterStatsCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitStatsCommand) {
      listener.exitStatsCommand(this);
    }
  }
}
exports.StatsCommandContext = StatsCommandContext;
class SourceIdentifierContext extends _ParserRuleContext.ParserRuleContext {
  SRC_UNQUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.SRC_UNQUOTED_IDENTIFIER, 0);
  }
  SRC_QUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.SRC_QUOTED_IDENTIFIER, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_sourceIdentifier;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterSourceIdentifier) {
      listener.enterSourceIdentifier(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitSourceIdentifier) {
      listener.exitSourceIdentifier(this);
    }
  }
}
exports.SourceIdentifierContext = SourceIdentifierContext;
class EnrichIdentifierContext extends _ParserRuleContext.ParserRuleContext {
  ENR_UNQUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.ENR_UNQUOTED_IDENTIFIER, 0);
  }
  ENR_QUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.ENR_QUOTED_IDENTIFIER, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_enrichIdentifier;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterEnrichIdentifier) {
      listener.enterEnrichIdentifier(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitEnrichIdentifier) {
      listener.exitEnrichIdentifier(this);
    }
  }
}
exports.EnrichIdentifierContext = EnrichIdentifierContext;
class FunctionExpressionArgumentContext extends _ParserRuleContext.ParserRuleContext {
  qualifiedName() {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  string() {
    return this.tryGetRuleContext(0, StringContext);
  }
  number() {
    return this.tryGetRuleContext(0, NumberContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_functionExpressionArgument;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterFunctionExpressionArgument) {
      listener.enterFunctionExpressionArgument(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitFunctionExpressionArgument) {
      listener.exitFunctionExpressionArgument(this);
    }
  }
}
exports.FunctionExpressionArgumentContext = FunctionExpressionArgumentContext;
class MathFunctionExpressionArgumentContext extends _ParserRuleContext.ParserRuleContext {
  qualifiedName() {
    return this.tryGetRuleContext(0, QualifiedNameContext);
  }
  string() {
    return this.tryGetRuleContext(0, StringContext);
  }
  number() {
    return this.tryGetRuleContext(0, NumberContext);
  }
  operatorExpression() {
    return this.tryGetRuleContext(0, OperatorExpressionContext);
  }
  dateExpression() {
    return this.tryGetRuleContext(0, DateExpressionContext);
  }
  comparison() {
    return this.tryGetRuleContext(0, ComparisonContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_mathFunctionExpressionArgument;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterMathFunctionExpressionArgument) {
      listener.enterMathFunctionExpressionArgument(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitMathFunctionExpressionArgument) {
      listener.exitMathFunctionExpressionArgument(this);
    }
  }
}
exports.MathFunctionExpressionArgumentContext = MathFunctionExpressionArgumentContext;
class QualifiedNameContext extends _ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  DOT(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.DOT);
    } else {
      return this.getToken(esql_parser.DOT, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_qualifiedName;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterQualifiedName) {
      listener.enterQualifiedName(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitQualifiedName) {
      listener.exitQualifiedName(this);
    }
  }
}
exports.QualifiedNameContext = QualifiedNameContext;
class QualifiedNamesContext extends _ParserRuleContext.ParserRuleContext {
  qualifiedName(i) {
    if (i === undefined) {
      return this.getRuleContexts(QualifiedNameContext);
    } else {
      return this.getRuleContext(i, QualifiedNameContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_qualifiedNames;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterQualifiedNames) {
      listener.enterQualifiedNames(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitQualifiedNames) {
      listener.exitQualifiedNames(this);
    }
  }
}
exports.QualifiedNamesContext = QualifiedNamesContext;
class IdentifierContext extends _ParserRuleContext.ParserRuleContext {
  UNQUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.UNQUOTED_IDENTIFIER, 0);
  }
  QUOTED_IDENTIFIER() {
    return this.tryGetToken(esql_parser.QUOTED_IDENTIFIER, 0);
  }
  ASTERISK() {
    return this.tryGetToken(esql_parser.ASTERISK, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_identifier;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterIdentifier) {
      listener.enterIdentifier(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitIdentifier) {
      listener.exitIdentifier(this);
    }
  }
}
exports.IdentifierContext = IdentifierContext;
class MathFunctionIdentifierContext extends _ParserRuleContext.ParserRuleContext {
  MATH_FUNCTION() {
    return this.getToken(esql_parser.MATH_FUNCTION, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_mathFunctionIdentifier;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterMathFunctionIdentifier) {
      listener.enterMathFunctionIdentifier(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitMathFunctionIdentifier) {
      listener.exitMathFunctionIdentifier(this);
    }
  }
}
exports.MathFunctionIdentifierContext = MathFunctionIdentifierContext;
class FunctionIdentifierContext extends _ParserRuleContext.ParserRuleContext {
  UNARY_FUNCTION() {
    return this.getToken(esql_parser.UNARY_FUNCTION, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_functionIdentifier;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterFunctionIdentifier) {
      listener.enterFunctionIdentifier(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitFunctionIdentifier) {
      listener.exitFunctionIdentifier(this);
    }
  }
}
exports.FunctionIdentifierContext = FunctionIdentifierContext;
class ConstantContext extends _ParserRuleContext.ParserRuleContext {
  NULL() {
    return this.tryGetToken(esql_parser.NULL, 0);
  }
  numericValue(i) {
    if (i === undefined) {
      return this.getRuleContexts(NumericValueContext);
    } else {
      return this.getRuleContext(i, NumericValueContext);
    }
  }
  booleanValue(i) {
    if (i === undefined) {
      return this.getRuleContexts(BooleanValueContext);
    } else {
      return this.getRuleContext(i, BooleanValueContext);
    }
  }
  string(i) {
    if (i === undefined) {
      return this.getRuleContexts(StringContext);
    } else {
      return this.getRuleContext(i, StringContext);
    }
  }
  OPENING_BRACKET() {
    return this.tryGetToken(esql_parser.OPENING_BRACKET, 0);
  }
  CLOSING_BRACKET() {
    return this.tryGetToken(esql_parser.CLOSING_BRACKET, 0);
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_constant;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterConstant) {
      listener.enterConstant(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitConstant) {
      listener.exitConstant(this);
    }
  }
}
exports.ConstantContext = ConstantContext;
class NumericValueContext extends _ParserRuleContext.ParserRuleContext {
  decimalValue() {
    return this.tryGetRuleContext(0, DecimalValueContext);
  }
  integerValue() {
    return this.tryGetRuleContext(0, IntegerValueContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_numericValue;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterNumericValue) {
      listener.enterNumericValue(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitNumericValue) {
      listener.exitNumericValue(this);
    }
  }
}
exports.NumericValueContext = NumericValueContext;
class LimitCommandContext extends _ParserRuleContext.ParserRuleContext {
  LIMIT() {
    return this.getToken(esql_parser.LIMIT, 0);
  }
  INTEGER_LITERAL() {
    return this.getToken(esql_parser.INTEGER_LITERAL, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_limitCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterLimitCommand) {
      listener.enterLimitCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitLimitCommand) {
      listener.exitLimitCommand(this);
    }
  }
}
exports.LimitCommandContext = LimitCommandContext;
class SortCommandContext extends _ParserRuleContext.ParserRuleContext {
  SORT() {
    return this.getToken(esql_parser.SORT, 0);
  }
  orderExpression(i) {
    if (i === undefined) {
      return this.getRuleContexts(OrderExpressionContext);
    } else {
      return this.getRuleContext(i, OrderExpressionContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_sortCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterSortCommand) {
      listener.enterSortCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitSortCommand) {
      listener.exitSortCommand(this);
    }
  }
}
exports.SortCommandContext = SortCommandContext;
class OrderExpressionContext extends _ParserRuleContext.ParserRuleContext {
  booleanExpression() {
    return this.getRuleContext(0, BooleanExpressionContext);
  }
  ORDERING() {
    return this.tryGetToken(esql_parser.ORDERING, 0);
  }
  NULLS_ORDERING() {
    return this.tryGetToken(esql_parser.NULLS_ORDERING, 0);
  }
  NULLS_ORDERING_DIRECTION() {
    return this.tryGetToken(esql_parser.NULLS_ORDERING_DIRECTION, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_orderExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterOrderExpression) {
      listener.enterOrderExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitOrderExpression) {
      listener.exitOrderExpression(this);
    }
  }
}
exports.OrderExpressionContext = OrderExpressionContext;
class ProjectCommandContext extends _ParserRuleContext.ParserRuleContext {
  PROJECT() {
    return this.getToken(esql_parser.PROJECT, 0);
  }
  qualifiedNames() {
    return this.getRuleContext(0, QualifiedNamesContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_projectCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterProjectCommand) {
      listener.enterProjectCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitProjectCommand) {
      listener.exitProjectCommand(this);
    }
  }
}
exports.ProjectCommandContext = ProjectCommandContext;
class KeepCommandContext extends _ParserRuleContext.ParserRuleContext {
  KEEP() {
    return this.getToken(esql_parser.KEEP, 0);
  }
  qualifiedNames() {
    return this.getRuleContext(0, QualifiedNamesContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_keepCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterKeepCommand) {
      listener.enterKeepCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitKeepCommand) {
      listener.exitKeepCommand(this);
    }
  }
}
exports.KeepCommandContext = KeepCommandContext;
class DropCommandContext extends _ParserRuleContext.ParserRuleContext {
  DROP() {
    return this.getToken(esql_parser.DROP, 0);
  }
  qualifiedNames() {
    return this.getRuleContext(0, QualifiedNamesContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_dropCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterDropCommand) {
      listener.enterDropCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitDropCommand) {
      listener.exitDropCommand(this);
    }
  }
}
exports.DropCommandContext = DropCommandContext;
class RenameVariableContext extends _ParserRuleContext.ParserRuleContext {
  identifier(i) {
    if (i === undefined) {
      return this.getRuleContexts(IdentifierContext);
    } else {
      return this.getRuleContext(i, IdentifierContext);
    }
  }
  DOT(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.DOT);
    } else {
      return this.getToken(esql_parser.DOT, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_renameVariable;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterRenameVariable) {
      listener.enterRenameVariable(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitRenameVariable) {
      listener.exitRenameVariable(this);
    }
  }
}
exports.RenameVariableContext = RenameVariableContext;
class RenameCommandContext extends _ParserRuleContext.ParserRuleContext {
  RENAME() {
    return this.getToken(esql_parser.RENAME, 0);
  }
  renameClause(i) {
    if (i === undefined) {
      return this.getRuleContexts(RenameClauseContext);
    } else {
      return this.getRuleContext(i, RenameClauseContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_renameCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterRenameCommand) {
      listener.enterRenameCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitRenameCommand) {
      listener.exitRenameCommand(this);
    }
  }
}
exports.RenameCommandContext = RenameCommandContext;
class RenameClauseContext extends _ParserRuleContext.ParserRuleContext {
  qualifiedName() {
    return this.getRuleContext(0, QualifiedNameContext);
  }
  AS() {
    return this.getToken(esql_parser.AS, 0);
  }
  renameVariable() {
    return this.getRuleContext(0, RenameVariableContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_renameClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterRenameClause) {
      listener.enterRenameClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitRenameClause) {
      listener.exitRenameClause(this);
    }
  }
}
exports.RenameClauseContext = RenameClauseContext;
class DissectCommandContext extends _ParserRuleContext.ParserRuleContext {
  DISSECT() {
    return this.getToken(esql_parser.DISSECT, 0);
  }
  qualifiedNames() {
    return this.getRuleContext(0, QualifiedNamesContext);
  }
  string() {
    return this.getRuleContext(0, StringContext);
  }
  commandOptions() {
    return this.tryGetRuleContext(0, CommandOptionsContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_dissectCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterDissectCommand) {
      listener.enterDissectCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitDissectCommand) {
      listener.exitDissectCommand(this);
    }
  }
}
exports.DissectCommandContext = DissectCommandContext;
class GrokCommandContext extends _ParserRuleContext.ParserRuleContext {
  GROK() {
    return this.getToken(esql_parser.GROK, 0);
  }
  qualifiedNames() {
    return this.getRuleContext(0, QualifiedNamesContext);
  }
  string() {
    return this.getRuleContext(0, StringContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_grokCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterGrokCommand) {
      listener.enterGrokCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitGrokCommand) {
      listener.exitGrokCommand(this);
    }
  }
}
exports.GrokCommandContext = GrokCommandContext;
class CommandOptionsContext extends _ParserRuleContext.ParserRuleContext {
  commandOption(i) {
    if (i === undefined) {
      return this.getRuleContexts(CommandOptionContext);
    } else {
      return this.getRuleContext(i, CommandOptionContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(esql_parser.COMMA);
    } else {
      return this.getToken(esql_parser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_commandOptions;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterCommandOptions) {
      listener.enterCommandOptions(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitCommandOptions) {
      listener.exitCommandOptions(this);
    }
  }
}
exports.CommandOptionsContext = CommandOptionsContext;
class CommandOptionContext extends _ParserRuleContext.ParserRuleContext {
  identifier() {
    return this.getRuleContext(0, IdentifierContext);
  }
  ASSIGN() {
    return this.getToken(esql_parser.ASSIGN, 0);
  }
  constant() {
    return this.getRuleContext(0, ConstantContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_commandOption;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterCommandOption) {
      listener.enterCommandOption(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitCommandOption) {
      listener.exitCommandOption(this);
    }
  }
}
exports.CommandOptionContext = CommandOptionContext;
class BooleanValueContext extends _ParserRuleContext.ParserRuleContext {
  BOOLEAN_VALUE() {
    return this.getToken(esql_parser.BOOLEAN_VALUE, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_booleanValue;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterBooleanValue) {
      listener.enterBooleanValue(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitBooleanValue) {
      listener.exitBooleanValue(this);
    }
  }
}
exports.BooleanValueContext = BooleanValueContext;
class NumberContext extends _ParserRuleContext.ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_number;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.NumberContext = NumberContext;
class DecimalLiteralContext extends NumberContext {
  DECIMAL_LITERAL() {
    return this.getToken(esql_parser.DECIMAL_LITERAL, 0);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterDecimalLiteral) {
      listener.enterDecimalLiteral(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitDecimalLiteral) {
      listener.exitDecimalLiteral(this);
    }
  }
}
exports.DecimalLiteralContext = DecimalLiteralContext;
class IntegerLiteralContext extends NumberContext {
  INTEGER_LITERAL() {
    return this.getToken(esql_parser.INTEGER_LITERAL, 0);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterIntegerLiteral) {
      listener.enterIntegerLiteral(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitIntegerLiteral) {
      listener.exitIntegerLiteral(this);
    }
  }
}
exports.IntegerLiteralContext = IntegerLiteralContext;
class DecimalValueContext extends _ParserRuleContext.ParserRuleContext {
  DECIMAL_LITERAL() {
    return this.getToken(esql_parser.DECIMAL_LITERAL, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_decimalValue;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterDecimalValue) {
      listener.enterDecimalValue(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitDecimalValue) {
      listener.exitDecimalValue(this);
    }
  }
}
exports.DecimalValueContext = DecimalValueContext;
class IntegerValueContext extends _ParserRuleContext.ParserRuleContext {
  INTEGER_LITERAL() {
    return this.getToken(esql_parser.INTEGER_LITERAL, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_integerValue;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterIntegerValue) {
      listener.enterIntegerValue(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitIntegerValue) {
      listener.exitIntegerValue(this);
    }
  }
}
exports.IntegerValueContext = IntegerValueContext;
class StringContext extends _ParserRuleContext.ParserRuleContext {
  STRING() {
    return this.getToken(esql_parser.STRING, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_string;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterString) {
      listener.enterString(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitString) {
      listener.exitString(this);
    }
  }
}
exports.StringContext = StringContext;
class ComparisonOperatorContext extends _ParserRuleContext.ParserRuleContext {
  COMPARISON_OPERATOR() {
    return this.getToken(esql_parser.COMPARISON_OPERATOR, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_comparisonOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterComparisonOperator) {
      listener.enterComparisonOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitComparisonOperator) {
      listener.exitComparisonOperator(this);
    }
  }
}
exports.ComparisonOperatorContext = ComparisonOperatorContext;
class ExplainCommandContext extends _ParserRuleContext.ParserRuleContext {
  EXPLAIN() {
    return this.getToken(esql_parser.EXPLAIN, 0);
  }
  subqueryExpression() {
    return this.getRuleContext(0, SubqueryExpressionContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_explainCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterExplainCommand) {
      listener.enterExplainCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitExplainCommand) {
      listener.exitExplainCommand(this);
    }
  }
}
exports.ExplainCommandContext = ExplainCommandContext;
class SubqueryExpressionContext extends _ParserRuleContext.ParserRuleContext {
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  query() {
    return this.getRuleContext(0, QueryContext);
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_subqueryExpression;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterSubqueryExpression) {
      listener.enterSubqueryExpression(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitSubqueryExpression) {
      listener.exitSubqueryExpression(this);
    }
  }
}
exports.SubqueryExpressionContext = SubqueryExpressionContext;
class ShowCommandContext extends _ParserRuleContext.ParserRuleContext {
  SHOW() {
    return this.getToken(esql_parser.SHOW, 0);
  }
  INFO() {
    return this.tryGetToken(esql_parser.INFO, 0);
  }
  FUNCTIONS() {
    return this.tryGetToken(esql_parser.FUNCTIONS, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return esql_parser.RULE_showCommand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterShowCommand) {
      listener.enterShowCommand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitShowCommand) {
      listener.exitShowCommand(this);
    }
  }
}
exports.ShowCommandContext = ShowCommandContext;