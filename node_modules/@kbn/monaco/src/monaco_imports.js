"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monaco = void 0;
var monaco = _interopRequireWildcard(require("monaco-editor/esm/vs/editor/editor.api"));
exports.monaco = monaco;
require("monaco-editor/esm/vs/base/common/worker/simpleWorker");
require("monaco-editor/esm/vs/base/worker/defaultWorkerFactory");
require("monaco-editor/esm/vs/editor/browser/controller/coreCommands.js");
require("monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js");
require("monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js");
require("monaco-editor/esm/vs/editor/contrib/linesOperations/linesOperations.js");
require("monaco-editor/esm/vs/editor/contrib/folding/folding.js");
require("monaco-editor/esm/vs/editor/contrib/suggest/suggestController.js");
require("monaco-editor/esm/vs/editor/contrib/hover/hover.js");
require("monaco-editor/esm/vs/editor/contrib/parameterHints/parameterHints.js");
require("monaco-editor/esm/vs/editor/contrib/bracketMatching/bracketMatching.js");
require("monaco-editor/esm/vs/language/json/monaco.contribution.js");
require("monaco-editor/esm/vs/basic-languages/javascript/javascript.contribution.js");
require("monaco-editor/esm/vs/basic-languages/xml/xml.contribution.js");
require("monaco-editor/esm/vs/basic-languages/yaml/yaml.contribution");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }