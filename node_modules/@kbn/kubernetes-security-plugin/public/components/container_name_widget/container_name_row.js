"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROW_TEST_ID = exports.ContainerNameRow = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _styles = require("./styles");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ROW_TEST_ID = 'kubernetesSecurity:containerNameSessionRow';
exports.ROW_TEST_ID = ROW_TEST_ID;
const ContainerNameRow = ({
  name,
  filterButtonIn,
  filterButtonOut,
  copyToClipboardButton
}) => {
  const [isHover, setIsHover] = (0, _react.useState)(false);
  const styles = (0, _styles.useStyles)();
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    onMouseEnter: () => setIsHover(true),
    onMouseLeave: () => setIsHover(false),
    "data-test-subj": ROW_TEST_ID,
    css: styles.flexWidth
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs",
    css: styles.dataInfo
  }, /*#__PURE__*/_react.default.createElement("div", {
    css: styles.truncate
  }, name), isHover && /*#__PURE__*/_react.default.createElement("div", {
    css: styles.filters
  }, filterButtonIn, filterButtonOut, copyToClipboardButton)));
};
exports.ContainerNameRow = ContainerNameRow;