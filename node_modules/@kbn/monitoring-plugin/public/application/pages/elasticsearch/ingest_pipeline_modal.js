"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ingestPipelineTabOnClick = exports.IngestPipelineModal = void 0;
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/kibana-react-plugin/public");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const INGEST_PIPELINE_DASHBOARD_ID = 'elasticsearch-metrics-ingest-pipelines';

/**
 * If the ingest pipeline dashboard is installed, navigate to it. Otherwise, prompt the user to install the package
 * first, then navigate. If user does not have permission to install packages, show a message.
 * @param services
 * @returns
 */
const ingestPipelineTabOnClick = async services => {
  var _services$fleet, _response$data, _response$data$items;
  const response = await ((_services$fleet = services.fleet) === null || _services$fleet === void 0 ? void 0 : _services$fleet.hooks.epm.getBulkAssets({
    assetIds: [{
      id: INGEST_PIPELINE_DASHBOARD_ID,
      type: 'dashboard'
    }]
  }));
  const dashboardFound = (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$items = _response$data.items) === null || _response$data$items === void 0 ? void 0 : _response$data$items.length) && response.data.items.some(item => item.id === INGEST_PIPELINE_DASHBOARD_ID);
  const navigateToDashboard = () => services.dashboard.locator.navigate({
    dashboardId: INGEST_PIPELINE_DASHBOARD_ID
  });
  if (!dashboardFound) {
    var _services$fleet2, _services$theme;
    const installPackage = () => services.http.post('/api/fleet/epm/packages/elasticsearch', {
      headers: {
        'Elastic-Api-Version': '2023-10-31'
      }
    });
    const ref = services.overlays.openModal((0, _public.toMountPoint)( /*#__PURE__*/_react.default.createElement(IngestPipelineModal, {
      installPackage: installPackage,
      navigateToDashboard: navigateToDashboard,
      canInstallPackages: !!((_services$fleet2 = services.fleet) !== null && _services$fleet2 !== void 0 && _services$fleet2.authz.integrations.installPackages),
      closeModal: () => ref.close()
    }), {
      theme$: (_services$theme = services.theme) === null || _services$theme === void 0 ? void 0 : _services$theme.theme$
    }));
    return await ref.onClose;
  } else {
    return navigateToDashboard();
  }
};

/**
 * Modal to prompt the user to either install the Elasticsearch integration or contact an admin.
 */
exports.ingestPipelineTabOnClick = ingestPipelineTabOnClick;
const IngestPipelineModal = ({
  canInstallPackages,
  closeModal,
  installPackage,
  navigateToDashboard
}) => {
  const [installing, setInstalling] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)();
  if (!canInstallPackages) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiConfirmModal, {
      title: _i18n.i18n.translate('xpack.monitoring.esNavigation.ingestPipelineModal.noPermissionToInstallPackage.packageRequiredTitle', {
        defaultMessage: 'Elasticsearch integration is required'
      }),
      confirmButtonText: _i18n.i18n.translate('xpack.monitoring.esNavigation.ingestPipelineModal.noPermissionToInstallPackage.confirmButtonText', {
        defaultMessage: 'OK'
      }),
      onCancel: closeModal,
      onConfirm: closeModal
    }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.monitoring.esNavigation.ingestPipelineModal.noPermissionToInstallPackage.descriptionText",
      defaultMessage: "Viewing Ingest pipeline metrics requires installing the Elasticsearch integration. You must ask your administrator to install it."
    })));
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiConfirmModal, {
    title: _i18n.i18n.translate('xpack.monitoring.esNavigation.ingestPipelineModal.installPromptTitle', {
      defaultMessage: 'Install Elasticsearch integration?'
    }),
    confirmButtonText: _i18n.i18n.translate('xpack.monitoring.esNavigation.ingestPipelineModal.installButtonText', {
      defaultMessage: 'Install'
    }),
    cancelButtonText: _i18n.i18n.translate('xpack.monitoring.esNavigation.ingestPipelineModal.cancelButtonText', {
      defaultMessage: 'Cancel'
    }),
    confirmButtonDisabled: installing,
    onCancel: closeModal,
    onConfirm: async () => {
      setInstalling(true);
      try {
        await installPackage();
        closeModal();
        navigateToDashboard();
      } catch (e) {
        var _e$body;
        setError(((_e$body = e.body) === null || _e$body === void 0 ? void 0 : _e$body.error) || e.message);
        setInstalling(false);
      }
    }
  }, error && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.monitoring.esNavigation.ingestPipelineModal.errorCalloutText",
      defaultMessage: "Could not install the package due to an error: {error}",
      values: {
        error
      }
    }),
    color: "danger",
    iconType: "warning"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null)), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.monitoring.esNavigation.ingestPipelineModal.installPromptDescriptionText",
    defaultMessage: "Viewing Ingest pipeline metrics requires installing the Elasticsearch integration. Do you want to install it now?"
  })));
};
exports.IngestPipelineModal = IngestPipelineModal;