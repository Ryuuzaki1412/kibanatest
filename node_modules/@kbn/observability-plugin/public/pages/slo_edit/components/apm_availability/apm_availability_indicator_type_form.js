"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApmAvailabilityIndicatorTypeForm = ApmAvailabilityIndicatorTypeForm;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _common = require("@kbn/slo-schema/src/schema/common");
var _react = _interopRequireWildcard(require("react"));
var _reactHookForm = require("react-hook-form");
var _use_fetch_apm_indices = require("../../../../hooks/slo/use_fetch_apm_indices");
var _use_fetch_index_pattern_fields = require("../../../../hooks/slo/use_fetch_index_pattern_fields");
var _field_selector = require("../apm_common/field_selector");
var _data_preview_chart = require("../common/data_preview_chart");
var _index_field_selector = require("../common/index_field_selector");
var _query_builder = require("../common/query_builder");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function ApmAvailabilityIndicatorTypeForm() {
  const {
    watch,
    setValue
  } = (0, _reactHookForm.useFormContext)();
  const {
    data: apmIndex
  } = (0, _use_fetch_apm_indices.useFetchApmIndex)();
  (0, _react.useEffect)(() => {
    if (apmIndex !== '') {
      setValue('indicator.params.index', apmIndex);
    }
  }, [setValue, apmIndex]);
  const {
    isLoading: isIndexFieldsLoading,
    data: indexFields = []
  } = (0, _use_fetch_index_pattern_fields.useFetchIndexPatternFields)(apmIndex);
  const groupByFields = indexFields.filter(field => field.aggregatable);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    allowAllOption: false,
    label: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.serviceName', {
      defaultMessage: 'Service name'
    }),
    placeholder: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.serviceName.placeholder', {
      defaultMessage: 'Select the APM service'
    }),
    fieldName: "service.name",
    name: "indicator.params.service",
    dataTestSubj: "apmAvailabilityServiceSelector",
    tooltip: /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apm.serviceName.tooltip', {
        defaultMessage: 'This is the APM service monitored by this SLO.'
      }),
      position: "top"
    })
  }), /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    label: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.serviceEnvironment', {
      defaultMessage: 'Service environment'
    }),
    placeholder: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.serviceEnvironment.placeholder', {
      defaultMessage: 'Select the environment'
    }),
    fieldName: "service.environment",
    name: "indicator.params.environment",
    dataTestSubj: "apmAvailabilityEnvironmentSelector"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    label: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.transactionType', {
      defaultMessage: 'Transaction type'
    }),
    placeholder: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.transactionType.placeholder', {
      defaultMessage: 'Select the transaction type'
    }),
    fieldName: "transaction.type",
    name: "indicator.params.transactionType",
    dataTestSubj: "apmAvailabilityTransactionTypeSelector"
  }), /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    label: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.transactionName', {
      defaultMessage: 'Transaction name'
    }),
    placeholder: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmAvailability.transactionName.placeholder', {
      defaultMessage: 'Select the transaction name'
    }),
    fieldName: "transaction.name",
    name: "indicator.params.transactionName",
    dataTestSubj: "apmAvailabilityTransactionNameSelector"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_query_builder.QueryBuilder, {
    dataTestSubj: "apmLatencyFilterInput",
    indexPatternString: watch('indicator.params.index'),
    label: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmLatency.filter', {
      defaultMessage: 'Query filter'
    }),
    name: "indicator.params.filter",
    placeholder: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apmLatency.filter.placeholder', {
      defaultMessage: 'Custom filter to apply on the index'
    }),
    tooltip: /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.observability.slo.sloEdit.apm.filter.tooltip', {
        defaultMessage: 'This KQL query is used to filter the APM metrics on some relevant criteria for this SLO.'
      }),
      position: "top"
    })
  }))), /*#__PURE__*/_react.default.createElement(_index_field_selector.IndexFieldSelector, {
    indexFields: groupByFields,
    name: "groupBy",
    defaultValue: _common.ALL_VALUE,
    label: /*#__PURE__*/_react.default.createElement("span", null, _i18n.i18n.translate('xpack.observability.slo.sloEdit.groupBy.label', {
      defaultMessage: 'Group by'
    }), ' ', /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.observability.slo.sloEdit.groupBy.tooltip', {
        defaultMessage: 'Create individual SLOs for each value of the selected field.'
      }),
      position: "top"
    })),
    placeholder: _i18n.i18n.translate('xpack.observability.slo.sloEdit.groupBy.placeholder', {
      defaultMessage: 'Select an optional field to group by'
    }),
    isLoading: !!apmIndex && isIndexFieldsLoading,
    isDisabled: !apmIndex
  }), /*#__PURE__*/_react.default.createElement(_data_preview_chart.DataPreviewChart, null));
}