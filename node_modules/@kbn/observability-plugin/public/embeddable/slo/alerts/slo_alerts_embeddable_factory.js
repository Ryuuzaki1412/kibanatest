"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SloAlertsEmbeddableFactoryDefinition = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/embeddable-plugin/public");
var _slo_embeddable_factory = require("../overview/slo_embeddable_factory");
var _slo_alerts_embeddable = require("./slo_alerts_embeddable");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


class SloAlertsEmbeddableFactoryDefinition {
  constructor(getStartServices, kibanaVersion) {
    (0, _defineProperty2.default)(this, "type", _slo_alerts_embeddable.SLO_ALERTS_EMBEDDABLE);
    (0, _defineProperty2.default)(this, "grouping", _slo_embeddable_factory.COMMON_SLO_GROUPING);
    this.getStartServices = getStartServices;
    this.kibanaVersion = kibanaVersion;
  }
  async isEditable() {
    return true;
  }
  async getExplicitInput() {
    const [coreStart, pluginStart] = await this.getStartServices();
    try {
      const {
        resolveEmbeddableSloUserInput
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('./handle_explicit_input')));
      return await resolveEmbeddableSloUserInput(coreStart, pluginStart);
    } catch (e) {
      return Promise.reject();
    }
  }
  async create(initialInput, parent) {
    try {
      const [coreStart, pluginsStart] = await this.getStartServices();
      const deps = {
        ...coreStart,
        ...pluginsStart
      };
      return new _slo_alerts_embeddable.SLOAlertsEmbeddable(deps, initialInput, this.kibanaVersion, parent);
    } catch (e) {
      return new _public.ErrorEmbeddable(e, initialInput, parent);
    }
  }
  getDescription() {
    return _i18n.i18n.translate('xpack.observability.sloAlertsEmbeddable.description', {
      defaultMessage: 'Get an overview of your SLO alerts'
    });
  }
  getDisplayName() {
    return _i18n.i18n.translate('xpack.observability.sloAlertsEmbeddable.displayName', {
      defaultMessage: 'SLO Alerts'
    });
  }
  getIconType() {
    return 'alert';
  }
}
exports.SloAlertsEmbeddableFactoryDefinition = SloAlertsEmbeddableFactoryDefinition;