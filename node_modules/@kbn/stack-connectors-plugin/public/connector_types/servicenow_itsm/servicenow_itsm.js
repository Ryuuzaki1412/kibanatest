"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SERVICENOW_ITSM_TITLE = exports.SERVICENOW_ITSM_DESC = void 0;
exports.getServiceNowITSMConnectorType = getServiceNowITSMConnectorType;
var _react = require("react");
var _i18n = require("@kbn/i18n");
var _helpers = require("../lib/servicenow/helpers");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const SERVICENOW_ITSM_DESC = _i18n.i18n.translate('xpack.stackConnectors.components.serviceNowITSM.selectMessageText', {
  defaultMessage: 'Create an incident in ServiceNow ITSM.'
});
exports.SERVICENOW_ITSM_DESC = SERVICENOW_ITSM_DESC;
const SERVICENOW_ITSM_TITLE = _i18n.i18n.translate('xpack.stackConnectors.components.serviceNowITSM.connectorTypeTitle', {
  defaultMessage: 'ServiceNow ITSM'
});
exports.SERVICENOW_ITSM_TITLE = SERVICENOW_ITSM_TITLE;
function getServiceNowITSMConnectorType() {
  return {
    id: '.servicenow',
    iconClass: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./logo')))),
    selectMessage: SERVICENOW_ITSM_DESC,
    actionTypeTitle: SERVICENOW_ITSM_TITLE,
    actionConnectorFields: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('../lib/servicenow/servicenow_connectors')))),
    validateParams: async actionParams => {
      var _actionParams$subActi, _actionParams$subActi2, _actionParams$subActi3, _actionParams$subActi4;
      const translations = await Promise.resolve().then(() => _interopRequireWildcard(require('../lib/servicenow/translations')));
      const errors = {
        'subActionParams.incident.short_description': new Array(),
        'subActionParams.incident.correlation_id': new Array()
      };
      const validationResult = {
        errors
      };
      if (actionParams.subActionParams && actionParams.subActionParams.incident && actionParams.subAction !== 'closeIncident' && !((_actionParams$subActi = actionParams.subActionParams.incident.short_description) !== null && _actionParams$subActi !== void 0 && _actionParams$subActi.length)) {
        errors['subActionParams.incident.short_description'].push(translations.TITLE_REQUIRED);
      }
      if (actionParams.subAction === 'closeIncident' && !(actionParams !== null && actionParams !== void 0 && (_actionParams$subActi2 = actionParams.subActionParams) !== null && _actionParams$subActi2 !== void 0 && (_actionParams$subActi3 = _actionParams$subActi2.incident) !== null && _actionParams$subActi3 !== void 0 && (_actionParams$subActi4 = _actionParams$subActi3.correlation_id) !== null && _actionParams$subActi4 !== void 0 && _actionParams$subActi4.length)) {
        errors['subActionParams.incident.correlation_id'].push(translations.CORRELATION_ID_REQUIRED);
      }
      return validationResult;
    },
    actionParamsFields: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./servicenow_itsm_params')))),
    customConnectorSelectItem: {
      getText: _helpers.getConnectorDescriptiveTitle,
      getComponent: _helpers.getSelectedConnectorIcon
    },
    defaultActionParams: {
      subAction: 'pushToService',
      subActionParams: {
        incident: {
          correlation_id: _helpers.DEFAULT_CORRELATION_ID
        },
        comments: []
      }
    },
    defaultRecoveredActionParams: {
      subAction: 'closeIncident',
      subActionParams: {
        incident: {
          correlation_id: _helpers.DEFAULT_CORRELATION_ID
        }
      }
    }
  };
}