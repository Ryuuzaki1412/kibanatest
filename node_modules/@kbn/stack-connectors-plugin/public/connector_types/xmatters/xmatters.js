"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectorType = getConnectorType;
var _react = require("react");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/triggers-actions-ui-plugin/public");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */
function getConnectorType() {
  return {
    id: '.xmatters',
    iconClass: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./logo')))),
    selectMessage: _i18n.i18n.translate('xpack.stackConnectors.components.xmatters.selectMessageText', {
      defaultMessage: 'Trigger an xMatters workflow.'
    }),
    actionTypeTitle: _i18n.i18n.translate('xpack.stackConnectors.components.xmatters.connectorTypeTitle', {
      defaultMessage: 'xMatters data'
    }),
    validateParams: async actionParams => {
      const errors = {
        alertActionGroupName: new Array(),
        signalId: new Array()
      };
      const validationResult = {
        errors
      };
      validationResult.errors = errors;
      return validationResult;
    },
    actionConnectorFields: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./xmatters_connectors')))),
    actionParamsFields: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./xmatters_params')))),
    defaultActionParams: {
      alertActionGroupName: `{{${_public.AlertProvidedActionVariables.alertActionGroupName}}}`,
      signalId: `{{${_public.AlertProvidedActionVariables.ruleId}}}:{{${_public.AlertProvidedActionVariables.alertId}}}`,
      ruleName: `{{${_public.AlertProvidedActionVariables.ruleName}}}`,
      date: `{{${_public.AlertProvidedActionVariables.date}}}`,
      spaceId: `{{${_public.AlertProvidedActionVariables.ruleSpaceId}}}`
    }
  };
}