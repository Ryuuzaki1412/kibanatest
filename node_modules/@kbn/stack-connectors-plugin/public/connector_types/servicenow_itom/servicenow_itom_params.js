"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _public = require("@kbn/triggers-actions-ui-plugin/public");
var i18n = _interopRequireWildcard(require("../lib/servicenow/translations"));
var _use_choices = require("../lib/servicenow/use_choices");
var _helpers = require("../lib/servicenow/helpers");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const choicesFields = ['severity'];
const fields = [{
  label: i18n.SOURCE,
  fieldKey: 'source'
}, {
  label: i18n.NODE,
  fieldKey: 'node'
}, {
  label: i18n.TYPE,
  fieldKey: 'type'
}, {
  label: i18n.RESOURCE,
  fieldKey: 'resource'
}, {
  label: i18n.METRIC_NAME,
  fieldKey: 'metric_name'
}, {
  label: i18n.EVENT_CLASS,
  fieldKey: 'event_class'
}, {
  label: i18n.MESSAGE_KEY,
  fieldKey: 'message_key'
}];
const additionalInformation = JSON.stringify({
  alert: {
    id: '{{alert.id}}',
    actionGroup: '{{alert.actionGroup}}',
    actionSubgroup: '{{alert.actionSubgroup}}',
    actionGroupName: '{{alert.actionGroupName}}'
  },
  rule: {
    id: '{{rule.id}}',
    name: '{{rule.name}}',
    type: '{{rule.type}}'
  },
  date: '{{date}}'
});
const ServiceNowITOMParamsFields = ({
  actionConnector,
  actionParams,
  editAction,
  index,
  messageVariables,
  errors
}) => {
  var _actionConnector$id;
  const params = (0, _react.useMemo)(() => {
    var _actionParams$subActi;
    return (_actionParams$subActi = actionParams.subActionParams) !== null && _actionParams$subActi !== void 0 ? _actionParams$subActi : {};
  }, [actionParams.subActionParams]);
  const {
    description,
    severity
  } = params;
  const {
    http,
    notifications: {
      toasts
    }
  } = (0, _public.useKibana)().services;
  const actionConnectorRef = (0, _react.useRef)((_actionConnector$id = actionConnector === null || actionConnector === void 0 ? void 0 : actionConnector.id) !== null && _actionConnector$id !== void 0 ? _actionConnector$id : '');
  const {
    choices,
    isLoading: isLoadingChoices
  } = (0, _use_choices.useChoices)({
    http,
    toastNotifications: toasts,
    actionConnector,
    fields: choicesFields
  });
  const severityOptions = (0, _react.useMemo)(() => (0, _helpers.choicesToEuiOptions)(choices.severity), [choices.severity]);
  const editSubActionProperty = (0, _react.useCallback)((key, value) => {
    editAction('subActionParams', {
      ...params,
      [key]: value
    }, index);
  }, [editAction, index, params]);
  (0, _react.useEffect)(() => {
    if (actionConnector != null && actionConnectorRef.current !== actionConnector.id) {
      actionConnectorRef.current = actionConnector.id;
      editAction('subActionParams', {
        additional_info: additionalInformation,
        message_key: '{{rule.id}}:{{alert.id}}'
      }, index);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [actionConnector]);
  (0, _react.useEffect)(() => {
    if (!actionParams.subAction) {
      editAction('subAction', 'addEvent', index);
    }
    if (!actionParams.subActionParams) {
      editAction('subActionParams', {
        additional_info: additionalInformation,
        message_key: '{{rule.id}}:{{alert.id}}'
      }, index);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [actionParams]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "s"
  }, /*#__PURE__*/_react.default.createElement("h3", null, i18n.EVENT)), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), fields.map(field => {
    var _params$field$fieldKe;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: field.fieldKey
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
      fullWidth: true,
      label: field.label
    }, /*#__PURE__*/_react.default.createElement(_public.TextFieldWithMessageVariables, {
      index: index,
      editAction: editSubActionProperty,
      messageVariables: messageVariables,
      paramsProperty: field.fieldKey,
      inputTargetValue: (_params$field$fieldKe = params[field.fieldKey]) !== null && _params$field$fieldKe !== void 0 ? _params$field$fieldKe : undefined
    })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
      size: "m"
    }));
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    fullWidth: true,
    label: i18n.SEVERITY_LABEL,
    labelAppend: /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
      size: "xs",
      color: "subdued"
    }, i18n.REQUIRED_LABEL),
    error: errors.severity,
    isInvalid: (0, _helpers.isFieldInvalid)(severity, errors.severity)
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
    fullWidth: true,
    hasNoInitialSelection: true,
    "data-test-subj": "severitySelect",
    isLoading: isLoadingChoices,
    disabled: isLoadingChoices,
    options: severityOptions,
    value: severity !== null && severity !== void 0 ? severity : '',
    onChange: e => editSubActionProperty('severity', e.target.value),
    isInvalid: (0, _helpers.isFieldInvalid)(severity, errors.severity)
  })), /*#__PURE__*/_react.default.createElement(_public.TextAreaWithMessageVariables, {
    index: index,
    editAction: editSubActionProperty,
    messageVariables: messageVariables,
    paramsProperty: 'description',
    inputTargetValue: description !== null && description !== void 0 ? description : undefined,
    label: i18n.DESCRIPTION_LABEL
  }));
};

// eslint-disable-next-line import/no-default-export
exports.default = ServiceNowITOMParamsFields;
module.exports = exports.default;