"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERIFICATION_MODE_LABEL = exports.USERNAME_REQUIRED = exports.USERNAME_LABEL = exports.URL_LABEL = exports.URL_INVALID = exports.REMOVE_ITEM_LABEL = exports.PFX_REQUIRED = exports.PASSWORD_REQUIRED = exports.PASSWORD_LABEL = exports.PASSPHRASE_LABEL = exports.METHOD_REQUIRED = exports.METHOD_LABEL = exports.KEY_REQUIRED = exports.HEADER_VALUE_LABEL = exports.HEADER_KEY_LABEL = exports.HAS_AUTH_LABEL = exports.EDIT_CA_CALLOUT = exports.CRT_REQUIRED = exports.CERT_TYPE_PFX = exports.CERT_TYPE_CRT_KEY = exports.CA_REQUIRED = exports.BODY_REQUIRED = exports.AUTHENTICATION_SSL = exports.AUTHENTICATION_NONE = exports.AUTHENTICATION_BASIC = exports.ADD_HEADER_BTN = exports.ADD_HEADERS_LABEL = exports.ADD_CA_LABEL = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const METHOD_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.methodTextFieldLabel', {
  defaultMessage: 'Method'
});
exports.METHOD_LABEL = METHOD_LABEL;
const HAS_AUTH_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.hasAuthSwitchLabel', {
  defaultMessage: 'Require authentication for this webhook'
});
exports.HAS_AUTH_LABEL = HAS_AUTH_LABEL;
const URL_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.urlTextFieldLabel', {
  defaultMessage: 'URL'
});
exports.URL_LABEL = URL_LABEL;
const USERNAME_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.userTextFieldLabel', {
  defaultMessage: 'Username'
});
exports.USERNAME_LABEL = USERNAME_LABEL;
const PASSWORD_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.passwordTextFieldLabel', {
  defaultMessage: 'Password'
});
exports.PASSWORD_LABEL = PASSWORD_LABEL;
const PASSPHRASE_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.passphraseTextFieldLabel', {
  defaultMessage: 'Passphrase'
});
exports.PASSPHRASE_LABEL = PASSPHRASE_LABEL;
const ADD_HEADERS_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.viewHeadersSwitch', {
  defaultMessage: 'Add HTTP header'
});
exports.ADD_HEADERS_LABEL = ADD_HEADERS_LABEL;
const HEADER_KEY_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.headerKeyTextFieldLabel', {
  defaultMessage: 'Key'
});
exports.HEADER_KEY_LABEL = HEADER_KEY_LABEL;
const REMOVE_ITEM_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.removeHeaderIconLabel', {
  defaultMessage: 'Key'
});
exports.REMOVE_ITEM_LABEL = REMOVE_ITEM_LABEL;
const ADD_HEADER_BTN = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.addHeaderButtonLabel', {
  defaultMessage: 'Add header'
});
exports.ADD_HEADER_BTN = ADD_HEADER_BTN;
const HEADER_VALUE_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.headerValueTextFieldLabel', {
  defaultMessage: 'Value'
});
exports.HEADER_VALUE_LABEL = HEADER_VALUE_LABEL;
const URL_INVALID = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.invalidUrlTextField', {
  defaultMessage: 'URL is invalid.'
});
exports.URL_INVALID = URL_INVALID;
const METHOD_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredMethodText', {
  defaultMessage: 'Method is required.'
});
exports.METHOD_REQUIRED = METHOD_REQUIRED;
const USERNAME_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredAuthUserNameText', {
  defaultMessage: 'Username is required.'
});
exports.USERNAME_REQUIRED = USERNAME_REQUIRED;
const BODY_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredWebhookBodyText', {
  defaultMessage: 'Body is required.'
});
exports.BODY_REQUIRED = BODY_REQUIRED;
const PASSWORD_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredWebhookPasswordText', {
  defaultMessage: 'Password is required.'
});
exports.PASSWORD_REQUIRED = PASSWORD_REQUIRED;
const AUTHENTICATION_NONE = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.authenticationMethodNoneLabel', {
  defaultMessage: 'None'
});
exports.AUTHENTICATION_NONE = AUTHENTICATION_NONE;
const AUTHENTICATION_BASIC = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.authenticationMethodBasicLabel', {
  defaultMessage: 'Basic authentication'
});
exports.AUTHENTICATION_BASIC = AUTHENTICATION_BASIC;
const AUTHENTICATION_SSL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.authenticationMethodSSLLabel', {
  defaultMessage: 'SSL authentication'
});
exports.AUTHENTICATION_SSL = AUTHENTICATION_SSL;
const CERT_TYPE_CRT_KEY = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.certTypeCrtKeyLabel', {
  defaultMessage: 'CRT and KEY file'
});
exports.CERT_TYPE_CRT_KEY = CERT_TYPE_CRT_KEY;
const CERT_TYPE_PFX = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.certTypePfxLabel', {
  defaultMessage: 'PFX file'
});
exports.CERT_TYPE_PFX = CERT_TYPE_PFX;
const CRT_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredWebhookCRTText', {
  defaultMessage: 'CRT file is required.'
});
exports.CRT_REQUIRED = CRT_REQUIRED;
const KEY_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredWebhookKEYText', {
  defaultMessage: 'KEY file is required.'
});
exports.KEY_REQUIRED = KEY_REQUIRED;
const PFX_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredWebhookPFXText', {
  defaultMessage: 'PFX file is required.'
});
exports.PFX_REQUIRED = PFX_REQUIRED;
const CA_REQUIRED = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.error.requiredWebhookCAText', {
  defaultMessage: 'CA file is required.'
});
exports.CA_REQUIRED = CA_REQUIRED;
const ADD_CA_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.viewCertificateAuthoritySwitch', {
  defaultMessage: 'Add certificate authority'
});
exports.ADD_CA_LABEL = ADD_CA_LABEL;
const VERIFICATION_MODE_LABEL = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.verificationModeFieldLabel', {
  defaultMessage: 'Verification mode'
});
exports.VERIFICATION_MODE_LABEL = VERIFICATION_MODE_LABEL;
const EDIT_CA_CALLOUT = _i18n.i18n.translate('xpack.stackConnectors.components.webhook.editCACallout', {
  defaultMessage: 'This webhook has an existing certificate authority file. Upload a new one to replace it.'
});
exports.EDIT_CA_CALLOUT = EDIT_CA_CALLOUT;