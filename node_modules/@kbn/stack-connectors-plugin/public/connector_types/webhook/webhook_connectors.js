"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _hook_form_lib = require("@kbn/es-ui-shared-plugin/static/forms/hook_form_lib");
var _components = require("@kbn/es-ui-shared-plugin/static/forms/components");
var _helpers = require("@kbn/es-ui-shared-plugin/static/forms/helpers");
var _constants = require("../../../common/webhook/constants");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const HTTP_VERBS = ['post', 'put'];
const {
  emptyField,
  urlField
} = _helpers.fieldValidators;
const VERIFICATION_MODE_DEFAULT = 'full';
const WebhookActionConnectorFields = ({
  readOnly
}) => {
  var _getFieldDefaultValue, _getFieldDefaultValue2;
  const {
    setFieldValue,
    getFieldDefaultValue
  } = (0, _hook_form_lib.useFormContext)();
  const [{
    config,
    __internal__
  }] = (0, _hook_form_lib.useFormData)({
    watch: ['config.hasAuth', 'config.authType', 'config.certType', 'config.verificationMode', '__internal__.hasHeaders', '__internal__.hasCA']
  });
  const hasHeadersDefaultValue = !!getFieldDefaultValue('config.headers');
  const authTypeDefaultValue = getFieldDefaultValue('config.hasAuth') === false ? null : (_getFieldDefaultValue = getFieldDefaultValue('config.authType')) !== null && _getFieldDefaultValue !== void 0 ? _getFieldDefaultValue : _constants.WebhookAuthType.Basic;
  const certTypeDefaultValue = (_getFieldDefaultValue2 = getFieldDefaultValue('config.certType')) !== null && _getFieldDefaultValue2 !== void 0 ? _getFieldDefaultValue2 : _constants.SSLCertType.CRT;
  const hasCADefaultValue = !!getFieldDefaultValue('config.ca') || getFieldDefaultValue('config.verificationMode') === 'none';
  const hasHeaders = __internal__ != null ? __internal__.hasHeaders : false;
  const hasCA = __internal__ != null ? __internal__.hasCA : false;
  const authType = config == null ? _constants.WebhookAuthType.Basic : config.authType;
  const certType = config == null ? _constants.SSLCertType.CRT : config.certType;
  const hasInitialCA = !!getFieldDefaultValue('config.ca');
  (0, _react.useEffect)(() => setFieldValue('config.hasAuth', Boolean(authType)), [authType, setFieldValue]);
  const basicAuthFields = /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "secrets.user",
    config: {
      label: i18n.USERNAME_LABEL,
      validations: [{
        validator: emptyField(i18n.USERNAME_REQUIRED)
      }]
    },
    component: _components.Field,
    componentProps: {
      euiFieldProps: {
        readOnly,
        'data-test-subj': 'webhookUserInput',
        fullWidth: true
      }
    }
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "secrets.password",
    config: {
      label: i18n.PASSWORD_LABEL,
      validations: [{
        validator: emptyField(i18n.PASSWORD_REQUIRED)
      }]
    },
    component: _components.PasswordField,
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookPasswordInput',
        readOnly
      }
    }
  })));
  const sslCertAuthFields = /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "secrets.password",
    config: {
      label: i18n.PASSPHRASE_LABEL
    },
    component: _components.PasswordField,
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookSSLPassphraseInput',
        readOnly
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.certType",
    defaultValue: certTypeDefaultValue,
    component: ({
      field
    }) => /*#__PURE__*/_react.default.createElement(_eui.EuiTabs, {
      size: "s"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiTab, {
      onClick: () => field.setValue(_constants.SSLCertType.CRT),
      isSelected: field.value === _constants.SSLCertType.CRT
    }, i18n.CERT_TYPE_CRT_KEY), /*#__PURE__*/_react.default.createElement(_eui.EuiTab, {
      onClick: () => field.setValue(_constants.SSLCertType.PFX),
      isSelected: field.value === _constants.SSLCertType.PFX
    }, i18n.CERT_TYPE_PFX))
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), certType === _constants.SSLCertType.CRT && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "secrets.crt",
    config: {
      label: 'CRT file',
      validations: [{
        validator: emptyField(i18n.CRT_REQUIRED)
      }]
    },
    component: _components.FilePickerField,
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookSSLCRTInput',
        display: 'default',
        accept: '.crt,.cert,.cer,.pem'
      }
    }
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "secrets.key",
    config: {
      label: 'KEY file',
      validations: [{
        validator: emptyField(i18n.KEY_REQUIRED)
      }]
    },
    component: _components.FilePickerField,
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookSSLKEYInput',
        display: 'default',
        accept: '.key,.pem'
      }
    }
  }))), certType === _constants.SSLCertType.PFX && /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "secrets.pfx",
    config: {
      label: 'PFX file',
      validations: [{
        validator: emptyField(i18n.PFX_REQUIRED)
      }]
    },
    component: _components.FilePickerField,
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookSSLPFXInput',
        display: 'default',
        accept: '.pfx,.p12'
      }
    }
  })));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.hasAuth",
    component: _components.HiddenField
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.method",
    component: _components.SelectField,
    config: {
      label: i18n.METHOD_LABEL,
      defaultValue: 'post',
      validations: [{
        validator: emptyField(i18n.METHOD_REQUIRED)
      }]
    },
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookMethodSelect',
        options: HTTP_VERBS.map(verb => ({
          text: verb.toUpperCase(),
          value: verb
        })),
        fullWidth: true,
        readOnly
      }
    }
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.url",
    config: {
      label: i18n.URL_LABEL,
      validations: [{
        validator: urlField(i18n.URL_INVALID)
      }]
    },
    component: _components.Field,
    componentProps: {
      euiFieldProps: {
        readOnly,
        'data-test-subj': 'webhookUrlText',
        fullWidth: true
      }
    }
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "xxs"
  }, /*#__PURE__*/_react.default.createElement("h4", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.stackConnectors.components.webhook.authenticationLabel",
    defaultMessage: "Authentication"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.authType",
    defaultValue: authTypeDefaultValue,
    component: _components.CardRadioGroupField,
    componentProps: {
      options: [{
        value: null,
        label: i18n.AUTHENTICATION_NONE
      }, {
        value: _constants.WebhookAuthType.Basic,
        label: i18n.AUTHENTICATION_BASIC,
        children: authType === _constants.WebhookAuthType.Basic && basicAuthFields
      }, {
        value: _constants.WebhookAuthType.SSL,
        label: i18n.AUTHENTICATION_SSL,
        children: authType === _constants.WebhookAuthType.SSL && sslCertAuthFields
      }]
    }
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "__internal__.hasHeaders",
    component: _components.ToggleField,
    config: {
      defaultValue: hasHeadersDefaultValue,
      label: i18n.ADD_HEADERS_LABEL
    },
    componentProps: {
      euiFieldProps: {
        disabled: readOnly,
        'data-test-subj': 'webhookViewHeadersSwitch'
      }
    }
  }), hasHeaders ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseArray, {
    path: "config.headers",
    initialNumberOfItems: 1
  }, ({
    items,
    addItem,
    removeItem
  }) => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, items.map(item => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      key: item.id
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
      path: `${item.path}.key`,
      config: {
        label: i18n.HEADER_KEY_LABEL
      },
      component: _components.TextField
      // This is needed because when you delete
      // a row and add a new one, the stale values will appear
      ,
      readDefaultValueOnForm: !item.isNew,
      componentProps: {
        euiFieldProps: {
          readOnly
        }
      }
    })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
      path: `${item.path}.value`,
      config: {
        label: i18n.HEADER_VALUE_LABEL
      },
      component: _components.TextField,
      readDefaultValueOnForm: !item.isNew,
      componentProps: {
        euiFieldProps: {
          readOnly
        }
      }
    })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
      color: "danger",
      onClick: () => removeItem(item.id),
      iconType: "minusInCircle",
      "aria-label": i18n.REMOVE_ITEM_LABEL,
      style: {
        marginTop: '28px'
      }
    })))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
      size: "m"
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
      iconType: "plusInCircle",
      onClick: addItem
    }, i18n.ADD_HEADER_BTN), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null));
  })) : null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "__internal__.hasCA",
    component: _components.ToggleField,
    config: {
      defaultValue: hasCADefaultValue,
      label: i18n.ADD_CA_LABEL
    },
    componentProps: {
      euiFieldProps: {
        disabled: readOnly,
        'data-test-subj': 'webhookViewCASwitch'
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), hasCA && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.ca",
    config: {
      label: 'CA file',
      validations: [{
        validator: (config === null || config === void 0 ? void 0 : config.verificationMode) !== 'none' ? emptyField(i18n.CA_REQUIRED) : () => {}
      }]
    },
    component: _components.FilePickerField,
    componentProps: {
      euiFieldProps: {
        display: 'default',
        'data-test-subj': 'webhookCAInput',
        accept: '.ca,.pem'
      }
    }
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_hook_form_lib.UseField, {
    path: "config.verificationMode",
    component: _components.SelectField,
    config: {
      label: i18n.VERIFICATION_MODE_LABEL,
      defaultValue: VERIFICATION_MODE_DEFAULT,
      validations: [{
        validator: emptyField(i18n.VERIFICATION_MODE_LABEL)
      }]
    },
    componentProps: {
      euiFieldProps: {
        'data-test-subj': 'webhookVerificationModeSelect',
        options: [{
          text: 'None',
          value: 'none'
        }, {
          text: 'Certificate',
          value: 'certificate'
        }, {
          text: 'Full',
          value: 'full'
        }],
        fullWidth: true,
        readOnly
      }
    }
  }))), hasInitialCA && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    size: "s",
    iconType: "document",
    title: i18n.EDIT_CA_CALLOUT
  }))));
};

// eslint-disable-next-line import/no-default-export
exports.default = WebhookActionConnectorFields;
module.exports = exports.default;