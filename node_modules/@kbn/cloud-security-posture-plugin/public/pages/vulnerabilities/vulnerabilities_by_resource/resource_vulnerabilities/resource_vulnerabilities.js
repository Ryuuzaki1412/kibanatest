"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResourceVulnerabilities = void 0;
var _eui = require("@elastic/eui");
var _css = require("@emotion/css");
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _reactRouterDom = require("react-router-dom");
var _constants = require("../../../../common/constants");
var _use_cloud_posture_table = require("../../../../common/hooks/use_cloud_posture_table");
var _use_latest_vulnerabilities = require("../../hooks/use_latest_vulnerabilities");
var _error_callout = require("../../../configurations/layout/error_callout");
var _findings_search_bar = require("../../../configurations/layout/findings_search_bar");
var _vulnerability_badges = require("../../../../components/vulnerability_badges");
var _empty_state = require("../../../../components/empty_state");
var _vulnerability_finding_flyout = require("../../vulnerabilities_finding_flyout/vulnerability_finding_flyout");
var _get_limit_properties = require("../../../../common/utils/get_limit_properties");
var _findings_layout = require("../../../configurations/layout/findings_layout");
var _vulnerabilities_table_columns = require("../../vulnerabilities_table_columns");
var _cloud_posture_page = require("../../../../components/cloud_posture_page");
var _translations = require("../../translations");
var _custom_sort_script = require("../../utils/custom_sort_script");
var _use_styles = require("../../hooks/use_styles");
var _constants2 = require("../../../../common/navigation/constants");
var _csp_inline_description_list = require("../../../../components/csp_inline_description_list");
var _get_vulnerabilities_grid_cell_actions = require("../../utils/get_vulnerabilities_grid_cell_actions");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getDefaultQuery = ({
  query,
  filters
}) => ({
  query,
  filters,
  sort: [{
    id: _vulnerabilities_table_columns.vulnerabilitiesColumns.severity,
    direction: 'desc'
  }, {
    id: _vulnerabilities_table_columns.vulnerabilitiesColumns.cvss,
    direction: 'desc'
  }],
  pageIndex: 0
});
const ResourceVulnerabilitiesDataGrid = ({
  dataView,
  data,
  isFetching,
  pageIndex,
  sort,
  pageSize,
  onChangeItemsPerPage,
  onChangePage,
  onSort,
  urlQuery,
  setUrlQuery,
  onResetFilters
}) => {
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  const styles = (0, _use_styles.useStyles)();
  const [showHighlight, setHighlight] = (0, _react.useState)(false);
  const onSortHandler = (0, _react.useCallback)(newSort => {
    onSort(newSort);
    if (newSort.length !== sort.length) {
      setHighlight(true);
      setTimeout(() => {
        setHighlight(false);
      }, 2000);
    }
  }, [onSort, sort]);
  const invalidIndex = -1;
  const selectedVulnerability = (0, _react.useMemo)(() => {
    return data === null || data === void 0 ? void 0 : data.page[urlQuery.vulnerabilityIndex];
  }, [data === null || data === void 0 ? void 0 : data.page, urlQuery.vulnerabilityIndex]);
  const onCloseFlyout = () => {
    setUrlQuery({
      vulnerabilityIndex: invalidIndex
    });
  };
  const onOpenFlyout = (0, _react.useCallback)(vulnerabilityRow => {
    const vulnerabilityIndex = data === null || data === void 0 ? void 0 : data.page.findIndex(vulnerabilityRecord => {
      var _vulnerabilityRecord$, _vulnerabilityRow$vul, _vulnerabilityRecord$2, _vulnerabilityRow$res;
      return ((_vulnerabilityRecord$ = vulnerabilityRecord.vulnerability) === null || _vulnerabilityRecord$ === void 0 ? void 0 : _vulnerabilityRecord$.id) === ((_vulnerabilityRow$vul = vulnerabilityRow.vulnerability) === null || _vulnerabilityRow$vul === void 0 ? void 0 : _vulnerabilityRow$vul.id) && ((_vulnerabilityRecord$2 = vulnerabilityRecord.resource) === null || _vulnerabilityRecord$2 === void 0 ? void 0 : _vulnerabilityRecord$2.id) === ((_vulnerabilityRow$res = vulnerabilityRow.resource) === null || _vulnerabilityRow$res === void 0 ? void 0 : _vulnerabilityRow$res.id) && vulnerabilityRecord.package.name === vulnerabilityRow.package.name && vulnerabilityRecord.package.version === vulnerabilityRow.package.version;
    });
    setUrlQuery({
      vulnerabilityIndex
    });
  }, [setUrlQuery, data === null || data === void 0 ? void 0 : data.page]);
  const {
    isLastLimitedPage,
    limitedTotalItemCount
  } = (0, _get_limit_properties.useLimitProperties)({
    total: data === null || data === void 0 ? void 0 : data.total,
    pageIndex,
    pageSize
  });
  const columns = (0, _react.useMemo)(() => {
    if (!(data !== null && data !== void 0 && data.page)) {
      return [];
    }
    return (0, _get_vulnerabilities_grid_cell_actions.getVulnerabilitiesGridCellActions)({
      columnGridFn: _vulnerabilities_table_columns.getVulnerabilitiesColumnsGrid,
      columns: _vulnerabilities_table_columns.vulnerabilitiesColumns,
      dataView,
      pageSize,
      data: data.page,
      setUrlQuery,
      filters: urlQuery.filters
    }).filter(column => column.id !== _vulnerabilities_table_columns.vulnerabilitiesColumns.resourceName && column.id !== _vulnerabilities_table_columns.vulnerabilitiesColumns.resourceId);
  }, [data === null || data === void 0 ? void 0 : data.page, dataView, pageSize, setUrlQuery, urlQuery.filters]);
  const flyoutVulnerabilityIndex = urlQuery === null || urlQuery === void 0 ? void 0 : urlQuery.vulnerabilityIndex;
  const selectedVulnerabilityIndex = flyoutVulnerabilityIndex + pageIndex * pageSize;
  const renderCellValue = (0, _react.useMemo)(() => {
    const Cell = ({
      columnId,
      rowIndex,
      setCellProps
    }) => {
      var _vulnerabilityRow$vul2;
      const rowIndexFromPage = rowIndex > pageSize - 1 ? rowIndex % pageSize : rowIndex;
      const vulnerabilityRow = data === null || data === void 0 ? void 0 : data.page[rowIndexFromPage];
      (0, _react.useEffect)(() => {
        if (selectedVulnerabilityIndex === rowIndex) {
          setCellProps({
            style: {
              backgroundColor: euiTheme.colors.highlight
            }
          });
        } else {
          setCellProps({
            style: {
              backgroundColor: 'inherit'
            }
          });
        }
      }, [rowIndex, setCellProps]);
      if (isFetching) return null;
      if (!vulnerabilityRow) return null;
      if (!((_vulnerabilityRow$vul2 = vulnerabilityRow.vulnerability) !== null && _vulnerabilityRow$vul2 !== void 0 && _vulnerabilityRow$vul2.id)) return null;
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.actions) {
        return /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
          iconType: "expand",
          "aria-label": "View",
          onClick: () => {
            onOpenFlyout(vulnerabilityRow);
          }
        });
      }
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.vulnerability) {
        var _vulnerabilityRow$vul3;
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (_vulnerabilityRow$vul3 = vulnerabilityRow.vulnerability) === null || _vulnerabilityRow$vul3 === void 0 ? void 0 : _vulnerabilityRow$vul3.id);
      }
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.cvss) {
        var _vulnerabilityRow$vul4, _vulnerabilityRow$vul5;
        if (!((_vulnerabilityRow$vul4 = vulnerabilityRow.vulnerability.score) !== null && _vulnerabilityRow$vul4 !== void 0 && _vulnerabilityRow$vul4.base) || !((_vulnerabilityRow$vul5 = vulnerabilityRow.vulnerability.score) !== null && _vulnerabilityRow$vul5 !== void 0 && _vulnerabilityRow$vul5.version)) {
          return null;
        }
        return /*#__PURE__*/_react.default.createElement(_vulnerability_badges.CVSScoreBadge, {
          score: vulnerabilityRow.vulnerability.score.base,
          version: vulnerabilityRow.vulnerability.score.version
        });
      }
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.severity) {
        if (!vulnerabilityRow.vulnerability.severity) {
          return null;
        }
        return /*#__PURE__*/_react.default.createElement(_vulnerability_badges.SeverityStatusBadge, {
          severity: vulnerabilityRow.vulnerability.severity
        });
      }
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.package) {
        var _vulnerabilityRow$pac;
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, vulnerabilityRow === null || vulnerabilityRow === void 0 ? void 0 : (_vulnerabilityRow$pac = vulnerabilityRow.package) === null || _vulnerabilityRow$pac === void 0 ? void 0 : _vulnerabilityRow$pac.name);
      }
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.version) {
        var _vulnerabilityRow$pac2;
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, vulnerabilityRow === null || vulnerabilityRow === void 0 ? void 0 : (_vulnerabilityRow$pac2 = vulnerabilityRow.package) === null || _vulnerabilityRow$pac2 === void 0 ? void 0 : _vulnerabilityRow$pac2.version);
      }
      if (columnId === _vulnerabilities_table_columns.vulnerabilitiesColumns.fixedVersion) {
        var _vulnerabilityRow$pac3;
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, vulnerabilityRow === null || vulnerabilityRow === void 0 ? void 0 : (_vulnerabilityRow$pac3 = vulnerabilityRow.package) === null || _vulnerabilityRow$pac3 === void 0 ? void 0 : _vulnerabilityRow$pac3.fixed_version);
      }
      return null;
    };
    return Cell;
  }, [data === null || data === void 0 ? void 0 : data.page, euiTheme.colors.highlight, onOpenFlyout, pageSize, selectedVulnerabilityIndex, isFetching]);
  const onPaginateFlyout = (0, _react.useCallback)(nextVulnerabilityIndex => {
    // the index of the vulnerability in the current page
    const newVulnerabilityIndex = nextVulnerabilityIndex % pageSize;

    // if the vulnerability is not in the current page, we need to change the page
    const flyoutPageIndex = Math.floor(nextVulnerabilityIndex / pageSize);
    setUrlQuery({
      pageIndex: flyoutPageIndex,
      vulnerabilityIndex: newVulnerabilityIndex
    });
  }, [pageSize, setUrlQuery]);
  const showVulnerabilityFlyout = flyoutVulnerabilityIndex > invalidIndex;
  if (data.page.length === 0) {
    return /*#__PURE__*/_react.default.createElement(_empty_state.EmptyState, {
      onResetFilters: onResetFilters
    });
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiProgress, {
    size: "xs",
    color: "accent",
    style: {
      opacity: isFetching ? 1 : 0
    }
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiDataGrid, {
    className: (0, _css.cx)({
      [styles.gridStyle]: true
    }, {
      [styles.highlightStyle]: showHighlight
    }),
    "aria-label": _translations.VULNERABILITIES,
    columns: columns,
    columnVisibility: {
      visibleColumns: columns.map(({
        id
      }) => id),
      setVisibleColumns: () => {}
    },
    height: undefined,
    width: undefined,
    schemaDetectors: [_custom_sort_script.severitySchemaConfig],
    rowCount: limitedTotalItemCount,
    rowHeightsOptions: {
      defaultHeight: 40
    },
    toolbarVisibility: {
      showColumnSelector: false,
      showDisplaySelector: false,
      showKeyboardShortcuts: false,
      showFullScreenSelector: false,
      additionalControls: {
        left: {
          prepend: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
            size: "xs",
            color: "text"
          }, _i18n.i18n.translate('xpack.csp.vulnerabilities.totalVulnerabilities', {
            defaultMessage: '{total, plural, one {# Vulnerability} other {# Vulnerabilities}}',
            values: {
              total: data === null || data === void 0 ? void 0 : data.total
            }
          })))
        }
      }
    },
    gridStyle: {
      border: 'horizontal',
      cellPadding: 'l',
      stripes: false,
      rowHover: 'none',
      header: 'underline'
    },
    renderCellValue: renderCellValue,
    inMemory: {
      level: 'enhancements'
    },
    sorting: {
      columns: sort,
      onSort: onSortHandler
    },
    pagination: {
      pageIndex,
      pageSize,
      pageSizeOptions: [10, 25, 100],
      onChangeItemsPerPage,
      onChangePage
    }
  }), isLastLimitedPage && /*#__PURE__*/_react.default.createElement(_findings_layout.LimitedResultsBar, null), showVulnerabilityFlyout && selectedVulnerability && /*#__PURE__*/_react.default.createElement(_vulnerability_finding_flyout.VulnerabilityFindingFlyout, {
    flyoutIndex: selectedVulnerabilityIndex,
    vulnerabilityRecord: selectedVulnerability,
    totalVulnerabilitiesCount: limitedTotalItemCount,
    onPaginate: onPaginateFlyout,
    closeFlyout: onCloseFlyout,
    isLoading: isFetching
  }));
};
const ResourceVulnerabilities = ({
  dataView
}) => {
  var _query$bool, _data$page$, _data$page$$resource, _data$page$2, _data$page$2$resource, _data$page$3, _data$page$3$resource, _data$page$4, _data$page$4$cloud;
  const params = (0, _reactRouterDom.useParams)();
  const resourceId = decodeURIComponent(params.resourceId);
  const {
    pageIndex,
    pageSize,
    onChangeItemsPerPage,
    onChangePage,
    query,
    sort,
    onSort,
    queryError,
    urlQuery,
    setUrlQuery,
    onResetFilters
  } = (0, _use_cloud_posture_table.useCloudPostureTable)({
    dataView,
    defaultQuery: getDefaultQuery,
    paginationLocalStorageKey: _constants.LOCAL_STORAGE_PAGE_SIZE_FINDINGS_KEY
  });
  const multiFieldsSort = (0, _react.useMemo)(() => {
    return sort.map(({
      id,
      direction
    }) => {
      if (id === _vulnerabilities_table_columns.vulnerabilitiesColumns.severity) {
        return (0, _custom_sort_script.severitySortScript)(direction);
      }
      if (id === _vulnerabilities_table_columns.vulnerabilitiesColumns.package) {
        return (0, _custom_sort_script.getCaseInsensitiveSortScript)(id, direction);
      }
      return {
        [id]: direction
      };
    });
  }, [sort]);
  const {
    data,
    isLoading,
    isFetching
  } = (0, _use_latest_vulnerabilities.useLatestVulnerabilities)({
    query: {
      ...query,
      bool: {
        ...(query === null || query === void 0 ? void 0 : query.bool),
        filter: [...((query === null || query === void 0 ? void 0 : (_query$bool = query.bool) === null || _query$bool === void 0 ? void 0 : _query$bool.filter) || []), {
          term: {
            'resource.id': resourceId
          }
        }]
      }
    },
    sort: multiFieldsSort,
    enabled: !queryError,
    pageIndex,
    pageSize
  });
  const error = queryError || null;
  if (isLoading) {
    return (0, _cloud_posture_page.defaultLoadingRenderer)();
  }
  if (!(data !== null && data !== void 0 && data.page)) {
    return (0, _cloud_posture_page.defaultNoDataRenderer)();
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_findings_search_bar.FindingsSearchBar, {
    dataView: dataView,
    setQuery: newQuery => {
      setUrlQuery({
        ...newQuery,
        pageIndex: 0
      });
    },
    loading: isFetching,
    placeholder: _translations.SEARCH_BAR_PLACEHOLDER
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Link, {
    to: (0, _reactRouterDom.generatePath)(_constants2.findingsNavigation.vulnerabilities_by_resource.path)
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    iconType: "arrowLeft",
    flush: "both"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.csp.vulnerabilities.resourceVulnerabilities.backToResourcesPageButtonLabel",
    defaultMessage: "Back to resources"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "xs"
  }), /*#__PURE__*/_react.default.createElement(_findings_layout.PageTitle, null, /*#__PURE__*/_react.default.createElement(_findings_layout.PageTitleText, {
    title: _i18n.i18n.translate('xpack.csp.vulnerabilities.resourceVulnerabilities.vulnerabilitiesPageTitle', {
      defaultMessage: '{resourceName} {hyphen} Vulnerabilities',
      values: {
        resourceName: data === null || data === void 0 ? void 0 : (_data$page$ = data.page[0]) === null || _data$page$ === void 0 ? void 0 : (_data$page$$resource = _data$page$.resource) === null || _data$page$$resource === void 0 ? void 0 : _data$page$$resource.name,
        hyphen: data !== null && data !== void 0 && (_data$page$2 = data.page[0]) !== null && _data$page$2 !== void 0 && (_data$page$2$resource = _data$page$2.resource) !== null && _data$page$2$resource !== void 0 && _data$page$2$resource.name ? '-' : ''
      }
    })
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_csp_inline_description_list.CspInlineDescriptionList, {
    listItems: [{
      title: _i18n.i18n.translate('xpack.csp.vulnerabilities.resourceVulnerabilities.resourceIdTitle', {
        defaultMessage: 'Resource ID'
      }),
      description: (data === null || data === void 0 ? void 0 : (_data$page$3 = data.page[0]) === null || _data$page$3 === void 0 ? void 0 : (_data$page$3$resource = _data$page$3.resource) === null || _data$page$3$resource === void 0 ? void 0 : _data$page$3$resource.id) || ''
    }, {
      title: _i18n.i18n.translate('xpack.csp.vulnerabilities.resourceVulnerabilities.regionTitle', {
        defaultMessage: 'Region'
      }),
      description: (data === null || data === void 0 ? void 0 : (_data$page$4 = data.page[0]) === null || _data$page$4 === void 0 ? void 0 : (_data$page$4$cloud = _data$page$4.cloud) === null || _data$page$4$cloud === void 0 ? void 0 : _data$page$4$cloud.region) || ''
    }]
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), error && /*#__PURE__*/_react.default.createElement(_error_callout.ErrorCallout, {
    error: error
  }), !error && /*#__PURE__*/_react.default.createElement(ResourceVulnerabilitiesDataGrid, {
    dataView: dataView,
    data: data,
    isFetching: isFetching,
    pageIndex: pageIndex,
    pageSize: pageSize,
    urlQuery: urlQuery,
    setUrlQuery: setUrlQuery,
    onChangeItemsPerPage: onChangeItemsPerPage,
    onChangePage: onChangePage,
    onResetFilters: onResetFilters,
    onSort: onSort,
    sort: sort
  }));
};
exports.ResourceVulnerabilities = ResourceVulnerabilities;