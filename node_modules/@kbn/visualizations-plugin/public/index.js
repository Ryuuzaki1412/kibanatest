"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ACTION_CONVERT_AGG_BASED_TO_LENS", {
  enumerable: true,
  get: function () {
    return _triggers.ACTION_CONVERT_AGG_BASED_TO_LENS;
  }
});
Object.defineProperty(exports, "ACTION_CONVERT_DASHBOARD_PANEL_TO_LENS", {
  enumerable: true,
  get: function () {
    return _triggers.ACTION_CONVERT_DASHBOARD_PANEL_TO_LENS;
  }
});
Object.defineProperty(exports, "ACTION_CONVERT_TO_LENS", {
  enumerable: true,
  get: function () {
    return _triggers.ACTION_CONVERT_TO_LENS;
  }
});
Object.defineProperty(exports, "AGG_BASED_VISUALIZATION_TRIGGER", {
  enumerable: true,
  get: function () {
    return _triggers.AGG_BASED_VISUALIZATION_TRIGGER;
  }
});
Object.defineProperty(exports, "DASHBOARD_VISUALIZATION_PANEL_TRIGGER", {
  enumerable: true,
  get: function () {
    return _triggers.DASHBOARD_VISUALIZATION_PANEL_TRIGGER;
  }
});
Object.defineProperty(exports, "DEFAULT_LEGEND_SIZE", {
  enumerable: true,
  get: function () {
    return _constants.DEFAULT_LEGEND_SIZE;
  }
});
Object.defineProperty(exports, "LegendSize", {
  enumerable: true,
  get: function () {
    return _constants.LegendSize;
  }
});
Object.defineProperty(exports, "LegendSizeToPixels", {
  enumerable: true,
  get: function () {
    return _constants.LegendSizeToPixels;
  }
});
Object.defineProperty(exports, "SAVED_OBJECTS_LIMIT_SETTING", {
  enumerable: true,
  get: function () {
    return _constants.SAVED_OBJECTS_LIMIT_SETTING;
  }
});
Object.defineProperty(exports, "SAVED_OBJECTS_PER_PAGE_SETTING", {
  enumerable: true,
  get: function () {
    return _constants.SAVED_OBJECTS_PER_PAGE_SETTING;
  }
});
Object.defineProperty(exports, "TypesService", {
  enumerable: true,
  get: function () {
    return _types_service.TypesService;
  }
});
Object.defineProperty(exports, "VISUALIZE_EDITOR_TRIGGER", {
  enumerable: true,
  get: function () {
    return _triggers.VISUALIZE_EDITOR_TRIGGER;
  }
});
Object.defineProperty(exports, "VISUALIZE_EMBEDDABLE_TYPE", {
  enumerable: true,
  get: function () {
    return _embeddable.VISUALIZE_EMBEDDABLE_TYPE;
  }
});
Object.defineProperty(exports, "VIS_EVENT_TO_TRIGGER", {
  enumerable: true,
  get: function () {
    return _embeddable.VIS_EVENT_TO_TRIGGER;
  }
});
Object.defineProperty(exports, "VisGroups", {
  enumerable: true,
  get: function () {
    return _vis_groups_enum.VisGroups;
  }
});
Object.defineProperty(exports, "VisualizationContainer", {
  enumerable: true,
  get: function () {
    return _components.VisualizationContainer;
  }
});
Object.defineProperty(exports, "XYCurveTypes", {
  enumerable: true,
  get: function () {
    return _common.XYCurveTypes;
  }
});
exports.convertToLensModule = void 0;
Object.defineProperty(exports, "getDataViewByIndexPatternId", {
  enumerable: true,
  get: function () {
    return _datasource.getDataViewByIndexPatternId;
  }
});
Object.defineProperty(exports, "getFullPath", {
  enumerable: true,
  get: function () {
    return _saved_visualize_utils.getFullPath;
  }
});
Object.defineProperty(exports, "getVisSchemas", {
  enumerable: true,
  get: function () {
    return _vis_schemas.getVisSchemas;
  }
});
exports.plugin = plugin;
Object.defineProperty(exports, "prepareLogTable", {
  enumerable: true,
  get: function () {
    return _common.prepareLogTable;
  }
});
Object.defineProperty(exports, "updateOldState", {
  enumerable: true,
  get: function () {
    return _vis_update_state.updateOldState;
  }
});
Object.defineProperty(exports, "urlFor", {
  enumerable: true,
  get: function () {
    return _saved_visualize_utils.urlFor;
  }
});
var _plugin = require("./plugin");
var _types_service = require("./vis_types/types_service");
var _embeddable = require("./embeddable");
var _components = require("./components");
var _vis_schemas = require("./vis_schemas");
var _vis_groups_enum = require("./vis_types/vis_groups_enum");
var _vis_update_state = require("./legacy/vis_update_state");
var _constants = require("../common/constants");
var _common = require("../common");
var _saved_visualize_utils = require("./utils/saved_visualize_utils");
var _triggers = require("./triggers");
var _datasource = require("./convert_to_lens/datasource");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
and the Server Side Public License, v 1; you may not use this file except
in compliance with, at your election, the Elastic License 2.0 or the Server
ide Public License, v 1.

function plugin(initializerContext) {
  return new _plugin.VisualizationsPlugin(initializerContext);
}

/** @public static code */

/** @public types */

const convertToLensModule = Promise.resolve().then(() => _interopRequireWildcard(require('./convert_to_lens')));
exports.convertToLensModule = convertToLensModule;