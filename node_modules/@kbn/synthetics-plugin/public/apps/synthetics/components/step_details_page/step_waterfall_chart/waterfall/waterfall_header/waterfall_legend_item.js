"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterfallLegendItem = WaterfallLegendItem;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _common = require("@kbn/kibana-react-plugin/common");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function WaterfallLegendItem({
  id,
  color,
  label,
  boxSize = 12,
  isClickable = false,
  isActive = false,
  onClick
}) {
  const [isHovered, setIsHovered] = (0, _react.useState)(false);
  const onMouseEvent = (0, _react.useCallback)(evt => {
    setIsHovered((evt === null || evt === void 0 ? void 0 : evt.type) === 'mouseenter');
  }, []);
  const isBoxFilled = !isClickable || isActive || isHovered;
  const title = isClickable ? CLICK_FILTER_LABEL : undefined;
  const ariaLabel = `${label}${isClickable ? ` - ${title}` : ''}`;
  return /*#__PURE__*/_react.default.createElement(EuiFlexGroupLegendItem, {
    role: isClickable ? 'checkbox' : 'listitem',
    title: title,
    "aria-label": ariaLabel,
    "aria-checked": isClickable ? isActive : undefined,
    css: {
      height: 16,
      cursor: isClickable ? 'pointer' : undefined
    },
    alignItems: "center",
    gutterSize: "s",
    onMouseEnter: onMouseEvent,
    onMouseLeave: onMouseEvent,
    onClick: () => {
      onClick === null || onClick === void 0 ? void 0 : onClick(id);
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    color: color,
    size: "m",
    type: isBoxFilled ? 'stopFilled' : 'stopSlash'
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs"
  }, label));
}
const EuiFlexGroupLegendItem = (0, _common.euiStyled)(_eui.EuiFlexGroup)`
  flex-grow: 0;
  flex-shrink: 0;
  &:active {
    ${({
  role
}) => role === 'checkbox' ? 'text-decoration: underline;' : ''}
  }
`;
const CLICK_FILTER_LABEL = _i18n.i18n.translate('xpack.synthetics.waterfall.applyFilters.message', {
  defaultMessage: 'Click to add or remove filter'
});