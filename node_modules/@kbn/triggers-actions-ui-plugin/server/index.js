"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CoreQueryParamsSchemaProperties", {
  enumerable: true,
  get: function () {
    return _data.CoreQueryParamsSchemaProperties;
  }
});
Object.defineProperty(exports, "DEFAULT_GROUPS", {
  enumerable: true,
  get: function () {
    return _data.DEFAULT_GROUPS;
  }
});
Object.defineProperty(exports, "MAX_GROUPS", {
  enumerable: true,
  get: function () {
    return _data.MAX_GROUPS;
  }
});
Object.defineProperty(exports, "TIME_SERIES_BUCKET_SELECTOR_FIELD", {
  enumerable: true,
  get: function () {
    return _data.TIME_SERIES_BUCKET_SELECTOR_FIELD;
  }
});
exports.plugin = exports.config = void 0;
Object.defineProperty(exports, "validateAggType", {
  enumerable: true,
  get: function () {
    return _data.validateAggType;
  }
});
Object.defineProperty(exports, "validateCoreQueryBody", {
  enumerable: true,
  get: function () {
    return _data.validateCoreQueryBody;
  }
});
Object.defineProperty(exports, "validateGroupBy", {
  enumerable: true,
  get: function () {
    return _data.validateGroupBy;
  }
});
Object.defineProperty(exports, "validateTimeWindowUnits", {
  enumerable: true,
  get: function () {
    return _data.validateTimeWindowUnits;
  }
});
var _config = require("./config");
var _data = require("./data");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const config = {
  exposeToBrowser: {
    enableGeoTrackingThresholdAlert: true,
    enableExperimental: true
  },
  schema: _config.configSchema
};
exports.config = config;
const plugin = async ctx => {
  const {
    TriggersActionsPlugin
  } = await Promise.resolve().then(() => _interopRequireWildcard(require('./plugin')));
  return new TriggersActionsPlugin(ctx);
};
exports.plugin = plugin;