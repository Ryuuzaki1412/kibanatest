"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuleComponent = RuleComponent;
exports.RuleWithApi = void 0;
exports.alertToListItem = alertToListItem;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _kibana = require("../../../../common/lib/kibana");
var _with_bulk_rule_api_operations = require("../../common/components/with_bulk_rule_api_operations");
require("./rule.scss");
var _get_experimental_features = require("../../../../common/get_experimental_features");
var _suspended_component_with_props = require("../../../lib/suspended_component_with_props");
var _rule_status_helpers = require("../../../../common/lib/rule_status_helpers");
var _rule_status_panel = _interopRequireDefault(require("./rule_status_panel"));
var _translations = require("../../rules_list/translations");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const RuleEventLogList = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./rule_event_log_list'))));
const RuleAlertList = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./rule_alert_list'))));
const RuleDefinition = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./rule_definition'))));
const EVENT_LOG_LIST_TAB = 'rule_event_log_list';
const ALERT_LIST_TAB = 'rule_alert_list';
function RuleComponent({
  rule,
  ruleType,
  readOnly,
  ruleSummary,
  muteAlertInstance,
  unmuteAlertInstance,
  requestRefresh,
  refreshToken,
  numberOfExecutions,
  onChangeDuration,
  durationEpoch = Date.now(),
  isLoadingChart
}) {
  const {
    ruleTypeRegistry,
    actionTypeRegistry
  } = (0, _kibana.useKibana)().services;
  const alerts = Object.entries(ruleSummary.alerts).map(([alertId, alert]) => alertToListItem(durationEpoch, alertId, alert)).sort((leftAlert, rightAlert) => leftAlert.sortPriority - rightAlert.sortPriority);
  const onMuteAction = async alert => {
    await (alert.isMuted ? unmuteAlertInstance(rule, alert.alert) : muteAlertInstance(rule, alert.alert));
    requestRefresh();
  };
  const healthColor = (0, _rule_status_helpers.getRuleHealthColor)(rule);
  const statusMessage = (0, _rule_status_helpers.getRuleStatusMessage)({
    rule,
    licenseErrorText: _translations.ALERT_STATUS_LICENSE_ERROR,
    lastOutcomeTranslations: _translations.rulesLastRunOutcomeTranslationMapping,
    executionStatusTranslations: _translations.rulesStatusesTranslationsMapping
  });
  const renderRuleAlertList = () => {
    return (0, _suspended_component_with_props.suspendedComponentWithProps)(RuleAlertList, 'xl')({
      items: alerts,
      readOnly,
      onMuteAction
    });
  };
  const tabs = [{
    id: ALERT_LIST_TAB,
    name: _i18n.i18n.translate('xpack.triggersActionsUI.sections.ruleDetails.rule.alertsTabText', {
      defaultMessage: 'Alerts'
    }),
    'data-test-subj': 'ruleAlertListTab',
    content: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), renderRuleAlertList())
  }, {
    id: EVENT_LOG_LIST_TAB,
    name: _i18n.i18n.translate('xpack.triggersActionsUI.sections.ruleDetails.rule.eventLogTabText', {
      defaultMessage: 'History'
    }),
    'data-test-subj': 'eventLogListTab',
    content: (0, _suspended_component_with_props.suspendedComponentWithProps)(RuleEventLogList, 'xl')({
      fetchRuleSummary: false,
      ruleId: rule.id,
      ruleType,
      ruleSummary,
      numberOfExecutions,
      refreshToken,
      isLoadingRuleSummary: isLoadingChart,
      onChangeDuration,
      requestRefresh
    })
  }];
  const renderTabs = () => {
    const isEnabled = (0, _get_experimental_features.getIsExperimentalFeatureEnabled)('rulesDetailLogs');
    if (isEnabled) {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiTabbedContent, {
        "data-test-subj": "ruleDetailsTabbedContent",
        tabs: tabs
      });
    }
    return renderRuleAlertList();
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s",
    wrap: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: 2
  }, /*#__PURE__*/_react.default.createElement(_rule_status_panel.default, {
    rule: rule,
    isEditable: !readOnly,
    healthColor: healthColor,
    statusMessage: statusMessage,
    requestRefresh: requestRefresh,
    refreshToken: refreshToken
  })), (0, _suspended_component_with_props.suspendedComponentWithProps)(RuleDefinition, 'xl')({
    rule,
    actionTypeRegistry,
    ruleTypeRegistry,
    hideEditButton: true,
    onEditRule: requestRefresh
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "xl"
  }), /*#__PURE__*/_react.default.createElement("input", {
    type: "hidden",
    "data-test-subj": "alertsDurationEpoch",
    name: "alertsDurationEpoch",
    value: durationEpoch
  }), renderTabs());
}
const RuleWithApi = (0, _with_bulk_rule_api_operations.withBulkRuleOperations)(RuleComponent);
exports.RuleWithApi = RuleWithApi;
function alertToListItem(durationEpoch, alertId, alert) {
  const isMuted = !!(alert !== null && alert !== void 0 && alert.muted);
  const status = alert.status;
  const start = alert !== null && alert !== void 0 && alert.activeStartDate ? new Date(alert.activeStartDate) : undefined;
  const duration = start ? durationEpoch - start.valueOf() : 0;
  const sortPriority = getSortPriorityByStatus(alert === null || alert === void 0 ? void 0 : alert.status);
  const tracked = !!(alert !== null && alert !== void 0 && alert.tracked);
  return {
    alert: alertId,
    status,
    start,
    duration,
    isMuted,
    sortPriority,
    flapping: alert.flapping,
    tracked,
    ...(alert.maintenanceWindowIds ? {
      maintenanceWindowIds: alert.maintenanceWindowIds
    } : {})
  };
}
function getSortPriorityByStatus(status) {
  switch (status) {
    case 'Active':
      return 0;
    case 'OK':
      return 1;
  }
  return 2;
}