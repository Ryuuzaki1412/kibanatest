"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlertMutedSwitch = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const AlertMutedSwitch = ({
  alert,
  onMuteAction,
  disabled
}) => {
  const [isMuted, setIsMuted] = (0, _react.useState)(alert === null || alert === void 0 ? void 0 : alert.isMuted);
  const [isUpdating, setIsUpdating] = (0, _react.useState)(false);
  return isUpdating ? /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
    size: "m"
  }) : /*#__PURE__*/_react.default.createElement(_eui.EuiSwitch, {
    name: "mute",
    disabled: disabled,
    compressed: true,
    checked: isMuted,
    onChange: async () => {
      setIsUpdating(true);
      await onMuteAction(alert);
      setIsMuted(!isMuted);
      setIsUpdating(false);
    },
    "data-test-subj": `muteAlertButton_${alert.alert}`,
    showLabel: false,
    label: "mute"
  });
};
exports.AlertMutedSwitch = AlertMutedSwitch;