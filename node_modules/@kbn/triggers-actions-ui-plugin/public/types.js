"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ALERT_HISTORY_PREFIX", {
  enumerable: true,
  get: function () {
    return _common.ALERT_HISTORY_PREFIX;
  }
});
exports.ActionConnectorMode = void 0;
Object.defineProperty(exports, "AlertHistoryDefaultIndexName", {
  enumerable: true,
  get: function () {
    return _common.AlertHistoryDefaultIndexName;
  }
});
Object.defineProperty(exports, "AlertHistoryDocumentTemplate", {
  enumerable: true,
  get: function () {
    return _common.AlertHistoryDocumentTemplate;
  }
});
Object.defineProperty(exports, "AlertHistoryEsIndexConnectorId", {
  enumerable: true,
  get: function () {
    return _common.AlertHistoryEsIndexConnectorId;
  }
});
exports.BulkActionsVerbs = exports.AlertsField = void 0;
Object.defineProperty(exports, "CONTEXT_ACTION_VARIABLES", {
  enumerable: true,
  get: function () {
    return _triggersActionsUiTypes.CONTEXT_ACTION_VARIABLES;
  }
});
exports.EditConnectorTabs = void 0;
Object.defineProperty(exports, "OPTIONAL_ACTION_VARIABLES", {
  enumerable: true,
  get: function () {
    return _triggersActionsUiTypes.OPTIONAL_ACTION_VARIABLES;
  }
});
exports.Percentiles = void 0;
Object.defineProperty(exports, "REQUIRED_ACTION_VARIABLES", {
  enumerable: true,
  get: function () {
    return _triggersActionsUiTypes.REQUIRED_ACTION_VARIABLES;
  }
});
exports.RuleFlyoutCloseReason = exports.RRuleFrequency = void 0;
var _common = require("@kbn/actions-plugin/common");
var _triggersActionsUiTypes = require("@kbn/triggers-actions-ui-types");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
// In Triggers and Actions we treat all `Alert`s as `SanitizedRule<RuleTypeParams>`
// so the `Params` is a black-box of Record<string, unknown>
let RuleFlyoutCloseReason;
exports.RuleFlyoutCloseReason = RuleFlyoutCloseReason;
(function (RuleFlyoutCloseReason) {
  RuleFlyoutCloseReason[RuleFlyoutCloseReason["SAVED"] = 0] = "SAVED";
  RuleFlyoutCloseReason[RuleFlyoutCloseReason["CANCELED"] = 1] = "CANCELED";
})(RuleFlyoutCloseReason || (exports.RuleFlyoutCloseReason = RuleFlyoutCloseReason = {}));
let ActionConnectorMode;
exports.ActionConnectorMode = ActionConnectorMode;
(function (ActionConnectorMode) {
  ActionConnectorMode["Test"] = "test";
  ActionConnectorMode["ActionForm"] = "actionForm";
})(ActionConnectorMode || (exports.ActionConnectorMode = ActionConnectorMode = {}));
let EditConnectorTabs;
exports.EditConnectorTabs = EditConnectorTabs;
(function (EditConnectorTabs) {
  EditConnectorTabs["Configuration"] = "configuration";
  EditConnectorTabs["Test"] = "test";
})(EditConnectorTabs || (exports.EditConnectorTabs = EditConnectorTabs = {}));
let Percentiles;
exports.Percentiles = Percentiles;
(function (Percentiles) {
  Percentiles["P50"] = "P50";
  Percentiles["P95"] = "P95";
  Percentiles["P99"] = "P99";
})(Percentiles || (exports.Percentiles = Percentiles = {}));
let AlertsField;
exports.AlertsField = AlertsField;
(function (AlertsField) {
  AlertsField["name"] = "kibana.alert.rule.name";
  AlertsField["reason"] = "kibana.alert.reason";
  AlertsField["uuid"] = "kibana.alert.rule.uuid";
  AlertsField["case_ids"] = "kibana.alert.case_ids";
})(AlertsField || (exports.AlertsField = AlertsField = {})); // TODO We need to create generic type between our plugin, right now we have different one because of the old alerts table
let BulkActionsVerbs;
exports.BulkActionsVerbs = BulkActionsVerbs;
(function (BulkActionsVerbs) {
  BulkActionsVerbs["add"] = "add";
  BulkActionsVerbs["delete"] = "delete";
  BulkActionsVerbs["clear"] = "clear";
  BulkActionsVerbs["selectCurrentPage"] = "selectCurrentPage";
  BulkActionsVerbs["selectAll"] = "selectAll";
  BulkActionsVerbs["rowCountUpdate"] = "rowCountUpdate";
  BulkActionsVerbs["updateRowLoadingState"] = "updateRowLoadingState";
  BulkActionsVerbs["updateAllLoadingState"] = "updateAllLoadingState";
})(BulkActionsVerbs || (exports.BulkActionsVerbs = BulkActionsVerbs = {}));
let RRuleFrequency;
exports.RRuleFrequency = RRuleFrequency;
(function (RRuleFrequency) {
  RRuleFrequency[RRuleFrequency["YEARLY"] = 0] = "YEARLY";
  RRuleFrequency[RRuleFrequency["MONTHLY"] = 1] = "MONTHLY";
  RRuleFrequency[RRuleFrequency["WEEKLY"] = 2] = "WEEKLY";
  RRuleFrequency[RRuleFrequency["DAILY"] = 3] = "DAILY";
})(RRuleFrequency || (exports.RRuleFrequency = RRuleFrequency = {}));