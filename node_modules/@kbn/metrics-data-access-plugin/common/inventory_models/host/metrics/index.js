"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.metrics = exports.hostSnapshotMetricTypes = void 0;
var _snapshot = require("./snapshot");
var _tsvb = require("./tsvb");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


// not sure why this is the only model with "count"
const {
  count,
  ...exposedHostSnapshotMetrics
} = _snapshot.snapshot;
const hostSnapshotMetricTypes = Object.keys(exposedHostSnapshotMetrics);
exports.hostSnapshotMetricTypes = hostSnapshotMetricTypes;
const metrics = {
  tsvb: _tsvb.tsvb,
  snapshot: _snapshot.snapshot,
  getFormulas: async () => await Promise.resolve().then(() => _interopRequireWildcard(require('./formulas'))).then(({
    formulas
  }) => ({
    ...formulas
  })),
  getDashboards: async () => await Promise.resolve().then(() => _interopRequireWildcard(require('./dashboards'))).then(({
    dashboards
  }) => ({
    ...dashboards
  })),
  defaultSnapshot: 'cpu',
  defaultTimeRangeInSeconds: 3600 // 1 hour
};
exports.metrics = metrics;