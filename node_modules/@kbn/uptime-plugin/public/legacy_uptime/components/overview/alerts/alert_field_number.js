"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleAlertFieldNumberChange = exports.AlertFieldNumber = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const handleAlertFieldNumberChange = (e, isInvalid, setIsInvalid, setFieldValue) => {
  const num = parseInt(e.target.value, 10);
  if (isNaN(num) || num < 1) {
    setIsInvalid(true);
  } else {
    if (isInvalid) setIsInvalid(false);
    setFieldValue(num);
  }
};
exports.handleAlertFieldNumberChange = handleAlertFieldNumberChange;
const AlertFieldNumber = ({
  'aria-label': ariaLabel,
  'data-test-subj': dataTestSubj,
  disabled,
  fieldValue,
  setFieldValue
}) => {
  const [isInvalid, setIsInvalid] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
    "aria-label": ariaLabel,
    compressed: true,
    "data-test-subj": dataTestSubj,
    min: 1,
    onChange: e => handleAlertFieldNumberChange(e, isInvalid, setIsInvalid, setFieldValue),
    disabled: disabled,
    value: fieldValue,
    isInvalid: isInvalid
  });
};
exports.AlertFieldNumber = AlertFieldNumber;