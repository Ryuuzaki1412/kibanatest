"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initTlsLegacyAlertType = void 0;
var _react = _interopRequireDefault(require("react"));
var _uptime_alerts = require("../../../../common/constants/uptime_alerts");
var _translations = require("../../../../common/rules/legacy_uptime/translations");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; } /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License
you may not use this file except in compliance with the Elastic License


const {
  defaultActionMessage,
  description
} = _translations.TlsTranslationsLegacy;
const TLSAlert = /*#__PURE__*/_react.default.lazy(() => Promise.resolve().then(() => _interopRequireWildcard(require('./lazy_wrapper/tls_alert'))));
const initTlsLegacyAlertType = ({
  core,
  plugins
}) => ({
  id: _uptime_alerts.CLIENT_ALERT_TYPES.TLS_LEGACY,
  iconClass: 'uptimeApp',
  documentationUrl(docLinks) {
    return `${docLinks.ELASTIC_WEBSITE_URL}guide/en/observability/${docLinks.DOC_LINK_VERSION}/tls-certificate-alert.html`;
  },
  ruleParamsExpression: params => /*#__PURE__*/_react.default.createElement(TLSAlert, {
    core: core,
    plugins: plugins,
    ruleParams: params.ruleParams,
    setRuleParams: params.setRuleParams
  }),
  description,
  validate: () => ({
    errors: {}
  }),
  defaultActionMessage,
  requiresAppContext: true
});
exports.initTlsLegacyAlertType = initTlsLegacyAlertType;