"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SecurityPageName = exports.SECURITY_UI_APP_ID = exports.LinkCategoryType = void 0;
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SECURITY_UI_APP_ID = 'securitySolutionUI';
exports.SECURITY_UI_APP_ID = SECURITY_UI_APP_ID;
let SecurityPageName;
exports.SecurityPageName = SecurityPageName;
(function (SecurityPageName) {
  SecurityPageName["administration"] = "administration";
  SecurityPageName["alerts"] = "alerts";
  SecurityPageName["assets"] = "assets";
  SecurityPageName["blocklist"] = "blocklist";
  SecurityPageName["case"] = "cases";
  SecurityPageName["caseConfigure"] = "cases_configure";
  SecurityPageName["caseCreate"] = "cases_create";
  SecurityPageName["cloudSecurityPostureBenchmarks"] = "cloud_security_posture-benchmarks";
  SecurityPageName["cloudSecurityPostureDashboard"] = "cloud_security_posture-dashboard";
  SecurityPageName["cloudSecurityPostureFindings"] = "cloud_security_posture-findings";
  SecurityPageName["cloudSecurityPostureRules"] = "cloud_security_posture-rules";
  SecurityPageName["cloudDefend"] = "cloud_defend";
  SecurityPageName["cloudDefendPolicies"] = "cloud_defend-policies";
  SecurityPageName["dashboards"] = "dashboards";
  SecurityPageName["dataQuality"] = "data_quality";
  SecurityPageName["detections"] = "detections";
  SecurityPageName["detectionAndResponse"] = "detection_response";
  SecurityPageName["endpoints"] = "endpoints";
  SecurityPageName["eventFilters"] = "event_filters";
  SecurityPageName["exceptions"] = "exceptions";
  SecurityPageName["exploreLanding"] = "explore";
  SecurityPageName["hostIsolationExceptions"] = "host_isolation_exceptions";
  SecurityPageName["hosts"] = "hosts";
  SecurityPageName["hostsAnomalies"] = "hosts-anomalies";
  SecurityPageName["hostsRisk"] = "hosts-risk";
  SecurityPageName["hostsEvents"] = "hosts-events";
  SecurityPageName["investigations"] = "investigations";
  SecurityPageName["kubernetes"] = "kubernetes";
  SecurityPageName["landing"] = "get_started";
  SecurityPageName["mlLanding"] = "machine_learning-landing";
  SecurityPageName["network"] = "network";
  SecurityPageName["networkAnomalies"] = "network-anomalies";
  SecurityPageName["networkDns"] = "network-dns";
  SecurityPageName["networkEvents"] = "network-events";
  SecurityPageName["networkHttp"] = "network-http";
  SecurityPageName["networkTls"] = "network-tls";
  SecurityPageName["noPage"] = "";
  SecurityPageName["overview"] = "overview";
  SecurityPageName["policies"] = "policy";
  SecurityPageName["responseActionsHistory"] = "response_actions_history";
  SecurityPageName["rules"] = "rules";
  SecurityPageName["rulesAdd"] = "rules-add";
  SecurityPageName["rulesCreate"] = "rules-create";
  SecurityPageName["rulesLanding"] = "rules-landing";
  SecurityPageName["sessions"] = "sessions";
  SecurityPageName["threatIntelligence"] = "threat_intelligence";
  SecurityPageName["timelines"] = "timelines";
  SecurityPageName["timelinesTemplates"] = "timelines-templates";
  SecurityPageName["trustedApps"] = "trusted_apps";
  SecurityPageName["uncommonProcesses"] = "uncommon_processes";
  SecurityPageName["users"] = "users";
  SecurityPageName["usersAnomalies"] = "users-anomalies";
  SecurityPageName["usersAuthentications"] = "users-authentications";
  SecurityPageName["usersEvents"] = "users-events";
  SecurityPageName["usersRisk"] = "users-risk";
  SecurityPageName["entityAnalytics"] = "entity_analytics";
  SecurityPageName["entityAnalyticsManagement"] = "entity_analytics-management";
  SecurityPageName["coverageOverview"] = "coverage-overview";
})(SecurityPageName || (exports.SecurityPageName = SecurityPageName = {}));
let LinkCategoryType;
exports.LinkCategoryType = LinkCategoryType;
(function (LinkCategoryType) {
  LinkCategoryType["title"] = "title";
  LinkCategoryType["collapsibleTitle"] = "collapsibleTitle";
  LinkCategoryType["accordion"] = "accordion";
  LinkCategoryType["separator"] = "separator";
})(LinkCategoryType || (exports.LinkCategoryType = LinkCategoryType = {}));